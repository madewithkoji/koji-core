{"version":3,"sources":["../../../src/backend/utilities/index.ts"],"names":["UtilitiesRoutes","Utilities","config","rootPath","rootHeaders","projectId","projectToken","key","axios","post","UNFREEZE_KEY","headers","Base","server"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;IACKA,e;AAIL;AACA;AACA;;WANKA,e;AAAAA,EAAAA,e;GAAAA,e,KAAAA,e;;IAOQC,S;;;;;AAIX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,qBAAmBC,MAAnB,EAAsD;AAAA;;AAAA;AACpD,8BAAMA,MAAN;AADoD;AAAA;AAGpD,UAAKC,QAAL,GAAgB,6BAAhB;AAEA,UAAKC,WAAL,GAAmB;AACjB,2BAAqB,MAAKC,SADT;AAEjB,8BAAwB,MAAKC,YAFZ;AAGjB,sBAAgB;AAHC,KAAnB;AALoD;AAUrD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;qHAEwBC,G;;;;;;uBACdC,kBAAMC,IAAN,WACD,KAAKN,QADJ,SACeH,eAAe,CAACU,YAD/B,GAEJ;AACEH,kBAAAA,GAAG,EAAHA;AADF,iBAFI,EAKJ;AACEI,kBAAAA,OAAO,EAAE,KAAKP;AADhB,iBALI,C;;;;;;;;;;;;;;;;;;EAvDqBQ,U,sFAqD5BC,c","sourcesContent":["import axios from 'axios';\nimport { server } from '../@decorators/server';\nimport { Base, BackendConfigurationInput } from '../base';\n\n/**\n * API routes for utilities.\n */\nenum UtilitiesRoutes {\n  UNFREEZE_KEY = '/v1/apps/hooks/cache/unfreeze',\n}\n\n/**\n * Implements a class for handling secret values in your Koji.\n */\nexport class Utilities extends Base {\n  private rootPath: string;\n  private rootHeaders: Object;\n\n  /**\n   * @param   config\n   *\n   * @example\n   * ```javascript\n   * const utilities = new KojiBackend.Utilities({ res });\n   * ```\n   */\n  public constructor(config: BackendConfigurationInput) {\n    super(config);\n\n    this.rootPath = 'https://rest.api.gokoji.com';\n\n    this.rootHeaders = {\n      'X-Koji-Project-Id': this.projectId,\n      'X-Koji-Project-Token': this.projectToken,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Unfreeze a response that has been frozen by an `x-koji-freeze-key` header.\n   *\n   * @param   key      The key used to free the response\n   *\n   * @example\n   * ```javascript\n   * app.get('/loadPosts', async (req, res) => {\n   *    const posts = [{ value: 'postValue' }];\n   *\n   *    res.setHeader('x-koji-freeze-key', 'posts');\n   *    res.status(200).json({\n   *        posts,\n   *    });\n   * });\n   *\n   * app.post('/update', async (req, res) => {\n   *    // Update some data in the database\n   *    // await db.update....\n   *\n   *    // Unfreeze. The next request to /loadPosts will hit the server and get\n   *    // a fresh list of posts, which will then be frozen until unfreeze is\n   *    // called again.\n   *    await utilities.unfreeze('posts');\n   *\n   *    res.sendStatus(200);\n   * });\n   * ```\n   */\n  @server\n  public async unfreeze(key: string): Promise<void> {\n    await axios.post(\n      `${this.rootPath}${UtilitiesRoutes.UNFREEZE_KEY}`,\n      {\n        key,\n      },\n      {\n        headers: this.rootHeaders,\n      },\n    );\n  }\n}\n"],"file":"index.js"}