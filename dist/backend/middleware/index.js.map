{"version":3,"sources":["../../../src/backend/middleware/index.ts"],"names":["decodeObject","obj","Object","keys","forEach","key","decodeURI","middleware","kojiConfig","kojiMiddleware","req","res","next","locals","KOJI_PROJECT_ID","headers","process","env","KOJI_PROJECT_TOKEN","remixData","overrides","parsedOverrides","JSON","parse","remixDataOverride","arrayMerge","dest","source"],"mappings":";;;;;;;;;;;AACA;;AAIA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAmB;AACtCC,EAAAA,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,OAAjB,CAAyB,UAACC,GAAD,EAAS;AAChC,QAAIJ,GAAG,CAACI,GAAD,CAAH,IAAY,yBAAOJ,GAAG,CAACI,GAAD,CAAV,MAAoB,QAApC,EAA8C;AAC5CL,MAAAA,YAAY,CAACC,GAAG,CAACI,GAAD,CAAJ,CAAZ;AACA;AACD,KAJ+B,CAMhC;;;AACA,QACEJ,GAAG,CAACI,GAAD,CAAH,IACA,OAAOJ,GAAG,CAACI,GAAD,CAAV,KAAoB,SADpB,IAEA,OAAOJ,GAAG,CAACI,GAAD,CAAV,KAAoB,QAHtB,EAIE;AACA;AACAJ,MAAAA,GAAG,CAACI,GAAD,CAAH,GAAWC,SAAS,CAACL,GAAG,CAACI,GAAD,CAAJ,CAApB;AACD;AACF,GAfD;AAgBD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASE,UAAT,GAAiD;AAAA,MAA7BC,UAA6B,uEAAJ,EAAI;AACtD,SAAO,SAASC,cAAT,CAAwBC,GAAxB,EAAsCC,GAAtC,EAAqDC,IAArD,EAAyE;AAC9E;AACAD,IAAAA,GAAG,CAACE,MAAJ,CAAWC,eAAX,GAA6BJ,GAAG,CAACK,OAAJ,CAAY,2BAAZ,KAA4CC,OAAO,CAACC,GAAR,CAAYH,eAArF;AACAH,IAAAA,GAAG,CAACE,MAAJ,CAAWK,kBAAX,GAAgCR,GAAG,CAACK,OAAJ,CAAY,8BAAZ,KAA+CC,OAAO,CAACC,GAAR,CAAYC,kBAA3F,CAH8E,CAK9E;;AAL8E,gCAMnDV,UANmD,CAMtEW,SANsE;AAAA,QAMtEA,SANsE,sCAM1D,EAN0D,0BAQ9E;;AACA,QAAMC,SAAS,GAAGV,GAAG,CAACK,OAAJ,CAAY,0BAAZ,CAAlB;AAEA,QAAMM,eAAe,GAAG,OAAOD,SAAP,KAAqB,QAArB,GAAgCE,IAAI,CAACC,KAAL,CAAWH,SAAX,CAAhC,GAAwD,EAAhF,CAX8E,CAa9E;AACA;;AACApB,IAAAA,YAAY,CAACqB,eAAD,CAAZ,CAf8E,CAiB9E;;AAjB8E,gCAkBhCA,eAlBgC,CAkBtEF,SAlBsE;AAAA,QAkB3DK,iBAlB2D,sCAkBvC,EAlBuC;AAoB9Eb,IAAAA,GAAG,CAACE,MAAJ,CAAWM,SAAX,GAAuB,2BAAUA,SAAV,EAAqBK,iBAArB,EAAwC;AAC7DC,MAAAA,UAAU,EAAE,oBAACC,IAAD,EAAOC,MAAP;AAAA,eAAkBA,MAAlB;AAAA;AADiD,KAAxC,CAAvB;AAIAf,IAAAA,IAAI;AACL,GAzBD;AA0BD","sourcesContent":["import { Request, Response, NextFunction } from 'express';\nimport deepmerge from 'deepmerge';\n\nimport { KojiConfig } from '../../frontend';\n\nconst decodeObject = (obj: any): any => {\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] && typeof obj[key] === 'object') {\n      decodeObject(obj[key]);\n      return;\n    }\n\n    // Decode the value, unless it's a boolean or a number\n    if (\n      obj[key] &&\n      typeof obj[key] !== 'boolean' &&\n      typeof obj[key] !== 'number'\n    ) {\n      // eslint-disable-next-line no-param-reassign\n      obj[key] = decodeURI(obj[key]);\n    }\n  });\n};\n\n/**\n * Executes an [[http://expressjs.com/en/guide/using-middleware.html | Express middleware]], making Koji-specific data available on the `res.locals` property.\n *\n * @param kojiConfig Configuration data for the Koji app.\n *\n * @example\n * ```\n * const app = express();\n * app.use(Koji.middleware(require('koji.json')));\n *\n * app.get('/data', (req, res, next) => {\n *   // Backend constructor\n *   const database = new KojiBackend.Database({ res });\n *   ...\n * });\n * ```\n */\nexport function middleware(kojiConfig: KojiConfig = {}) {\n  return function kojiMiddleware(req: Request, res: Response, next: NextFunction) {\n    // Explicitly pass the project id and token that are coming in from proxied headers\n    res.locals.KOJI_PROJECT_ID = req.headers['x-trusted-koji-project-id'] || process.env.KOJI_PROJECT_ID;\n    res.locals.KOJI_PROJECT_TOKEN = req.headers['x-trusted-koji-project-token'] || process.env.KOJI_PROJECT_TOKEN;\n\n    // Use the remixData from the json configuration as the base\n    const { remixData = {} } = kojiConfig;\n\n    // Apply version-specific overrides (equivalent of window.KOJI_OVERRIDES.overrides on the client)\n    const overrides = req.headers['x-trusted-koji-overrides'];\n\n    const parsedOverrides = typeof overrides === 'string' ? JSON.parse(overrides) : {};\n\n    // Overrides coming from the headers are URL-encoded, so we need to decode them\n    // before using them\n    decodeObject(parsedOverrides);\n\n    // Pull the remixData property from our overrides (which will include the entire koji.json contents)\n    const { remixData: remixDataOverride = {} } = parsedOverrides;\n\n    res.locals.remixData = deepmerge(remixData, remixDataOverride, {\n      arrayMerge: (dest, source) => source,\n    });\n\n    next();\n  };\n}\n"],"file":"index.js"}