{"version":3,"sources":["../../../src/backend/secret/index.ts"],"names":["SecretRoutes","Secret","config","rootPath","rootHeaders","projectId","projectToken","keyPath","axios","post","KEYSTORE_GET","scope","token","headers","data","decryptedValue","resource","expireSeconds","CREATE_SIGNED_REQUEST","url","Base","server"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAEKA,Y;AAKL;AACA;AACA;;WAPKA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;IAQQC,M;;;;;AAIX,kBAAYC,MAAZ,EAA+C;AAAA;;AAAA;AAC7C,8BAAMA,MAAN;AAD6C;AAAA;AAG7C,UAAKC,QAAL,GAAgB,6BAAhB;AAEA,UAAKC,WAAL,GAAmB;AACjB,2BAAqB,MAAKC,SADT;AAEjB,8BAAwB,MAAKC,YAFZ;AAGjB,sBAAgB;AAHC,KAAnB;AAL6C;AAU9C;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;yHAE+BC,O;;;;;;;;uBACJC,kBAAMC,IAAN,WAClB,KAAKN,QADa,SACFH,YAAY,CAACU,YADX,GAErB;AACEC,kBAAAA,KAAK,EAAE,KAAKN,SADd;AAEEO,kBAAAA,KAAK,EAAE,KAAKN,YAFd;AAGEC,kBAAAA,OAAO,EAAPA;AAHF,iBAFqB,EAOrB;AACEM,kBAAAA,OAAO,EAAE,KAAKT;AADhB,iBAPqB,C;;;;AAAfU,gBAAAA,I,qBAAAA,I;iDAYDA,IAAI,CAACC,c;;;;;;;;;;;;;;;;AAGd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;+HAEiCC,Q,EAAkBC,a;;;;;;;;uBACxBT,kBAAMC,IAAN,WAClB,KAAKN,QADa,SACFH,YAAY,CAACkB,qBADX,GAErB;AACEF,kBAAAA,QAAQ,EAARA,QADF;AAEEC,kBAAAA,aAAa,EAAbA;AAFF,iBAFqB,EAMrB;AAAEJ,kBAAAA,OAAO,EAAE,KAAKT;AAAhB,iBANqB,C;;;;AAAfU,gBAAAA,I,sBAAAA,I;kDASDA,IAAI,CAACK,G;;;;;;;;;;;;;;;;;;EAnEYC,U,0FA2BzBC,c,4KA6BAA,c","sourcesContent":["import axios from 'axios';\nimport { server } from '../@decorators/server';\nimport { Base, BackendConfigurationInput } from '../base';\n\nenum SecretRoutes {\n  KEYSTORE_GET = '/v1/keystore/get',\n  CREATE_SIGNED_REQUEST = '/v1/cdn/signedRequest/create',\n}\n\n/**\n * Implements a class for handling secret keys in your Koji.\n */\nexport class Secret extends Base {\n  private rootPath: string;\n  private rootHeaders: Object;\n\n  constructor(config: BackendConfigurationInput) {\n    super(config);\n\n    this.rootPath = 'https://rest.api.gokoji.com';\n\n    this.rootHeaders = {\n      'X-Koji-Project-Id': this.projectId,\n      'X-Koji-Project-Token': this.projectToken,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Gets the value for a secret key.\n   *\n   * @param   keyPath  Path for secret key\n   * @return           Key value.\n   *\n   * @example\n   * ```javascript\n   * const keyValue = await secret.resolveValue<string>(SecretRoutes.KEYSTORE_GET + \"/mySecretKey\");\n   * ```\n   */\n  @server\n  public async resolveValue<T>(keyPath: string): Promise<T> {\n    const { data } = await axios.post(\n      `${this.rootPath}${SecretRoutes.KEYSTORE_GET}`,\n      {\n        scope: this.projectId,\n        token: this.projectToken,\n        keyPath,\n      },\n      {\n        headers: this.rootHeaders,\n      },\n    );\n\n    return data.decryptedValue;\n  }\n\n  /**\n   * Creates a signed URL.\n   *\n   * @param   resource        Path to resource\n   * @param   expireSeconds   Expiration in seconds\n   * @return                  URL for resource.\n   *\n   * @example\n   * ```javascript\n   * const secretPath = await secret.generateSignedUrl();\n   * ```\n   */\n  @server\n  public async generateSignedUrl(resource: string, expireSeconds?: number): Promise<string> {\n    const { data } = await axios.post(\n      `${this.rootPath}${SecretRoutes.CREATE_SIGNED_REQUEST}`,\n      {\n        resource,\n        expireSeconds,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data.url;\n  }\n}\n"],"file":"index.js"}