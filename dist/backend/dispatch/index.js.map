{"version":3,"sources":["../../../src/backend/dispatch/index.ts"],"names":["unsafeGlobal","global","WebSocket","require","PlatformEvents","Dispatch","config","axios","get","projectId","data","shardName","maxConnectionsPerShard","authorization","Promise","resolve","ws","options","projectToken","params","Object","keys","reduce","acc","cur","push","encodeURIComponent","url","join","authToken","Sockette","timeout","maxAttempts","onmessage","e","handleMessage","onreconnect","handleReconnect","onmaximum","handleMaximum","onclose","handleClose","onerror","handleError","JSON","parse","eventName","latencyMs","payload","CONNECTED","initialConnection","isConnected","identify","clientId","eventHandlers","forEach","handler","callback","messageQueue","send","console","error","handlerId","id","filter","userInfo","emitEvent","SET_USER_INFO","IDENTIFY","token","recipients","message","stringify","length","Error","close","Base"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAMA,YAAiB,GAAGC,MAA1B;AACAD,YAAY,CAACE,SAAb,GAAyBC,OAAO,CAAC,eAAD,CAAhC;AAEA;AACA;AACA;;AAmBA;AACA;AACA;IACYC,c;AAOZ;AACA;AACA;;;;WATYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,8BAAAA,c;;AAqCZ;AACA;AACA;IACaC,Q;;;;;AASX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,oBAAmBC,MAAnB,EAAsD;AAAA;;AAAA;AACpD,8BAAMA,MAAN;AADoD;AAAA,0GAdjB,KAciB;AAAA,oGAbvB,KAauB;AAAA,sGAZZ,EAYY;AAAA,qGAXrB,EAWqB;AAAA,2FAVxB,IAUwB;AAAA;AAErD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;uBAE2BC,kBAAMC,GAAN,qDAAuD,KAAKC,SAA5D,E;;;;AAAfC,gBAAAA,I,oBAAAA,I;iDACD,CAACA,IAAI,IAAI,EAAT,EAAa,CAAb,C;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AAC0BC,gBAAAA,S,QAAAA,S,+BAAWC,sB,EAAAA,sB,sCAAyB,G,0BAAKC,a,QAAAA,a;kDACxD,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9B,sBAAI,MAAI,CAACC,EAAT,EAAa;AACX;AACD;;AAED,sBAAMC,OAAwB,GAAG;AAC/BR,oBAAAA,SAAS,EAAE,MAAI,CAACA,SADe;AAE/BS,oBAAAA,YAAY,EAAE,MAAI,CAACA,YAFY;AAG/BP,oBAAAA,SAAS,EAATA,SAH+B;AAI/BC,oBAAAA,sBAAsB,EAAtBA,sBAJ+B;AAK/BC,oBAAAA,aAAa,EAAbA;AAL+B,mBAAjC;AAQA,sBAAMM,MAAgB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,MAArB,CAA4B,UAACC,GAAD,EAAgBC,GAAhB,EAAwB;AAC3E,wBAAIP,OAAO,CAACO,GAAD,CAAX,EAAkB;AAChBD,sBAAAA,GAAG,CAACE,IAAJ,WAAYD,GAAZ,cAAmBE,kBAAkB,CAACT,OAAO,CAACO,GAAD,CAAR,CAArC;AACD;;AACD,2BAAOD,GAAP;AACD,mBALwB,EAKtB,EALsB,CAAzB;AAOA,sBAAMI,GAAG,2CAAoCR,MAAM,CAACS,IAAP,CAAY,GAAZ,CAApC,CAAT;AAEA,kBAAA,MAAI,CAACC,SAAL,GAAiBhB,aAAjB,CAtB8B,CAwB9B;;AACA,kBAAA,MAAI,CAACG,EAAL,GAAU,IAAIc,oBAAJ,CAAaH,GAAb,EAAkB;AAC1BI,oBAAAA,OAAO,EAAE,GADiB;AAE1BC,oBAAAA,WAAW,EAAE,EAFa;AAG1BC,oBAAAA,SAAS,EAAE,mBAACC,CAAD;AAAA,6BAAO,MAAI,CAACC,aAAL,CAAmBD,CAAnB,EAAsBnB,OAAtB,CAAP;AAAA,qBAHe;AAI1BqB,oBAAAA,WAAW,EAAE;AAAA,6BAAM,MAAI,CAACC,eAAL,EAAN;AAAA,qBAJa;AAK1BC,oBAAAA,SAAS,EAAE;AAAA,6BAAM,MAAI,CAACC,aAAL,EAAN;AAAA,qBALe;AAM1BC,oBAAAA,OAAO,EAAE;AAAA,6BAAM,MAAI,CAACC,WAAL,EAAN;AAAA,qBANiB;AAO1BC,oBAAAA,OAAO,EAAE,iBAACR,CAAD;AAAA,6BAAO,MAAI,CAACS,WAAL,CAAiBT,CAAjB,CAAP;AAAA;AAPiB,mBAAlB,CAAV;AASD,iBAlCM,C;;;;;;;;;;;;;;;;AAqCT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;yCACoDnB,O,EAAmB;AAAA,UAA7CL,IAA6C,SAA7CA,IAA6C;;AAAA,wBACzBkC,IAAI,CAACC,KAAL,CAAWnC,IAAI,IAAI,IAAnB,CADyB;AAAA,UAC3DoC,SAD2D,eAC3DA,SAD2D;AAAA,UAChDC,SADgD,eAChDA,SADgD;AAAA,UACrCC,OADqC,eACrCA,OADqC;;AAGnE,UAAIF,SAAS,KAAK1C,cAAc,CAAC6C,SAAjC,EAA4C;AAC1C,aAAKC,iBAAL,GAAyB,IAAzB;AACA,aAAKC,WAAL,GAAmB,IAAnB;AACA,YAAI,KAAKtB,SAAT,EAAoB,KAAKuB,QAAL,CAAc,KAAKvB,SAAnB;AACpBd,QAAAA,OAAO,CAAC;AACNsC,UAAAA,QAAQ,EAAEL,OAAO,CAACK,QADZ;AAEN1C,UAAAA,SAAS,EAAEqC,OAAO,CAACrC;AAFb,SAAD,CAAP;AAIA;AACD;;AAED,WAAK2C,aAAL,CAAmBC,OAAnB,CAA2B,UAACC,OAAD,EAAa;AACtC,YAAIV,SAAS,KAAKU,OAAO,CAACV,SAA1B,EAAqC;AACnCU,UAAAA,OAAO,CAACC,QAAR,CAAiBT,OAAjB,EAA0B;AAAED,YAAAA,SAAS,EAATA;AAAF,WAA1B;AACD;AACF,OAJD;AAKD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;sCAC4B;AAAA;;AACxB,WAAKI,WAAL,GAAmB,IAAnB;AACA,WAAKO,YAAL,GAAoB,KAAKA,YAAL,CAAkBpC,MAAlB,CAAyB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzD,YAAI,MAAI,CAACR,EAAT,EAAa;AACX,UAAA,MAAI,CAACA,EAAL,CAAQ2C,IAAR,CAAanC,GAAb;AACD;;AACD,eAAOD,GAAP;AACD,OALmB,EAKjB,EALiB,CAApB;AAMD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;oCAC0B,CAAE;AAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;kCACwB;AACpB,WAAK4B,WAAL,GAAmB,KAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;gCACsBjB,C,EAAU;AAC5B0B,MAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd,EAAuC3B,CAAvC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;uBACYY,S,EAAmBW,Q,EAA4C;AAAA;;AACvE,UAAMK,SAAS,GAAG,eAAlB;AAEA,WAAKR,aAAL,CAAmB7B,IAAnB,CAAwB;AACtBsC,QAAAA,EAAE,EAAED,SADkB;AAEtBhB,QAAAA,SAAS,EAATA,SAFsB;AAGtBW,QAAAA,QAAQ,EAARA;AAHsB,OAAxB;AAMA,aAAO,YAAM;AACX,QAAA,MAAI,CAACH,aAAL,GAAqB,MAAI,CAACA,aAAL,CAAmBU,MAAnB,CAA0B;AAAA,cAAGD,EAAH,SAAGA,EAAH;AAAA,iBAAYA,EAAE,KAAKD,SAAnB;AAAA,SAA1B,CAArB;AACD,OAFD;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;gCACqBG,Q,EAAoC;AACrD,WAAKC,SAAL,CAAe9D,cAAc,CAAC+D,aAA9B,EAA6CF,QAA7C;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;6BACkBpC,S,EAAmB;AACjC,WAAKqC,SAAL,CAAe9D,cAAc,CAACgE,QAA9B,EAAwC;AACtCC,QAAAA,KAAK,EAAExC;AAD+B,OAAxC;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;8BACmBiB,S,EAAmBE,O,EAAmCsB,U,EAAuB;AAC5F,UAAMC,OAAO,GAAG3B,IAAI,CAAC4B,SAAL,CAAe;AAC7B1B,QAAAA,SAAS,EAATA,SAD6B;AAE7BE,QAAAA,OAAO,EAAPA,OAF6B;AAG7BsB,QAAAA,UAAU,EAAVA;AAH6B,OAAf,CAAhB,CAD4F,CAO5F;;AACA,UAAIC,OAAO,CAACE,MAAR,GAAiB,KAArB,EAA4B;AAC1B,cAAM,IAAIC,KAAJ,CAAU,wFAAV,CAAN;AACD,OAV2F,CAY5F;;;AACA,UAAI,CAAC,KAAKxB,iBAAN,IAA2B,CAAC,KAAKlC,EAArC,EAAyC;AACvC,cAAM,IAAI0D,KAAJ,CAAU,8FAAV,CAAN;AACD,OAf2F,CAiB5F;;;AACA,UAAI,CAAC,KAAKvB,WAAV,EAAuB;AACrB,aAAKO,YAAL,CAAkBjC,IAAlB,CAAuB8C,OAAvB;AACA;AACD;;AAED,WAAKvD,EAAL,CAAQ2C,IAAR,CAAaY,OAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;iCACsB;AAClB,UAAI,KAAKvD,EAAT,EAAa,KAAKA,EAAL,CAAQ2D,KAAR;AACb,WAAK3D,EAAL,GAAU,IAAV;AACD;;;EAxR2B4D,U","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport Sockette from 'sockette';\nimport axios from 'axios';\nimport { Base, BackendConfigurationInput } from '../base';\n\nconst unsafeGlobal: any = global;\nunsafeGlobal.WebSocket = require('isomorphic-ws');\n\n/**\n * Defines a DispatchConfigurationInput interface.\n */\ninterface DispatchConfigurationInput {\n  shardName?: string | null;\n  maxConnectionsPerShard: number;\n  authorization?: string;\n}\n\n/**\n * Defines a DispatchOptions interface.\n */\ninterface DispatchOptions {\n  projectId: string;\n  projectToken?: string;\n  shardName?: string | null;\n  maxConnectionsPerShard?: number;\n  authorization?: string;\n  [index: string]: any;\n}\n\n/**\n * Defines constants for Koji platform events.\n */\nexport enum PlatformEvents {\n  CONNECTED = '@@KOJI_DISPATCH/CONNECTED',\n  CONNECTED_CLIENTS_CHANGED = '@@KOJI_DISPATCH/CONNECTED_CLIENTS_CHANGED',\n  IDENTIFY = '@@KOJI_DISPATCH/IDENTIFY',\n  SET_USER_INFO = '@@KOJI_DISPATCH/SET_USER_INFO',\n}\n\n/**\n * Defines a MessageHandler interface.\n */\nexport interface MessageHandler {\n  id: string;\n  eventName: string;\n  callback: MessageHandlerCallback;\n}\n\n/**\n * Implements the callback function for the MessageHandler interface.\n */\nexport type MessageHandlerCallback = (payload: { [index: string]: any }, metadata: { latencyMs?: number }) => void;\n\n/**\n * Defines a ShardInfo interface.\n */\nexport interface ShardInfo {\n  shardName: string;\n  numConnectedClients: number;\n}\n\n/**\n * Defines a ConnectionInfo interface.\n */\nexport interface ConnectionInfo {\n  clientId?: string;\n  shardName: string;\n}\n\n/**\n * Implements a dispatch system for the backend of your Koji. For more information, see [[https://developer.withkoji.com/reference/packages/withkoji-dispatch-package | the Koji dispatch package reference]].\n */\nexport class Dispatch extends Base {\n  private authToken?: string;\n\n  private initialConnection: boolean = false;\n  private isConnected: boolean = false;\n  private eventHandlers: MessageHandler[] = [];\n  private messageQueue: string[] = [];\n  private ws: Sockette | null = null;\n\n  /**\n   * @param   config\n   *\n   * @example\n   * ```javascript\n   * const dispatch = new KojiBackend.Dispatch({ res });\n   * ```\n   */\n  public constructor(config: BackendConfigurationInput) {\n    super(config);\n  }\n\n  /**\n   * Gets shard info for the current project.\n   *\n   * @return                   Shard info in the form of an array.\n   *\n   * @example\n   * ```javascript\n   * const myInfo = await dispatch.info('myCollection');\n   * ```\n   */\n  public async info(): Promise<ShardInfo[]> {\n    const { data } = await axios.get(`https://dispatch-info.api.gokoji.com/info/${this.projectId}`);\n    return (data || [])[0];\n  }\n\n  /**\n   * Creates a shard connection.\n   *\n   * @param     shardName     Name of the shard.\n   * @param     maxConnectionsPerShard   Maximum connections per Shard (defaults to 100).\n   * @param     authorization Authorization credentials.\n   *\n   * @return                   ConnectionInfo object.\n   *\n   * @example\n   * ```javascript\n   * const myInfo = await dispatch.connect('myShard', 100, authorization);\n   * ```\n   */\n  private async connect({ shardName, maxConnectionsPerShard = 100, authorization }: DispatchConfigurationInput): Promise<ConnectionInfo> {\n    return new Promise((resolve) => {\n      if (this.ws) {\n        return;\n      }\n\n      const options: DispatchOptions = {\n        projectId: this.projectId,\n        projectToken: this.projectToken,\n        shardName,\n        maxConnectionsPerShard,\n        authorization,\n      };\n\n      const params: string[] = Object.keys(options).reduce((acc: string[], cur) => {\n        if (options[cur]) {\n          acc.push(`${cur}=${encodeURIComponent(options[cur])}`);\n        }\n        return acc;\n      }, []);\n\n      const url = `wss://dispatch.api.gokoji.com?${params.join('&')}`;\n\n      this.authToken = authorization;\n\n      // Create a socket connection to the dispatch server\n      this.ws = new Sockette(url, {\n        timeout: 5e3,\n        maxAttempts: 10,\n        onmessage: (e) => this.handleMessage(e, resolve),\n        onreconnect: () => this.handleReconnect(),\n        onmaximum: () => this.handleMaximum(),\n        onclose: () => this.handleClose(),\n        onerror: (e) => this.handleError(e),\n      });\n    });\n  }\n\n  /**\n   * Handles a message event.\n   *\n   * @param     data        JSON object containing eventName, latencyMS, and payload.\n   * @param     eventName   PlatformEvents enum value\n   * @param     latencyMS   Latency in milliseconds\n   * @param     payload     Client object\n   *\n   * @example\n   * ```javascript\n   * dispatch.handleMessage(PlatformEvents.CONNECTED, 1000, client);\n   * ```\n   */\n  private handleMessage({ data }: { data: string }, resolve: Function) {\n    const { eventName, latencyMs, payload } = JSON.parse(data || '{}');\n\n    if (eventName === PlatformEvents.CONNECTED) {\n      this.initialConnection = true;\n      this.isConnected = true;\n      if (this.authToken) this.identify(this.authToken);\n      resolve({\n        clientId: payload.clientId,\n        shardName: payload.shardName,\n      });\n      return;\n    }\n\n    this.eventHandlers.forEach((handler) => {\n      if (eventName === handler.eventName) {\n        handler.callback(payload, { latencyMs });\n      }\n    });\n  }\n\n  /**\n   * Reconnects a shard.\n   *\n   * @example\n   * ```javascript\n   * dispatch.handleReconnect();\n   * ```\n   */\n  private handleReconnect() {\n    this.isConnected = true;\n    this.messageQueue = this.messageQueue.reduce((acc, cur) => {\n      if (this.ws) {\n        this.ws.send(cur);\n      }\n      return acc;\n    }, []);\n  }\n\n  /**\n   * Handles maximum.\n   *\n   * @example\n   * ```javascript\n   * dispatch.handleMaximum();\n   * ```\n   */\n  private handleMaximum() {}\n\n  /**\n   * Cleans up when connection is closed.\n   *\n   * @example\n   * ```javascript\n   * dispatch.handleClose();\n   * ```\n   */\n  private handleClose() {\n    this.isConnected = false;\n  }\n\n  /**\n   * Prints error message to console.\n   *\n   * @param     e    Event that generated the error.\n   *\n   * @example\n   * ```javascript\n   * dispatch.handleError(e);\n   * ```\n   */\n  private handleError(e: Event) {\n    console.error('[Koji Dispatch] error', e);\n  }\n\n  /**\n   * Assigns a callback function to an event.\n   *\n   * @param     eventName     Name of event.\n   * @param     callback      Callback function.\n   *\n   * @example\n   * ```javascript\n   * dispatch.on('eventName', callbackFunction);\n   * ```\n   */\n  public on(eventName: string, callback: MessageHandlerCallback): Function {\n    const handlerId = uuidv4();\n\n    this.eventHandlers.push({\n      id: handlerId,\n      eventName,\n      callback,\n    });\n\n    return () => {\n      this.eventHandlers = this.eventHandlers.filter(({ id }) => id !== handlerId);\n    };\n  }\n\n  /**\n   * Emit SET_USER_INFO event.\n   *\n   * @param     userInfo     Object containing an array of user info.\n   *\n   * @example\n   * ```javascript\n   * dispatch.setUserInfo({['user info']});\n   * ```\n   */\n  public setUserInfo(userInfo: { [index: string]: any }) {\n    this.emitEvent(PlatformEvents.SET_USER_INFO, userInfo);\n  }\n\n  /**\n   * Emit IDENTIFY event.\n   *\n   * @param     authToken     Authorization token.\n   *\n   * @example\n   * ```javascript\n   * dispatch.identify(token);\n   * ```\n   */\n  public identify(authToken: string) {\n    this.emitEvent(PlatformEvents.IDENTIFY, {\n      token: authToken,\n    });\n  }\n\n  /**\n   * Emit event.\n   *\n   * @param     eventName     Name of event.\n   * @param     payload       Array of values to be included in event message.\n   * @param     recipients    One or more event recipients.\n   *\n   * @example\n   * ```javascript\n   * dispatch.emitEvent('click', [id:1]);\n   * ```\n   */\n  public emitEvent(eventName: string, payload: { [index: string]: any }, recipients?: string[]) {\n    const message = JSON.stringify({\n      eventName,\n      payload,\n      recipients,\n    });\n\n    // Discard a long message\n    if (message.length > 128e3) {\n      throw new Error('Message is too long to be sent through Koji Dispatch. Messages must be less than 128kb');\n    }\n\n    // Check instantiation\n    if (!this.initialConnection || !this.ws) {\n      throw new Error('Please make sure you have called and awaited `connect()` before attempting to send a message');\n    }\n\n    // If the connection has dropped, push the message into a queue\n    if (!this.isConnected) {\n      this.messageQueue.push(message);\n      return;\n    }\n\n    this.ws.send(message);\n  }\n\n  /**\n   * Close connection.\n   *\n   * @example\n   * ```javascript\n   * dispatch.disconnect();\n   * ```\n   */\n  public disconnect() {\n    if (this.ws) this.ws.close();\n    this.ws = null;\n  }\n}\n"],"file":"index.js"}