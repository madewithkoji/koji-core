{"version":3,"sources":["../../../src/backend/iap/index.ts"],"names":["IapRoutes","IAP","config","rootPath","rootHeaders","projectId","projectToken","iapToken","axios","post","RESOLVE_RECEIPTS","headers","data","receipts","receiptId","RESOLVE_RECEIPT_BY_ID","receipt","sku","RESOLVE_RECEIPTS_BY_SKU","attributes","notificationMessage","UPDATE_RECEIPT","CAPTURE_TRANSACTION","REFUND_TRANSACTION","get","GET_PRODUCT_BY_SKU","product","Base","server"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { server } from '../@decorators/server';\nimport { Base, BackendConfigurationInput } from '../base';\nimport { IAPToken } from '../../types';\n\n/**\n * API routes for iap methods.\n */\nexport enum IapRoutes {\n  GET_PRODUCT_BY_SKU = '/v1/iap/consumer/getProductBySku',\n  RESOLVE_RECEIPTS = '/v1/iap/consumer/resolveReceipts',\n  RESOLVE_RECEIPT_BY_ID = '/v1/iap/consumer/resolveReceiptById',\n  RESOLVE_RECEIPTS_BY_SKU = '/v1/iap/consumer/resolveReceiptsBySku',\n  UPDATE_RECEIPT = '/v1/iap/consumer/updateReceiptAttributes',\n  CAPTURE_TRANSACTION = '/v1/iap/consumer/captureTransaction',\n  REFUND_TRANSACTION = '/v1/iap/consumer/refundTransaction',\n}\n\n/**\n * Receipt for a user’s purchase of a product.\n * Resolve receipts with [[resolveReceiptById]], [[resolveReceiptsByIAPToken]], or [[resolveReceiptsBySku]].\n * Add custom attributes for to a receipt with [[updateReceipt]].\n */\nexport interface IapReceipt {\n  /** Unique identifier for the receipt. */\n  receiptId: string;\n  /** Unique identifier for the product. */\n  productId: string;\n  /** Price the user paid for the product. */\n  purchasedPrice: number;\n  /** Object containing a list of custom key-value pairs associated with the receipt.\n  * You can use [[updateReceipt]] to update these values.\n  * Additionally, the fulfillment information (email, phone, or address) and customMessage are included this object, if set at purchase time.\n  */\n  attributes: { [index: string]: any };\n  /**\n   * Object containing references to the associated transaction receipts – `credit` for the user receiving the funds (seller), `debit` for the user sending the funds (buyer).\n   * To link to the transaction receipt in the user’s Koji wallet, use the format `https://withkoji.com/payments/transactions/TXN_ID`.\n   */\n  transactionIds: {\n    credit: string;\n    debit: string;\n  };\n  /** Date of the purchase. */\n  datePurchased: Date;\n  /** Date of the refund, if the transaction has been refunded. Refunds can occur either manually or due to capture expiry of a pending transaction. */\n  dateRefunded?: Date;\n}\n\n/**\n * Information about a Koji user.\n */\nexport interface UserArtifact {\n  /** Unique identifier for the user. */\n  id: string;\n  /** The user's profile URL. */\n  href: string;\n\n  /** The user's username (if access was granted). */\n  username: string;\n  /** The user's display name (if access was granted). */\n  displayName: string;\n  /** The user's profile picture (if access was granted). */\n  profilePicture: string | null;\n  /** Whether the user is verified. */\n  isVerified: boolean;\n}\n\n/**\n * Specific product for purchase.\n * Products are defined in the entitlements file of the app and are registered or updated when the project is deployed.\n * Use [[loadProduct]] to retrieve the properties associated with a product’s SKU.\n */\nexport interface IapProduct {\n  /** Unique identifier for this version of the product. */\n  id: string;\n  /** Name of the Koji app from which the product was purchased. */\n  appId: string;\n  /** Koji username of the seller. */\n  ownerUserId: string;\n\n  /** Purchase price of the product. Defined in the entitlements file. */\n  price: number;\n  /** Indicator of whether a purchase price is defined for the product. Defined in the entitlements file. */\n  priceIsUnset: boolean;\n\n  /** Indicator of whether a product can be purchased more than once. Defined in the entitlements file. */\n  isConsumable: boolean;\n  /**  Whether the transaction receipt can display the `receipt` context of the app. If enabled, use {@doclink core-frontend-playerstate#context | Koji.playerState.context} to detect the `receipt` context, and use {@doclink core-frontend-playerstate#receiptType | Koji.playerState.receiptType} to determine whether the buyer or the seller is viewing the receipt. */\n  dynamicReceipt: boolean;\n  /** Whether to capture transactions immediately. If set to false, transactions are held in a pending state until they are manually captured with [[captureTransaction]]. */\n  captureOnPurchase: boolean;\n  /** Period within which a pending transaction must be captured before it is reversed, from 0 to 7 days. Default is 0. */\n  captureExpiryPeriod: number;\n\n  /** Description displayed when the user was prompted to purchase the product. Defined in the entitlements file. */\n  name: string;\n  /** Identifier of the purchased product. Defined in the entitlements file. */\n  sku: string;\n  /** Date the product was registered or updated, which happens when the app is deployed. */\n  dateCreated: Date;\n  /** Indicator of whether the product is still available for purchase. */\n  isActive: boolean;\n\n  /** Type of user information collected for order fulfillment. Defined in the entitlements file. */\n  fulfillment?: 'email'|'phone'|'address';\n  /** Total number of times the product can be sold (inventory threshold). Defined in the entitlements file. */\n  quantity?: number;\n  /** Remaining number of times the product can be sold. Calculated based on the total inventory defined in the entitlements file, less the number of purchases. */\n  numAvailable?: number;\n\n  /** Object that represents the seller. */\n  owner?: UserArtifact;\n  /** Array of [[IapReceipt]] objects representing purchases of the product. */\n  purchases?: IapReceipt[];\n}\n\n/**\n * Manages in-app purchases on the backend of your Koji app.\n */\nexport class IAP extends Base {\n  private rootPath: string;\n  private rootHeaders: Object;\n\n  /**\n   * Instantiates the IAP class.\n   *\n   * @param   config\n   *\n   * @example\n   * ```javascript\n   * const iap = new KojiBackend.IAP({ res });\n   * ```\n   */\n  public constructor(config: BackendConfigurationInput) {\n    super(config);\n\n    this.rootPath = 'https://rest.api.gokoji.com';\n\n    this.rootHeaders = {\n      'X-Koji-Project-Id': this.projectId,\n      'X-Koji-Project-Token': this.projectToken,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Gets all receipts for the current user, which can be used to validate purchases for specific products.\n   *\n   * @param     iapToken     Short-lived IAP token for the current user.\n   *\n   * @return                 Array of receipts for the user's purchases.\n   *\n   * @example\n   * ```javascript\n   * const receipts = await iap.resolveReceiptsByIAPToken(iapToken);\n   * ```\n   */\n  @server\n  public async resolveReceiptsByIAPToken(iapToken: IAPToken): Promise<IapReceipt[]> {\n    const { data: { receipts = [] } } = await axios.post(\n      `${this.rootPath}${IapRoutes.RESOLVE_RECEIPTS}`,\n      {},\n      {\n        headers: {\n          ...this.rootHeaders,\n          'X-Koji-Iap-Callback-Token': iapToken,\n        },\n      },\n    );\n\n    return receipts;\n  }\n\n  /**\n   * Gets a specific transaction receipt by its ID, which can be used to facilitate fulfillment.\n   * For example, use a dynamic receipt to upload a video response from the seller and then share that response with the buyer.\n   * Or, capture product options, such as color or size, to display to the seller in an admin view.\n   *\n   * @param     receiptId     Unique identifier for the receipt.\n   * @return                  Object for the specified receipt.\n   *\n   * @example\n   * ```javascript\n   * const receipt = await iap.resolveReceiptById(id);\n   *\n   * // Use custom attributes for a video response\n   * this.setState({\n   *  instructions: receipt.attributes.message,\n   *  video: receipt.attributes.video,\n   * });\n   * ```\n   */\n  @server\n  public async resolveReceiptById(receiptId: string): Promise<IapReceipt> {\n    const { data: { receipt } } = await axios.post(\n      `${this.rootPath}${IapRoutes.RESOLVE_RECEIPT_BY_ID}`,\n      { receiptId },\n      { headers: this.rootHeaders },\n    );\n\n    return receipt;\n  }\n\n  /**\n   * Gets all receipts for a specified product, which can be used to aggregate sales data.\n   *\n   * @param     sku     Identifier for the product. Products are defined in the entitlements file and registered or updated when the project is deployed.\n   * @return            Array of receipts for the specified product.\n   *\n   * @example\n   * ```javascript\n   * const receipts = await iap.resolveReceiptBySku(sku);\n   * ```\n   */\n  @server\n  public async resolveReceiptsBySku(sku: string): Promise<IapReceipt[]> {\n    const { data: { receipts } } = await axios.post(\n      `${this.rootPath}${IapRoutes.RESOLVE_RECEIPTS_BY_SKU}`,\n      { sku },\n      { headers: this.rootHeaders },\n    );\n\n    return receipts;\n  }\n\n  /**\n   * Updates the custom attributes for a specified receipt.\n   * For example, if a user purchases a credit toward a product on the Koji app and then uses it, you can update the receipt to indicate that the credit has been consumed and is not available for future sessions.\n   *\n   * @param     receiptId             Unique identifier for the receipt.\n   * @param     attributes            Object of key-value paired attributes to store with the receipt.\n   * @param     notificationMessage   Custom message to sent the user when the receipt is updated (up to 80 characters). If undefined, the message will read: `Your receipt for PRODUCT_NAME was updated.`\n   *\n   * @return                          Confirmation of the update, if the request was successful, or an error message, if not.\n   *\n   * @example\n   * ```javascript\n   * iap.updateReceipt(id, { consumed: true }, 'You have successfully redeemed your credit.');\n   * ```\n   */\n  public async updateReceipt(\n    receiptId: string,\n    attributes: { [index: string]: any },\n    notificationMessage?: string,\n  ): Promise<any> {\n    const { data } = await axios.post(\n      `${this.rootPath}${IapRoutes.UPDATE_RECEIPT}`,\n      {\n        receiptId,\n        attributes,\n        notificationMessage,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data;\n  }\n\n  /**\n   * Captures a pending transaction.\n   *\n   * NOTE: If your IAP product is defined with the `captureOnPurchase` key set to `false`, the transaction is held in a pending state until you manually invoke `captureTransaction`.\n   * Funds are not available in the seller's account until the transaction is captured.\n   * If you do not capture the transaction before the `captureExpiryPeriod`, the transaction is automatically reversed and the buyer is refunded.\n   * This period can be specified in the product definition from 0 to 7 days (default is 0).\n   *\n   * @param receiptId Unique identifier for the transaction receipt.\n   *\n   * @example\n   *\n   * ```javascript\n   * iap.captureTransaction(receiptId);\n   * ```\n   */\n  public async captureTransaction(receiptId: string): Promise<void> {\n    await axios.post(\n      `${this.rootPath}${IapRoutes.CAPTURE_TRANSACTION}`,\n      {\n        receiptId,\n      },\n      { headers: this.rootHeaders },\n    );\n  }\n\n  /**\n   * Refunds a transaction.\n   *\n   * NOTE: Only unsettled transactions can be refunded.\n   *\n   * @param receiptId Unique identifier for the transaction receipt.\n   *\n   * @example\n   * ```javascript\n   * iap.refundTransaction(receiptId);\n   * ```\n   */\n  public async refundTransaction(receiptId: string): Promise<void> {\n    await axios.post(\n      `${this.rootPath}${IapRoutes.REFUND_TRANSACTION}`,\n      {\n        receiptId,\n      },\n      { headers: this.rootHeaders },\n    );\n  }\n\n  /**\n   * Gets the properties of a specified product, which enables the app to leverage dynamic product information.\n   * For example, you can check the stock for a product with limited quantity (via the `numAvailable` property), and indicate the number of remaining items.\n   *\n   * @param     sku     Identifier for the product.\n   * @return            Properties of the specified product.\n   *\n   * @example\n   * ```javascript\n   * const product = await iap.loadProduct(sku);\n   * ```\n   */\n  public async loadProduct(sku: string): Promise<IapProduct> {\n    const { data: { product } } = await axios.get(\n      `${this.rootPath}${IapRoutes.GET_PRODUCT_BY_SKU}?sku=${sku}`,\n      { headers: this.rootHeaders },\n    );\n\n    return product;\n  }\n}\n\nexport interface IIAP extends IAP {}\n"],"file":"index.js"}