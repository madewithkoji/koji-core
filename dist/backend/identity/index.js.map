{"version":3,"sources":["../../../src/backend/identity/index.ts"],"names":["AuthRoutes","UserRole","Identity","config","rootPath","rootHeaders","projectId","projectToken","userId","notification","axios","post","PUSH_NOTIFICATION","destination","headers","data","token","all","GET_ROLE","GET_GRANT","role","grant","id","attributes","dateCreated","grants","pushNotificationsEnabled","Base","server"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { server } from '../@decorators/server';\nimport { Base, BackendConfigurationInput } from '../base';\nimport { UserToken } from '../../types';\n\n/**\n * API routes for auth methods.\n */\nexport enum AuthRoutes {\n  GET_GRANT = '/v1/apps/auth/consumer/getGrantForToken',\n  GET_ROLE = '/v1/apps/auth/consumer/getRoleForToken',\n  PUSH_NOTIFICATION = '/v1/apps/auth/consumer/pushNotification',\n}\n\n/**\n * Possible values for a user's role within a Koji.\n */\nexport enum UserRole {\n  ADMIN = 'admin',\n  UNKNOWN = 'unknown',\n  USER = 'user',\n}\n\n/**\n * Defines an interface for a user.\n */\nexport interface User {\n  id: string | null;\n  attributes: { [index: string]: any } | null;\n  dateCreated: string | null;\n  grants: {\n    pushNotificationsEnabled: boolean;\n  } | null;\n  role: UserRole | null;\n}\n\n/**\n * Defines a notification to send to a userâ€™s Koji account. Send notifications with [[pushNotificationToOwner]], for the user who created the Koji, or [[pushNotificationToUser]], for a user who interacts with the Koji and has granted the appropriate authorization.\n */\nexport interface PushNotification {\n  /** Headline for the message. For example, the name of the Koji that generated the notification. */\n  appName: string;\n  /**  Icon to display next to the message, either the URL of an image or an emoji character. */\n  icon: string;\n  /** Content of the message. */\n  message: string;\n  /** Query parameters to append to the Koji URL when the notification is tapped. For example, load the admin experience or a dynamic receipt from the notification. */\n  ref?: string;\n}\n\n/**\n * Implements an Identity class for backend authentication of your Koji.\n */\nexport class Identity extends Base {\n  private rootPath: string;\n  private rootHeaders: Object;\n\n  /**\n   * @param   config\n   *\n   * @example\n   * ```javascript\n   * const identity = new KojiBackend.Identity({ res });\n   * ```\n   */\n  public constructor(config: BackendConfigurationInput) {\n    super(config);\n\n    this.rootPath = 'https://rest.api.gokoji.com';\n\n    this.rootHeaders = {\n      'X-Koji-Project-Id': this.projectId,\n      'X-Koji-Project-Token': this.projectToken,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Sends a notification to a user\n   *\n   * @param     userId            User id.\n   * @param     notification      Notification to send to user.\n   * @return                      Data object.\n   *\n   * @example\n   * ```javascript\n   * identity.pushNotificationToUser(id, notification);\n   * ```\n   */\n  @server\n  public async pushNotificationToUser(userId: string, notification: PushNotification): Promise<void> {\n    const { data } = await axios.post(\n      `${this.rootPath}${AuthRoutes.PUSH_NOTIFICATION}`,\n      {\n        destination: userId,\n        notification,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data;\n  }\n\n  /**\n   * Sends a notification to the owner\n   *\n   * @param     notification      Notification to send to owner.\n   * @return                      Data object.\n   *\n   * @example\n   * ```javascript\n   * identity.pushNotificationToUser(id, notification);\n   * ```\n   */\n  @server\n  public async pushNotificationToOwner(notification: PushNotification): Promise<void> {\n    const { data } = await axios.post(\n      `${this.rootPath}${AuthRoutes.PUSH_NOTIFICATION}`,\n      {\n        destination: 'owner',\n        notification,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data;\n  }\n\n  /**\n   * Gets user by token\n   *\n   * @param     token      User token.\n   * @return               User.\n   *\n   * @example\n   * ```javascript\n   * const user = identity.resolveUserFromToken(token);\n   * ```\n   */\n  @server\n  public async resolveUserFromToken(token: UserToken): Promise<User> {\n    const data = await axios.all([\n      axios.post(\n        `${this.rootPath}${AuthRoutes.GET_ROLE}`,\n        {},\n        {\n          headers: {\n            ...this.rootHeaders,\n            'X-Koji-Auth-Callback-Token': token,\n          },\n        },\n      ),\n      axios.post(\n        `${this.rootPath}${AuthRoutes.GET_GRANT}`,\n        {},\n        {\n          headers: {\n            ...this.rootHeaders,\n            'X-Koji-Auth-Callback-Token': token,\n          },\n        },\n      ),\n    ]);\n\n    const [{ data: { role } }, { data: { grant } }] = data;\n\n    // If the user hasn't granted any permissions, the only thing\n    // we return is the role.\n    if (!grant) {\n      return {\n        id: null,\n        attributes: null,\n        dateCreated: null,\n        grants: null,\n        role,\n      };\n    }\n\n    // If the user has made a grant, we can look for specific attributes\n    // and properties from the grant declaration.\n    return {\n      id: grant.userId,\n      attributes: grant.attributes,\n      dateCreated: grant.dateCreated,\n      grants: {\n        pushNotificationsEnabled: grant.pushNotificationsEnabled,\n      },\n      role,\n    };\n  }\n}\n"],"file":"index.js"}