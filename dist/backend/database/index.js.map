{"version":3,"sources":["../../../src/backend/database/index.ts"],"names":["DatabaseRoutes","PredicateOperator","Database","config","rootPath","rootHeaders","projectId","projectToken","collection","documentName","axios","post","GET","headers","data","document","GET_COLLECTIONS","collections","queryKey","queryValue","SEARCH","predicateKey","predicateOperation","predicateValue","predicate","key","operation","value","documentNames","GET_ALL","results","predicateValues","GET_ALL_WHERE","documentBody","SET","UPDATE","ARRAY_PUSH","ARRAY_REMOVE","DELETE","Base","server"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACA;IACYA,c;AAaZ;AACA;AACA;;;;WAfYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,8BAAAA,c;;IAgBAC,iB;AAaZ;AACA;AACA;;;;WAfYA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;AAAAA,EAAAA,iB;GAAAA,iB,iCAAAA,iB;;IAgBCC,Q;;;;;AAIX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,oBAAmBC,MAAnB,EAAsD;AAAA;;AAAA;AACpD,8BAAMA,MAAN;AADoD;AAAA;AAGpD,UAAKC,QAAL,GAAgB,iCAAhB;AAEA,UAAKC,WAAL,GAAmB;AACjB,2BAAqB,MAAKC,SADT;AAEjB,8BAAwB,MAAKC,YAFZ;AAGjB,sBAAgB;AAHC,KAAnB;AALoD;AAUrD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;gHAEsBC,U,EAAoBC,Y;;;;;;;;uBACfC,kBAAMC,IAAN,WAClB,KAAKP,QADa,SACFJ,cAAc,CAACY,GADb,GAErB;AACEJ,kBAAAA,UAAU,EAAVA,UADF;AAEEC,kBAAAA,YAAY,EAAZA;AAFF,iBAFqB,EAMrB;AAAEI,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBANqB,C;;;;AAAfS,gBAAAA,I,qBAAAA,I;iDAQDA,IAAI,CAACC,Q;;;;;;;;;;;;;;;;AAGd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;uBAKcL,kBAAMC,IAAN,WAAc,KAAKP,QAAnB,SAA8BJ,cAAc,CAACgB,eAA7C,GAAgE,EAAhE,EAAoE;AAAEH,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBAApE,C;;;;2DADRS,I,CAAQG,W;AAAAA,gBAAAA,W,sCAAc,E;kDAGjBA,W;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;oHAEyBT,U,EAAoBU,Q,EAAkBC,U;;;;;;;;uBACpCT,kBAAMC,IAAN,WAClB,KAAKP,QADa,SACFJ,cAAc,CAACoB,MADb,GAErB;AACEZ,kBAAAA,UAAU,EAAVA,UADF;AAEEU,kBAAAA,QAAQ,EAARA,QAFF;AAGEC,kBAAAA,UAAU,EAAVA;AAHF,iBAFqB,EAOrB;AAAEN,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBAPqB,C;;;;AAAfS,gBAAAA,I,sBAAAA,I;kDAUDA,I;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;sHAGIN,U,EACAa,Y,EACAC,kB,EACAC,c;;;;;;;;uBAEuBb,kBAAMC,IAAN,WAClB,KAAKP,QADa,SACFJ,cAAc,CAACY,GADb,GAErB;AACEJ,kBAAAA,UAAU,EAAVA,UADF;AAEEgB,kBAAAA,SAAS,EAAE;AACTC,oBAAAA,GAAG,EAAEJ,YADI;AAETK,oBAAAA,SAAS,EAAEJ,kBAFF;AAGTK,oBAAAA,KAAK,EAAEJ;AAHE;AAFb,iBAFqB,EAUrB;AAAEV,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBAVqB,C;;;;AAAfS,gBAAAA,I,sBAAAA,I;kDAaDA,IAAI,CAACC,Q;;;;;;;;;;;;;;;;AAGd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;oHAEyBP,U,EAAoBoB,a;;;;;;;;uBAClBlB,kBAAMC,IAAN,WAClB,KAAKP,QADa,SACFJ,cAAc,CAAC6B,OADb,GAErB;AACErB,kBAAAA,UAAU,EAAVA,UADF;AAEEoB,kBAAAA,aAAa,EAAbA;AAFF,iBAFqB,EAMrB;AAAEf,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBANqB,C;;;;AAAfS,gBAAAA,I,sBAAAA,I;kDASDA,IAAI,CAACgB,O;;;;;;;;;;;;;;;;AAGd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;yHAGItB,U,EACAa,Y,EACAC,kB,EACAS,e;;;;;;;;uBAEuBrB,kBAAMC,IAAN,WAClB,KAAKP,QADa,SACFJ,cAAc,CAACgC,aADb,GAErB;AACExB,kBAAAA,UAAU,EAAVA,UADF;AAEEa,kBAAAA,YAAY,EAAZA,YAFF;AAGEC,kBAAAA,kBAAkB,EAAlBA,kBAHF;AAIES,kBAAAA,eAAe,EAAfA;AAJF,iBAFqB,EAQrB;AAAElB,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBARqB,C;;;;AAAfS,gBAAAA,I,sBAAAA,I;kDAWDA,IAAI,CAACgB,O;;;;;;;;;;;;;;;;AAGd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;iHAEmBtB,U,EAAoBC,Y,EAAsBwB,Y;;;;;;;;uBAClCvB,kBAAMC,IAAN,WAClB,KAAKP,QADa,SACFJ,cAAc,CAACkC,GADb,GAErB;AACE1B,kBAAAA,UAAU,EAAVA,UADF;AAEEyB,kBAAAA,YAAY,EAAZA,YAFF;AAGExB,kBAAAA,YAAY,EAAZA;AAHF,iBAFqB,EAOrB;AAAEI,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBAPqB,C;;;;AAAfS,gBAAAA,I,sBAAAA,I;kDAUDA,I;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;oHAEsBN,U,EAAoBC,Y,EAAsBwB,Y;;;;;;;;uBACrCvB,kBAAMC,IAAN,WAClB,KAAKP,QADa,SACFJ,cAAc,CAACmC,MADb,GAErB;AACE3B,kBAAAA,UAAU,EAAVA,UADF;AAEEyB,kBAAAA,YAAY,EAAZA,YAFF;AAGExB,kBAAAA,YAAY,EAAZA;AAHF,iBAFqB,EAOrB;AAAEI,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBAPqB,C;;;;AAAfS,gBAAAA,I,sBAAAA,I;kDAUDA,I;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;uHAEyBN,U,EAAoBC,Y,EAAsBwB,Y;;;;;;;;uBACxCvB,kBAAMC,IAAN,WAClB,KAAKP,QADa,SACFJ,cAAc,CAACoC,UADb,GAErB;AACE5B,kBAAAA,UAAU,EAAVA,UADF;AAEEyB,kBAAAA,YAAY,EAAZA,YAFF;AAGExB,kBAAAA,YAAY,EAAZA;AAHF,iBAFqB,EAOrB;AAAEI,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBAPqB,C;;;;AAAfS,gBAAAA,I,sBAAAA,I;kDAUDA,I;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;0HAE2BN,U,EAAoBC,Y,EAAsBwB,Y;;;;;;;;uBAC1CvB,kBAAMC,IAAN,WAClB,KAAKP,QADa,SACFJ,cAAc,CAACqC,YADb,GAErB;AACE7B,kBAAAA,UAAU,EAAVA,UADF;AAEEyB,kBAAAA,YAAY,EAAZA,YAFF;AAGExB,kBAAAA,YAAY,EAAZA;AAHF,iBAFqB,EAOrB;AAAEI,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBAPqB,C;;;;AAAfS,gBAAAA,I,uBAAAA,I;mDAUDA,I;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;sHAEsBN,U,EAAoBC,Y;;;;;;;;uBACfC,kBAAMC,IAAN,WAClB,KAAKP,QADa,SACFJ,cAAc,CAACsC,MADb,GAErB;AACE9B,kBAAAA,UAAU,EAAVA,UADF;AAEEC,kBAAAA,YAAY,EAAZA;AAFF,iBAFqB,EAMrB;AAAEI,kBAAAA,OAAO,EAAE,KAAKR;AAAhB,iBANqB,C;;;;AAAfS,gBAAAA,I,uBAAAA,I;mDASDA,I;;;;;;;;;;;;;;;;;;EAnVmByB,U,iFAsC3BC,c,gKAuBAA,c,mKAyBAA,c,6JA+BAA,c,6JAoCAA,c,gKA8BAA,c,6JAkCAA,c,wJA4BAA,c,8JA4BAA,c,mKA4BAA,c,gKA2BAA,c","sourcesContent":["import axios from 'axios';\nimport { server } from '../@decorators/server';\nimport { Base, BackendConfigurationInput } from '../base';\n\n/**\n * API routes for database methods.\n */\nexport enum DatabaseRoutes {\n  ARRAY_PUSH = '/v1/store/update/push',\n  ARRAY_REMOVE = '/v1/store/update/remove',\n  DELETE = '/v1/store/delete',\n  GET = '/v1/store/get',\n  GET_ALL = '/v1/store/getAll',\n  GET_ALL_WHERE = '/v1/store/getAllWhere',\n  GET_COLLECTIONS = '/v1/store/getCollections',\n  SEARCH = '/v1/store/search',\n  SET = '/v1/store/set',\n  UPDATE = '/v1/store/update',\n}\n\n/**\n * Available operator types for database comparisons.\n */\nexport enum PredicateOperator {\n  LESS_THAN = '<',\n  LESS_THAN_OR_EQUAL_TO = '<=',\n  EQUAL_TO = '==',\n  GREATER_THAN = '>',\n  GREATER_THAN_OR_EQUAL_TO = '>=',\n  NOT_EQUAL_TO = '!=',\n  ARRAY_CONTAINS = 'array-contains',\n  ARRAY_CONTAINS_ANY = 'array-contains-any',\n  IN = 'in',\n  NOT_IN = 'not-in',\n}\n\n/**\n * Implements a Koji database for the backend of your Koji. For more information, see [[https://developer.withkoji.com/docs/develop/koji-database | the Koji database developer guide]].\n */\nexport class Database extends Base {\n  private rootPath: string;\n  private rootHeaders: Object;\n\n  /**\n   * @param   config\n   *\n   * @example\n   * ```javascript\n   * const database = new KojiBackend.Database({ res });\n   * ```\n   */\n  public constructor(config: BackendConfigurationInput) {\n    super(config);\n\n    this.rootPath = 'https://database.api.gokoji.com';\n\n    this.rootHeaders = {\n      'X-Koji-Project-Id': this.projectId,\n      'X-Koji-Project-Token': this.projectToken,\n      'Content-Type': 'application/json',\n    };\n  }\n\n  /**\n   * Gets the specified database entry or collection of entries.\n   *\n   * @typeParam T              Data from a Koji database collection.\n   * @param     collection     Name of the collection.\n   * @param     documentName   Name of the entry.\n   * @return                   Data requested from the collection.\n   *\n   * @example\n   * ```javascript\n   * const myData = await database.get('myCollection');\n   * const myEntry = await database.get('myCollection','myDoc');\n   * ```\n   */\n  @server\n  public async get<T>(collection: string, documentName?: string | null): Promise<T> {\n    const { data } = await axios.post(\n      `${this.rootPath}${DatabaseRoutes.GET}`,\n      {\n        collection,\n        documentName,\n      },\n      { headers: this.rootHeaders },\n    );\n    return data.document;\n  }\n\n  /**\n   * Gets a list of all collections available in the database.\n   *\n   * @return  List containing the names of the collections.\n   *\n   * @example\n   * ```javascript\n   * const collections = await database.getCollections();\n   * ```\n   */\n  @server\n  public async getCollections(): Promise<string[]> {\n    const {\n      data: { collections = [] },\n    } = await axios.post(`${this.rootPath}${DatabaseRoutes.GET_COLLECTIONS}`, {}, { headers: this.rootHeaders });\n\n    return collections;\n  }\n\n  /**\n   * Searches a collection for records that match the specified search criteria.\n   * The search criteria are the search field and the search value.\n    *\n   *\n   * @typeParam T              Data from a Koji database collection.\n   * @param     collection     Name of the collection.\n   * @param     queryKey       Name of the search field.\n   * @param     queryValue     Search value.\n   * @return                   Data requested from the collection.\n   *\n   * @example\n   * ```javascript\n   * const myData = await database.search<'myClass'>('myCollection', 'myField', 'mySearchValue');\n   * ```\n   */\n  @server\n  public async search<T>(collection: string, queryKey: string, queryValue: string): Promise<T[]> {\n    const { data } = await axios.post(\n      `${this.rootPath}${DatabaseRoutes.SEARCH}`,\n      {\n        collection,\n        queryKey,\n        queryValue,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data;\n  }\n\n  /**\n   * Searches a collection for records that satisfy the specified predicate.\n   * The predicate is specified using predicateKey, predicateOperator, and predicateValue.\n   *\n   * @typeParam T                       Data from a Koji database collection.\n   * @param     collection              Name of the collection.\n   * @param     predicateKey            Name of a field in the collection.\n   * @param     predicateOperation      An operator such as '=', '<>', '>', etc.\n   * @param     predicateValue          Search value.\n   * @return                            Data requested from the collection.\n   *\n   * @example\n   * ```javascript\n   * const myData = await database.getWhere<'myClass'>('myCollection', 'myField', 'myOperator, 'mySearchValue');\n   * ```\n   */\n  @server\n  public async getWhere<T>(\n    collection: string,\n    predicateKey: string,\n    predicateOperation: PredicateOperator,\n    predicateValue: string,\n  ): Promise<T> {\n    const { data } = await axios.post(\n      `${this.rootPath}${DatabaseRoutes.GET}`,\n      {\n        collection,\n        predicate: {\n          key: predicateKey,\n          operation: predicateOperation,\n          value: predicateValue,\n        },\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data.document;\n  }\n\n  /**\n   * Searches a collection for the documents whose names are included in an array of document names.\n   *\n   * @typeParam T                   Data from a Koji database collection.\n   * @param     collection          Name of the collection.\n   * @param     documentNames       Array of one or more document names\n   * @return                        Data requested from the collection.\n   *\n   * @example\n   * ```javascript\n   * const myData = await database.getAll<'myClass'>('myCollection', ['doc1', 'doc2']);\n   * ```\n   */\n  @server\n  public async getAll<T>(collection: string, documentNames: string[]): Promise<T[]> {\n    const { data } = await axios.post(\n      `${this.rootPath}${DatabaseRoutes.GET_ALL}`,\n      {\n        collection,\n        documentNames,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data.results;\n  }\n\n  /**\n   * Searches a collection for records that satisfy the specified predicate.\n   * The predicate is specified using predicateKey, predicateOperator, and predicateValues.\n   *\n   * @typeParam T                       Data from a Koji database collection.\n   * @param     collection              Name of the collection.\n   * @param     predicateKey            Name of a field in the collection.\n   * @param     predicateOperation      An operator such as '=', '<>', '>', etc.\n   * @param     predicateValues         An array of one or more search values.\n   * @return                            Data requested from the collection.\n   *\n   * @example\n   * ```javascript\n   * const myData = await database.getAllWhere<'myClass'>('myCollection', 'myField', 'myOperator, ['mySearchValue1', mySearchValue2]);\n   * ```\n   */\n  @server\n  public async getAllWhere<T>(\n    collection: string,\n    predicateKey: string,\n    predicateOperation: PredicateOperator,\n    predicateValues: string[],\n  ): Promise<T[]> {\n    const { data } = await axios.post(\n      `${this.rootPath}${DatabaseRoutes.GET_ALL_WHERE}`,\n      {\n        collection,\n        predicateKey,\n        predicateOperation,\n        predicateValues,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data.results;\n  }\n\n  /**\n   * Inserts a new document into a collection.\n   *\n   * @param     collection          Name of the collection.\n   * @param     documentName        Document name.\n   * @param     documentBody        Document contents.\n   * @return                        New document.\n   *\n   * @example\n   * ```javascript\n   * const myData = await database.set('myCollection', 'myDocument', 'Some contents for the document');\n   * ```\n   */\n  @server\n  public async set(collection: string, documentName: string, documentBody: any): Promise<boolean> {\n    const { data } = await axios.post(\n      `${this.rootPath}${DatabaseRoutes.SET}`,\n      {\n        collection,\n        documentBody,\n        documentName,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data;\n  }\n\n  /**\n   * Replaces the contents of an existing document in a collection.\n   *\n   * @param     collection          Name of the collection.\n   * @param     documentName        Document name.\n   * @param     documentBody        New contents.\n   * @return                        Updated document.\n   *\n   * @example\n   * ```javascript\n   * const myData = await database.set('myCollection', 'myDocument', 'Some contents for the document');\n   * ```\n   */\n  @server\n  public async update(collection: string, documentName: string, documentBody: any): Promise<boolean | void> {\n    const { data } = await axios.post(\n      `${this.rootPath}${DatabaseRoutes.UPDATE}`,\n      {\n        collection,\n        documentBody,\n        documentName,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data;\n  }\n\n  /**\n   * Appends contents to an existing document in a collection.\n   *\n   * @param     collection          Name of the collection.\n   * @param     documentName        Document name.\n   * @param     documentBody        Appended contents.\n   * @return                        Updated document.\n   *\n   * @example\n   * ```javascript\n   * const myData = await database.arrayPush('myCollection', 'myDocument', 'Contents appended to end of document');\n   * ```\n   */\n  @server\n  public async arrayPush(collection: string, documentName: string, documentBody: any): Promise<boolean | void> {\n    const { data } = await axios.post(\n      `${this.rootPath}${DatabaseRoutes.ARRAY_PUSH}`,\n      {\n        collection,\n        documentBody,\n        documentName,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data;\n  }\n\n  /**\n   * Removes part of the contents from an existing document in a collection.\n   *\n   * @param     collection          Name of the collection.\n   * @param     documentName        Document name.\n   * @param     documentBody        Removed contents.\n   * @return                        Updated document.\n   *\n   * @example\n   * ```javascript\n   * const myData = await database.arrayPush('myCollection', 'myDocument', 'Contents to be removed from document');\n   * ```\n   */\n  @server\n  public async arrayRemove(collection: string, documentName: string, documentBody: any): Promise<boolean | void> {\n    const { data } = await axios.post(\n      `${this.rootPath}${DatabaseRoutes.ARRAY_REMOVE}`,\n      {\n        collection,\n        documentBody,\n        documentName,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data;\n  }\n\n  /**\n   * Deletes a document from a collection.\n   *\n   * @param     collection          Name of the collection.\n   * @param     documentName        Document name.\n   * @return                        Deleted document.\n   *\n   * @example\n   * ```javascript\n   * const myData = await database.delete('myCollection', 'myDocument');\n   * ```\n   */\n  @server\n  public async delete(collection: string, documentName: string): Promise<boolean | void> {\n    const { data } = await axios.post(\n      `${this.rootPath}${DatabaseRoutes.DELETE}`,\n      {\n        collection,\n        documentName,\n      },\n      { headers: this.rootHeaders },\n    );\n\n    return data;\n  }\n}\n\nexport interface IDatabase extends Database {}\n"],"file":"index.js"}