{"version":3,"sources":["../../../src/frontend/identity/index.ts"],"names":["Identity","sendMessageAndAwaitResponse","kojiEventName","data","grants","allowAnonymous","userToken","presumedRole","presumedAttributes","token","hasGrants","usageDescription","KojiBridge","client","identity"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAoCA;AACA;AACA;IACaA,Q;;;;;;;;;;;;;AACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;uBAOc,KAAKC,2BAAL,CAAiC;AACzCC,kBAAAA,aAAa,EAAE,sBAD0B;AAEzCC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,MAAM,EAAE,EADJ;AAEJC,oBAAAA,cAAc,EAAE;AAFZ;AAFmC,iBAAjC,EAMP,uBANO,C;;;;AAHRC,gBAAAA,S,yBAAAA,S;AACAC,gBAAAA,Y,yBAAAA,Y;AACAC,gBAAAA,kB,yBAAAA,kB;iDASK;AACLC,kBAAAA,KAAK,EAAEH,SADF;AAELC,kBAAAA,YAAY,EAAZA,YAFK;AAGLC,kBAAAA,kBAAkB,EAAlBA;AAHK,iB;;;;;;;;;;;;;;;;AAOT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AAC2BJ,gBAAAA,M,8DAAgC,E;;uBAC3B,KAAKH,2BAAL,CAAiC;AAC3DC,kBAAAA,aAAa,EAAE,wBAD4C;AAE3DC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,MAAM,EAANA;AADI;AAFqD,iBAAjC,EAKzB,yBALyB,C;;;;AAApBM,gBAAAA,S,0BAAAA,S;kDAODA,S;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAC6BN,gBAAAA,M,8DAAgC,E;AAAIO,gBAAAA,gB;;uBACjC,KAAKV,2BAAL,CAAiC;AAC3DC,kBAAAA,aAAa,EAAE,sBAD4C;AAE3DC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,MAAM,EAANA,MADI;AAEJO,oBAAAA,gBAAgB,EAAhBA;AAFI;AAFqD,iBAAjC,EAMzB,uBANyB,EAMA,uBANA,C;;;;AAApBL,gBAAAA,S,0BAAAA,S;kDAQDA,S;;;;;;;;;;;;;;;;;;EA5EmBM,sB,8EAW3BC,c;;AAqEI,IAAMC,QAAQ,GAAG,IAAId,QAAJ,EAAjB","sourcesContent":["import { KojiBridge } from '../kojiBridge';\nimport { client } from '../@decorators/client';\nimport { UserToken } from '../../types';\n\n/**\n * Capabilities that a user can grant the current Koji authorization to use.\n */\nexport type AuthGrantCapability =\n  /** Allows the current Koji to send push notifications to the user. */\n  'push_notifications' |\n  /** Creates a unique ID for the user on the current Koji app and allows the app to map the user’s token to a persistent user ID in storage, such as a backend database. */\n  'username';\n\n/**\n * User attributes that are determined via a client-side API call.\n */\nexport interface PresumedAttributes {\n  /** Koji username for the user. */\n  username?: string;\n  /** Koji avatar for the user. */\n  profilePicture?: string;\n}\n\n/**\n * Identity information for the current user of the Koji app.\n */\nexport interface IdentityResult {\n  /** Short-lived token to identify the user. */\n  token: UserToken;\n  /** Presumed role of the current user as the owner/creator (`admin`), not the owner (`user`), or not logged in (`unknown`).\n  * Admin actions must still be secured on the backend by resolving the user’s role.\n  */\n  presumedRole: 'admin'|'user'|'unknown';\n  /** Additional user attributes, which are returned if the user has granted username authorization via [[requestGrants]]. */\n  presumedAttributes: PresumedAttributes;\n}\n\n/**\n * Manages authentication and authorization on the frontend of your Koji app.\n */\nexport class Identity extends KojiBridge {\n  /**\n   * Gets a token identifying the current user.\n   *\n   * @return    Identity information for the current user of the Koji app.\n   *\n   * @example\n   * ```javascript\n   * const { token, presumedRole, presumedAttributes  } = await Koji.identity.getToken()\n   * ```\n   */\n  @client\n  public async getToken(): Promise<IdentityResult> {\n    const {\n      userToken,\n      presumedRole,\n      presumedAttributes,\n    } = await this.sendMessageAndAwaitResponse({\n      kojiEventName: '@@koji/auth/getToken',\n      data: {\n        grants: [],\n        allowAnonymous: true,\n      },\n    }, 'KojiAuth.TokenCreated');\n\n    return {\n      token: userToken,\n      presumedRole,\n      presumedAttributes,\n    };\n  }\n\n  /**\n   * Checks whether the user has granted authorizations to the Koji app. Use this method to determine whether to request authorization for certain capabilities.\n   *\n   * @param   grants        List of authorization grants to check for the user.\n   * @return                Indicates whether the user has already granted authorization for the capabilities.\n   *\n   * @example\n   * ```javascript\n   * const hasGrant = await Koji.identity.checkGrants(['username', 'push_notifications']);\n   * ```\n   */\n  public async checkGrants(grants: AuthGrantCapability[] = []): Promise<boolean> {\n    const { hasGrants } = await this.sendMessageAndAwaitResponse({\n      kojiEventName: '@@koji/auth/checkGrant',\n      data: {\n        grants,\n      },\n    }, 'KojiAuth.GrantsResolved');\n\n    return hasGrants;\n  }\n\n  /**\n   * Requests the specified authorization grants from the user for the Koji app.\n   *\n   * @param   grants            List of authorization grants to request from the user.\n   * @param   usageDescription  Custom message to display when requesting the grant.\n   *\n   * @return                    Indicates whether authorization for the capabilities was successfully obtained from the user.\n   *\n   * @example\n   * ```javascript\n   * const hasGrant = await Koji.identity.requestGrants(['username', 'push_notifications']);\n   * ```\n   */\n  public async requestGrants(grants: AuthGrantCapability[] = [], usageDescription?: string): Promise<UserToken> {\n    const { userToken } = await this.sendMessageAndAwaitResponse({\n      kojiEventName: '@@koji/auth/getToken',\n      data: {\n        grants,\n        usageDescription,\n      },\n    }, 'KojiAuth.TokenCreated', 'KojiAuth.GrantsDenied');\n\n    return userToken;\n  }\n}\n\nexport const identity = new Identity();\n"],"file":"index.js"}