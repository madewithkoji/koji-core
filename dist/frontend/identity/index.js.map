{"version":3,"sources":["../../../src/frontend/identity/index.ts"],"names":["Identity","sendMessageAndAwaitResponse","kojiEventName","data","grants","allowAnonymous","userToken","hasGrants","usageDescription","KojiBridge","client","identity"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAYA;AACA;AACA;IACaA,Q;;;;;;;;;;;;;AACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;uBAGgC,KAAKC,2BAAL,CAAiC;AAC3DC,kBAAAA,aAAa,EAAE,sBAD4C;AAE3DC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,MAAM,EAAE,EADJ;AAEJC,oBAAAA,cAAc,EAAE;AAFZ;AAFqD,iBAAjC,EAMzB,uBANyB,C;;;;AAApBC,gBAAAA,S,yBAAAA,S;iDAQDA,S;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AACoBF,gBAAAA,M,8DAAgC,E;;uBACpB,KAAKH,2BAAL,CAAiC;AAC3DC,kBAAAA,aAAa,EAAE,wBAD4C;AAE3DC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,MAAM,EAANA;AADI;AAFqD,iBAAjC,EAKzB,yBALyB,C;;;;AAApBG,gBAAAA,S,0BAAAA,S;kDAODA,S;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AACsBH,gBAAAA,M,8DAAgC,E;AAAII,gBAAAA,gB;;uBAC1B,KAAKP,2BAAL,CAAiC;AAC3DC,kBAAAA,aAAa,EAAE,sBAD4C;AAE3DC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,MAAM,EAANA,MADI;AAEJI,oBAAAA,gBAAgB,EAAhBA;AAFI;AAFqD,iBAAjC,EAMzB,uBANyB,EAMA,uBANA,C;;;;AAApBF,gBAAAA,S,0BAAAA,S;kDAQDA,S;;;;;;;;;;;;;;;;;;EAjEmBG,sB,8EAS3BC,c;;AA4DI,IAAMC,QAAQ,GAAG,IAAIX,QAAJ,EAAjB","sourcesContent":["import { KojiBridge } from '../kojiBridge';\nimport { client } from '../@decorators/client';\nimport { UserToken } from '../../types';\n\n/**\n * Capabilities that a user can grant the current Koji authorization to use.\n */\nexport type AuthGrantCapability =\n  /** Allows the current Koji to send push notifications to the user. */\n  'push_notifications' |\n  /** Creates a unique ID for the user on the current Koji, and allows the Koji to map the userâ€™s token to a persistent user ID in storage, such as a backend database. */\n  'username';\n\n/**\n * Manages authentication and authorization on the frontend of your Koji.\n */\nexport class Identity extends KojiBridge {\n  /**\n   * Gets a token identifying the current user.\n   *\n   * @example\n   * ```javascript\n   * const token = await Koji.identity.getToken();\n   * ```\n   */\n  @client\n  async getToken(): Promise<UserToken> {\n    const { userToken } = await this.sendMessageAndAwaitResponse({\n      kojiEventName: '@@koji/auth/getToken',\n      data: {\n        grants: [],\n        allowAnonymous: true,\n      },\n    }, 'KojiAuth.TokenCreated');\n\n    return userToken;\n  }\n\n  /**\n   * Checks whether the user has granted authorizations to the Koji. Use this method to determine whether to request authorization for certain capabilities.\n   *\n   * @param   grants        List of authorization grants to check for the user.\n   * @return                Indicates whether the user has already granted authorization for the capabilities.\n   *\n   * @example\n   * ```javascript\n   * const hasGrant = await Koji.identity.checkGrants(['username', 'push_notifications']);\n   * ```\n   */\n  async checkGrants(grants: AuthGrantCapability[] = []): Promise<boolean> {\n    const { hasGrants } = await this.sendMessageAndAwaitResponse({\n      kojiEventName: '@@koji/auth/checkGrant',\n      data: {\n        grants,\n      },\n    }, 'KojiAuth.GrantsResolved');\n\n    return hasGrants;\n  }\n\n  /**\n   * Requests the specified authorization grants from the user for the Koji.\n   *\n   * @param   grants           List of authorization grants to request from the user.\n   * @param   usageDescription Custom message to display when requesting the grant.\n   * @return\n   *\n   * @example\n   * ```javascript\n   * const hasGrant = await Koji.identity.requestGrants(['username', 'push_notifications']);\n   * ```\n   */\n  async requestGrants(grants: AuthGrantCapability[] = [], usageDescription?: string): Promise<UserToken> {\n    const { userToken } = await this.sendMessageAndAwaitResponse({\n      kojiEventName: '@@koji/auth/getToken',\n      data: {\n        grants,\n        usageDescription,\n      },\n    }, 'KojiAuth.TokenCreated', 'KojiAuth.GrantsDenied');\n\n    return userToken;\n  }\n}\n\nexport const identity = new Identity();\n"],"file":"index.js"}