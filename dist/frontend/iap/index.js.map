{"version":3,"sources":["../../../src/frontend/iap/index.ts"],"names":["IAP","sendMessageAndAwaitResponse","kojiEventName","data","userToken","sku","purchaseOptions","customAttributes","success","receiptId","iapToken","KojiBridge","client","iap"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAyBA;AACA;AACA;IACaA,G;;;;;;;;;;;;;AACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;uBAGgC,KAAKC,2BAAL,CAC1B;AACEC,kBAAAA,aAAa,EAAE,qBADjB;AAEEC,kBAAAA,IAAI,EAAE;AAFR,iBAD0B,EAK1B,sBAL0B,C;;;;AAApBC,gBAAAA,S,yBAAAA,S;iDAQDA,S;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;2HAGIC,G;;;;;;;;;;;;;AACAC,gBAAAA,e,8DAAmC,E;AACnCC,gBAAAA,gB,8DAA2C,E;;uBAEK,KAAKN,2BAAL,CAC9C;AACEC,kBAAAA,aAAa,EAAE,2BADjB;AAEEC,kBAAAA,IAAI,EAAE;AACJE,oBAAAA,GAAG,EAAHA,GADI;AAEJC,oBAAAA,eAAe,EAAfA,eAFI;AAGJC,oBAAAA,gBAAgB,EAAhBA;AAHI;AAFR,iBAD8C,EAS9C,0BAT8C,C;;;;AAAxCC,gBAAAA,O,0BAAAA,O;AAASJ,gBAAAA,S,0BAAAA,S;AAAWK,gBAAAA,S,0BAAAA,S;kDAYrB;AACLD,kBAAAA,OAAO,EAAPA,OADK;AAELE,kBAAAA,QAAQ,EAAEN,SAFL;AAGLK,kBAAAA,SAAS,EAATA;AAHK,iB;;;;;;;;;;;;;;;;;;EAhEcE,sB,8EAWtBC,c,oKAmCAA,c;;AA0BI,IAAMC,GAAG,GAAG,IAAIb,GAAJ,EAAZ","sourcesContent":["import { KojiBridge } from '../kojiBridge';\nimport { client } from '../@decorators/client';\nimport { IAPToken } from '../../types';\n\n/**\n * Optional information to add to a {@doclink core-backend-iap#IapReceipt | transaction receipt} for a given in-app purchase.\n */\nexport interface PurchaseOptions {\n  /** Amount of the purchase, in cents. */\n  amount?: number;\n  /** Custom message associated with the purchase. This value is stored as a custom attribute on the transaction receipt. */\n  customMessage?: string;\n}\n\n/**\n * Results of an in-app purchase transaction.\n */\nexport interface Purchase {\n  /** Indicates whether the purchase was successful. */\n  success: boolean;\n  /** Short-lived IAP token for the current user. See [[getToken]]. */\n  iapToken: IAPToken;\n  /** Unique identifier for the receipt, if the purchase was successful, or `undefined`, if not. */\n  receiptId?: string;\n}\n\n/**\n * Manages in-app purchase transactions on the frontend of your Koji app.\n */\nexport class IAP extends KojiBridge {\n  /**\n   * Generates an IAP token for the current user that can be used to resolve receipts on the backend.\n   *\n   * @return    Short-lived IAP token for the current user.\n   *\n   * @example\n   * ``` javascript\n   * const iapToken = await Koji.iap.getToken();\n   * ```\n   */\n  @client\n  public async getToken(): Promise<IAPToken> {\n    const { userToken } = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: '@@koji/iap/getToken',\n        data: {},\n      },\n      'KojiIap.TokenCreated',\n    );\n\n    return userToken;\n  }\n\n  /**\n   * Prompts the user to purchase a product from the Koji app. Products are defined in the entitlements file and registered or updated when the project is deployed.\n   *\n   * NOTE: If your IAP product is defined with the `captureOnPurchase` key set to `false`, the transaction is held in a pending state until you manually invoke {@doclink core-backend-iap#captureTransaction | Iap.captureTransaction} on the backend of your Koji app.\n   * Funds are not available in the seller's account until the transaction is captured.\n   * If you do not capture the transaction before the `captureExpiryPeriod`, the transaction is automatically reversed and the buyer is refunded.\n   * This period can be specified in the product definition from 0 to 7 days (default is 0).\n   *\n   * @param  sku               Identifier for the product to purchase.\n   * @param  purchaseOptions   Optional information to add to the transaction receipt.\n   * @param  customAttributes  Optional key-value pairs to add to the receipt. These attribute values can be referenced or updated by resolving receipts on the backend of the Koji app.\n   *\n   * @return                   Results of the in-app purchase transaction.\n   *\n   * @example\n   * ``` javascript\n   * const purchase = await Koji.iap.startPurchase(sku);\n   *\n   * // with optional parameters\n   * const purchase = await Koji.iap.startPurchase(sku, { customMessage: 'Your credit is now available' }, { isConsumed: false });\n   * ```\n   */\n  @client\n  public async startPurchase(\n    sku: string,\n    purchaseOptions: PurchaseOptions = {},\n    customAttributes: {[index: string]: any} = {},\n  ): Promise<Purchase> {\n    const { success, userToken, receiptId } = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: '@@koji/iap/promptPurchase',\n        data: {\n          sku,\n          purchaseOptions,\n          customAttributes,\n        },\n      },\n      'KojiIap.PurchaseFinished',\n    );\n\n    return {\n      success,\n      iapToken: userToken,\n      receiptId,\n    };\n  }\n}\n\nexport const iap = new IAP();\n"],"file":"index.js"}