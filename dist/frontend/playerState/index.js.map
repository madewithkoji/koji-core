{"version":3,"sources":["../../../src/frontend/playerState/index.ts"],"names":["PlayerState","window","params","qs","parse","location","search","ignoreQueryPrefix","href","includes","context","receiptType","presentationStyle","hasFocus","KOJI_FEED_KEY","isChromeVisible","callback","execCallbackOnMessage","sendMessage","kojiEventName","data","isRemixing","editorAttributes","KojiBridge","client","playerState"],"mappings":"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","sourcesContent":["import qs from 'qs';\nimport { KojiBridge } from '../kojiBridge';\nimport { client } from '../@decorators/client';\n\n/**\n * Context in which the Koji app is being viewed. A Koji app can provide a distinct experience for each context.\n */\nexport type PlayerStateContext = 'remix' | 'receipt' | 'screenshot' | 'default';\n\n/**\n * View of the receipt for a transaction, either `buyer` or `seller`.\n */\nexport type PlayerStateReceiptType = 'buyer' | 'seller';\n\n/**\n * Presentation style of the Koji app, either in a modal window (`popover`) or the standard player (`fullscreen`).\n * The player chrome (including the user's profile icon) is hidden by default when the app's `presentationStyle` is `popover`.\n */\nexport type PlayerPresentationStyle = 'fullscreen' | 'popover';\n\n/**\n * URL query parameters that describe the current state of the Koji player.\n */\nexport interface ExpectedQueryParameters {\n  context?: PlayerStateContext;\n  'dynamic-receipt'?: PlayerStateReceiptType;\n  presentationStyle?: PlayerPresentationStyle;\n}\n\n/**\n * Type of editor the creator is using, either `instant` for the Koji player or `full` for the Koji code editor.\n */\nexport type EditorType = 'instant' | 'full';\n/**\n * Distinguishes between creating a `new` customized version of the app and doing an `edit` of the user’s existing Koji app.\n */\nexport type EditorMode = 'edit' | 'new';\n\n/**\n * Describes the editor that the creator is using.\n */\nexport interface EditorAttributes {\n  /** Type of editor the creator is using, either `instant` for the Koji player or `full` for the Koji code editor. */\n  type?: EditorType;\n  /** Distinguishes between creating a `new` customized version of the app and doing an `edit` of the user’s existing Koji app. */\n  mode?: EditorMode;\n}\n\n/**\n * Who is viewing the receipt for a transaction, either `buyer` or `seller`.\n */\nexport type ReceiptType = 'seller' | 'buyer';\n\nexport type IsRemixingCallback =\n  /**\n   * Function to handle changes in the customization mode. Invoked by the [[subscribe]] listener.\n   *\n   * @param isRemixing Indicates whether the app is in customization mode.\n   * @param editorAttributes\n   */\n  (isRemixing: boolean, editorAttributes: EditorAttributes) => void;\n\nexport type BlurCallback =\n/** Function to handle when the Koji app loses focus. Invoked by the [[onBlur]] listener. */\n() => void;\n\nexport type FocusCallback =\n/** Function to handle when the Koji app gets focus. Invoked by the [[onFocus]] listener. */\n() => void;\n\n/**\n * Manages the state of the Koji player to enable distinct experiences for different users and views.\n */\nexport class PlayerState extends KojiBridge {\n  /** Context of the Koji app. */\n  public context: PlayerStateContext = 'default';\n  /** Type of receipt. */\n  public receiptType?: ReceiptType;\n  /** Focus state of the Koji app. */\n  public hasFocus: boolean = false;\n  /** Presentation style of the Koji app. */\n  public presentationStyle: PlayerPresentationStyle = 'fullscreen';\n  /** Whether the player chrome (Koji platform buttons and navigation) is visible. */\n  public isChromeVisible: boolean = false;\n\n  public constructor() {\n    super();\n\n    // ToDo: Make this better, as it's just a way to get around the isomorphism\n    // of this package\n    if ((typeof window as any) === 'undefined') return;\n\n    // Pull off any query parameters\n    const params: ExpectedQueryParameters = qs.parse(window.location.search, { ignoreQueryPrefix: true });\n\n    // First, look for the screenshot context\n    if (window.location.href.includes('koji-screenshot')) {\n      this.context = 'screenshot';\n    } else {\n      // Otherwise, pull the context from the query parameters\n      const {\n        context = 'default',\n        'dynamic-receipt': receiptType,\n        presentationStyle = 'fullscreen',\n      } = params;\n\n      this.context = context;\n      this.receiptType = receiptType;\n      this.presentationStyle = presentationStyle;\n    }\n\n    // Set the initial value based on the feed hash\n    this.hasFocus = !window.KOJI_FEED_KEY;\n\n    if (this.presentationStyle === 'fullscreen') {\n      this.isChromeVisible = true;\n    }\n  }\n\n  /**\n   * Listens for event notifications that the Koji app got the focus and then invokes a callback function to respond to the focus state change.\n   *\n   * @param   callback  Function to handle when the Koji app gets the focus.\n   *\n   * @return            Function to unsubscribe from the onFocus listener.\n   *\n   * @example\n   * ```javascript\n   * const unsubscribeFocus = Koji.playerState.onFocus((focus) => {\n   *  // Change Koji experience\n   * });\n   * ```\n   */\n  @client\n  public onFocus(callback: FocusCallback): Function {\n    this.hasFocus = true;\n\n    return this.execCallbackOnMessage(() => {\n      callback();\n    }, 'KojiFeed.Play');\n  }\n\n  /**\n   * Listens for event notifications that the Koji app lost the focus and then invokes a callback function to respond to the focus state change.\n   *\n   * @param   callback Function to handle when the Koji app loses the focus.\n   *\n   * @return            Function to unsubscribe from the onBlur listener.\n   *\n   * @example\n   * ```javascript\n   * const unsubscribeBlur = Koji.playerState.onBlur((blur) => {\n   *  // Change Koji experience\n   * });\n   * ```\n   */\n  @client\n  public onBlur(callback: BlurCallback): Function {\n    this.hasFocus = false;\n\n    return this.execCallbackOnMessage(() => {\n      callback();\n    }, 'KojiFeed.Pause');\n  }\n\n  /**\n   * Hides any Koji player chrome, such as the user's profile icon.\n   * To display the player chrome, use [[showChrome]].\n   *\n   * NOTE: Incorrectly controlling the player chrome can result in a disorienting user experience, so use this functionality judiciously.\n   * The player chrome must be displayed on all root screens of an app. It can be hidden if a user navigates to a child screen, such as a modal.\n   * The player chrome is hidden by default when the app's `presentationStyle` is `popover`.\n   *\n   * @example\n   * ```javascript\n   * Koji.playerState.hideChrome();\n   * ```\n   */\n  @client\n  public hideChrome() {\n    this.sendMessage({\n      kojiEventName: 'Koji.Player.HideChrome',\n      data: {},\n    });\n    this.isChromeVisible = false;\n  }\n\n  /**\n   * Restores the Koji platform chrome, if it has been hidden with [[hideChrome]].\n   *\n   * @example\n   * ```javascript\n   * Koji.playerState.showChrome();\n   * ```\n   */\n  public showChrome() {\n    this.sendMessage({\n      kojiEventName: 'Koji.Player.ShowChrome',\n      data: {},\n    });\n    this.isChromeVisible = true;\n  }\n\n  /**\n   * Listens to changes in customization mode and invokes a callback function to enable different experiences during customization, preview, or use.\n   *\n   * @param   callback Function to handle changes in customization mode.\n   *\n   * @return           Function to unsubscribe from the customization mode listener.\n   *\n   * @example\n   * ```javascript\n   * const unsubscribe = Koji.playerState.subscribe((remixing, { type, mode }) => {\n   *  // Change Koji experience\n   * });\n   * ```\n   */\n  @client\n  public subscribe(callback: IsRemixingCallback): Function {\n    return this.execCallbackOnMessage(({ isRemixing, editorAttributes }: { isRemixing: boolean; editorAttributes: EditorAttributes }) => {\n      callback(isRemixing, editorAttributes);\n    }, 'KojiPreview.IsRemixing');\n  }\n}\n\nexport const playerState = new PlayerState();\n"],"file":"index.js"}