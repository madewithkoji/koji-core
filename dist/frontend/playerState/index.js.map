{"version":3,"sources":["../../../src/frontend/playerState/index.ts"],"names":["PlayerState","window","params","qs","parse","location","search","ignoreQueryPrefix","href","includes","context","receiptType","callback","execCallbackOnMessage","isRemixing","editorAttributes","KojiBridge","client","playerState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAuDA;AACA;AACA;IACaA,W;;;;;AAIX,yBAAc;AAAA;;AAAA;AACZ,8BADY,CAGZ;AACA;;AAJY,gGAHgB,SAGhB;AAAA;AAKZ,QAAI,OAAOC,MAAP,KAAyB,WAA7B,EAA0C;;AAE1C,QAAMC,MAA+B,GAAGC,eAAGC,KAAH,CAASH,MAAM,CAACI,QAAP,CAAgBC,MAAzB,EAAiC;AAAEC,MAAAA,iBAAiB,EAAE;AAArB,KAAjC,CAAxC;;AAEA,QAAIN,MAAM,CAACI,QAAP,CAAgBG,IAAhB,CAAqBC,QAArB,CAA8B,iBAA9B,CAAJ,EAAsD;AACpD,YAAKC,OAAL,GAAe,YAAf;AACD,KAFD,MAEO;AAAA,4BAC2DR,MAD3D,CACGQ,OADH;AAAA,UACGA,OADH,gCACa,SADb;AAAA,UAC2CC,WAD3C,GAC2DT,MAD3D,CACwB,iBADxB;AAGL,YAAKQ,OAAL,GAAeA,OAAf;AACA,YAAKC,WAAL,GAAmBA,WAAnB;AACD;;AAhBW;AAiBb;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;8BAEYC,Q,EAAwC;AAChD,aAAO,KAAKC,qBAAL,CACL,gBAAmG;AAAA,YAAhGC,UAAgG,QAAhGA,UAAgG;AAAA,YAApFC,gBAAoF,QAApFA,gBAAoF;AACjGH,QAAAA,QAAQ,CAACE,UAAD,EAAaC,gBAAb,CAAR;AACD,OAHI,EAIL,wBAJK,CAAP;AAMD;;;4BAGOH,Q,EAAmC;AACzC,aAAO,KAAKC,qBAAL,CACL,YAAM;AACJD,QAAAA,QAAQ;AACT,OAHI,EAIL,eAJK,CAAP;AAMD;;;2BAGMA,Q,EAAkC;AACvC,aAAO,KAAKC,qBAAL,CACL,YAAM;AACJD,QAAAA,QAAQ;AACT,OAHI,EAIL,gBAJK,CAAP;AAMD;;;EA/D8BI,sB,uFAmC9BC,c,+JAUAA,c,4JAUAA,c;;AAWI,IAAMC,WAAW,GAAG,IAAIlB,WAAJ,EAApB","sourcesContent":["import qs from 'qs';\nimport { KojiBridge } from '../kojiBridge';\nimport { client } from '../@decorators/client';\n\n/**\n * Context in which the Koji is being viewed. A Koji can provide a distinct experience for each context.\n */\nexport type PlayerStateContext = 'about' | 'admin' | 'remix' | 'sticker' | 'receipt' | 'screenshot' | 'default';\n\n/**\n * Who is viewing the receipt for a transaction, either `buyer` or `seller`.\n */\nexport type PlayerStateReceiptType = 'buyer' | 'seller';\n\n/**\n *\n */\nexport interface ExpectedQueryParameters {\n  context?: PlayerStateContext;\n  'dynamic-receipt'?: PlayerStateReceiptType;\n}\n\n/**\n * Type of editor, either `instant` for an instant remix or `full` for the code editor.\n */\nexport type EditorType = 'instant' | 'full';\n/**\n * Distinguishes between a `new` remix and an `edit` to the userâ€™s existing Koji.\n */\nexport type EditorMode = 'edit' | 'new';\n\n/**\n * Describes the remixer's editor.\n */\nexport interface EditorAttributes {\n  /** [[EditorType]] */\n  type?: EditorType;\n  mode?: EditorMode;\n}\n\n/**\n * Who is viewing the receipt for a transaction, either `buyer` or `seller`.\n */\nexport type ReceiptType = 'seller' | 'buyer';\n\nexport type IsRemixingCallback =\n/**\n  * Function to handle changes in remix state. Receives the `isRemixing` and `editorAttributes` properties as inputs.\n  *\n  * @param isRemixing Indicates whether the Koji is in remixing mode.\n  * @param editorAttributes\n  */\n(isRemixing: boolean, editorAttributes: EditorAttributes) => void;\n\nexport type FocusCallback = () => void;\nexport type BlurCallback = () => void;\n\n/**\n * Manages the context of the Koji to enable distinct experiences for different users and views.\n */\nexport class PlayerState extends KojiBridge {\n  context: PlayerStateContext = 'default';\n  receiptType?: ReceiptType;\n\n  constructor() {\n    super();\n\n    // ToDo: Make this better, as it's just a way to get around the isomorphism\n    // of this package\n    if (typeof window as any === 'undefined') return;\n\n    const params: ExpectedQueryParameters = qs.parse(window.location.search, { ignoreQueryPrefix: true });\n\n    if (window.location.href.includes('koji-screenshot')) {\n      this.context = 'screenshot';\n    } else {\n      const { context = 'default', 'dynamic-receipt': receiptType } = params;\n\n      this.context = context;\n      this.receiptType = receiptType;\n    }\n  }\n\n  /**\n   * Listens to changes in remix state and invokes a callback function to enable different experiences during remix, preview, or use.\n   *\n   * @param   callback\n   * @return           Function to unsubscribe from remix state listener.\n   * @example\n   * ```javascript\n   * const unsubscribe = Koji.playerState.subscribe((remixing, { type, mode }) => {\n   *  // Change Koji experience\n   * });\n   * ```\n   */\n  @client\n  subscribe(callback: IsRemixingCallback): Function {\n    return this.execCallbackOnMessage(\n      ({ isRemixing, editorAttributes }: { isRemixing: boolean; editorAttributes: EditorAttributes }) => {\n        callback(isRemixing, editorAttributes);\n      },\n      'KojiPreview.IsRemixing',\n    );\n  }\n\n  @client\n  onFocus(callback: FocusCallback): Function {\n    return this.execCallbackOnMessage(\n      () => {\n        callback();\n      },\n      'KojiFeed.Play',\n    );\n  }\n\n  @client\n  onBlur(callback: BlurCallback): Function {\n    return this.execCallbackOnMessage(\n      () => {\n        callback();\n      },\n      'KojiFeed.Pause',\n    );\n  }\n}\n\nexport const playerState = new PlayerState();\n"],"file":"index.js"}