{"version":3,"sources":["../../../../src/frontend/web3/providers/ethereum.ts"],"names":["EthereumProvider","sendMessageAndAwaitResponse","kojiEventName","data","isConnected","args","result","error","Error","message","event","callback","scopedEventName","registerMessageListener","eventData","KojiBridge","client","ethereumProvider"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAqBA;AACA;AACA;IACaA,gB;;;;;;;;;;;;;AACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;uBAKc,KAAKC,2BAAL,CAAiC;AACzCC,kBAAAA,aAAa,EAAE,kCAD0B;AAEzCC,kBAAAA,IAAI,EAAE;AAFmC,iBAAjC,EAGP,+BAHO,C;;;;AADRC,gBAAAA,W,yBAAAA,W;iDAMKA,W;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;qHACuBC,I;;;;;;;;uBACa,KAAKJ,2BAAL,CAAiC;AAC/DC,kBAAAA,aAAa,EAAE,8BADgD;AAE/DC,kBAAAA,IAAI,EAAE;AACJE,oBAAAA,IAAI,EAAJA;AADI;AAFyD,iBAAjC,EAK7B,mCAL6B,C;;;;AAAxBC,gBAAAA,M,0BAAAA,M;AAAQC,gBAAAA,K,0BAAAA,K;;qBAOZA,K;;;;;sBACI,IAAIC,KAAJ,CAAUD,KAAK,CAACE,OAAhB,C;;;kDAGDH,M;;;;;;;;;;;;;;;;AAGT;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;uBAEII,K,EACAC,Q,EACM;AACN,UAAMC,eAAe,sCAA+BF,KAA/B,CAArB;AACA,WAAKG,uBAAL,CAA6BD,eAA7B,EAA8C,gBAAmB;AAAA,YAAhBE,SAAgB,QAAhBA,SAAgB;AAC/DH,QAAAA,QAAQ,CAACG,SAAD,CAAR;AACD,OAFD;AAGD;;;EAvEmCC,sB,iFAWnCC,c;;AA+DI,IAAMC,gBAAgB,GAAG,IAAIjB,gBAAJ,EAAzB","sourcesContent":["import { KojiBridge } from '../../kojiBridge';\nimport { client } from '../../@decorators/client';\n\n/**\n * A web3 request to proxy\n */\nexport interface Web3Request {\n  method: string;\n  params?: any[];\n}\n\n/**\n * Result of a proxied web3 request\n */\nexport interface Web3RequestResult {\n  result: unknown;\n  error?: {\n    code: number;\n    message: string;\n  };\n}\n\n/**\n * Manages authentication and authorization on the frontend of your Koji app.\n */\nexport class EthereumProvider extends KojiBridge {\n  /**\n   * Gets whether or not the session is connect\n   *\n   * @return    Is connected\n   *\n   * @example\n   * ```javascript\n   * const isConnected = await Koji.web3.providers.ethereum.isConnected();\n   * ```\n   */\n  @client\n  public async isConnected(): Promise<boolean> {\n    const {\n      isConnected,\n    } = await this.sendMessageAndAwaitResponse({\n      kojiEventName: '@@koji/web3/ethereum/isConnected',\n      data: {},\n    }, 'KojiWeb3.Ethereum.IsConnected');\n\n    return isConnected;\n  }\n\n  /**\n   * Proxies a request to an Ethereum wallet provider.\n   *\n   * @param   request       The request to proxy\n   * @return                Request result\n   *\n   * @example\n   * ```javascript\n   * const accounts = await Koji.web3.providers.ethereum.request({ method: 'eth_requestAccounts' });\n   * ```\n   */\n  public async request(args: Web3Request): Promise<Web3RequestResult> {\n    const { result, error } = await this.sendMessageAndAwaitResponse({\n      kojiEventName: '@@koji/web3/ethereum/request',\n      data: {\n        args,\n      },\n    }, 'KojiWeb3.Ethereum.RequestFinished');\n\n    if (error) {\n      throw new Error(error.message);\n    }\n\n    return result;\n  }\n\n  /**\n   * Register an event listener for wallet events\n   *\n   * @param   event             The name of the event for which to listen.\n   * @param   callback          Called when the event is received\n   *\n   *\n   * @example\n   * ```javascript\n   * Koji.web3.providers.ethereum.on('accountsChanged', ({ accounts }) => {\n   *   console.log(accounts);\n   * })\n   * ```\n   */\n  public on(\n    event: 'accountsChanged'|'chainChanged'|'connect'|'disconnect'|'message',\n    callback: (message: any) => void,\n  ): void {\n    const scopedEventName = `KojiWeb3.Ethereum.Events.${event}`;\n    this.registerMessageListener(scopedEventName, ({ eventData }) => {\n      callback(eventData);\n    });\n  }\n}\n\nexport const ethereumProvider = new EthereumProvider();\n"],"file":"ethereum.js"}