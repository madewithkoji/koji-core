{"version":3,"sources":["../../../../src/frontend/ui/upload/index.ts"],"names":["Upload","options","sendMessageAndAwaitResponse","kojiEventName","data","file","type","videoOptions","result","KojiBridge","client","upload"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AA2BA;AACA;AACA;IACaA,M;;;;;;;;;;;;;AACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;uHAE0BC,O;;;;;;;uBACH,KAAKC,2BAAL,CACjB;AACEC,kBAAAA,aAAa,EAAE,aADjB;AAEEC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,IAAI,EAAEJ,OAAO,CAACI,IADV;AAEJC,oBAAAA,IAAI,EAAEL,OAAO,CAACK,IAFV;AAGJC,oBAAAA,YAAY,EAAEN,OAAO,CAACM;AAHlB;AAFR,iBADiB,EASjB,qBATiB,C;;;AAAbH,gBAAAA,I;iDAYCA,IAAI,CAACI,M;;;;;;;;;;;;;;;;;;EAxCYC,sB,gFA0BzBC,c;;AAkBI,IAAMC,MAAM,GAAG,IAAIX,MAAJ,EAAf","sourcesContent":["import { KojiBridge } from '../../kojiBridge';\nimport { client } from '../../@decorators/client';\nimport { RemuxPreset, Watermark } from '../../../types';\n\n/** Options for uploaded videos. */\nexport interface VideoOptions {\n  /** Enables HTTP Live Streaming (HLS) for delivery of longer content. When enabled, uploaded videos are transcoded for HLS and saved as an m3u8 playlist. Use this feature in conjunction with [[https://github.com/video-dev/hls.js/ | hls.js]] for controlling playback. */\n  hls?: boolean;\n  /** Remuxes video files constructed from getUserMedia MediaStreams, which ensures these files contain correct duration headers before they are delivered. */\n  remux?: boolean;\n  /** Specifies the cropping constraints when remuxing a video. If not specified, the video will not be cropped. */\n  remuxPreset?: RemuxPreset;\n  /** Applies a watermark to the uploaded image. Available only with HLS transcoding. */\n  watermark?: Watermark;\n}\n\n/**\n * Request options for a [[uploadFile | file upload]].\n */\nexport interface UploadOptions {\n  /** File to upload. */\n  file: File;\n  /** Media type of the file, which is used to determine whether transcoding or other processing is required. */\n  type: 'image'|'video'|'audio';\n  /** Options for uploaded videos. */\n  videoOptions?: VideoOptions;\n}\n\n/**\n * Uploads files from the frontend of your Koji app directly to your project's CDN.\n */\nexport class Upload extends KojiBridge {\n  /**\n   * Uploads a file to your projectâ€™s CDN.\n   * Use this method to provide a custom upload experience or to upload media created or captured during the app experience.\n   * For example, recording a video or drawing on a canvas.\n   *\n   * To upload files with the standard platform control, use {@doclink core-frontend-ui-capture#file | Capture.file }.\n   *\n   * NOTE: To use this method for uploading a file collected by a file input, you must extract the blob and reconstruct the file.\n   * Browser sandboxing will not allow the native file to be transferred.\n   *\n   * @param   options     Request options for the file upload.\n   *\n   * @return              Unique URL for accessing the file on `images.koji-cdn.com` or `objects.koji-cdn.com`, depending on the type of file.\n   *\n   * @example\n   * ```javascript\n   * const url = await Koji.ui.upload.uploadFile({\n   *  file: new File([blob], 'video.webm'),\n   *  type: 'video',\n   *  videoOptions: {\n   *    hls: true,\n   *  }\n   * });\n   * ```\n   */\n  @client\n  public async uploadFile(options: UploadOptions): Promise<string|null> {\n    const data = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Upload',\n        data: {\n          file: options.file,\n          type: options.type,\n          videoOptions: options.videoOptions,\n        },\n      },\n      'Koji.UploadComplete',\n    );\n\n    return data.result;\n  }\n}\n\nexport const upload = new Upload();\n"],"file":"index.js"}