{"version":3,"sources":["../../../../src/frontend/ui/capture/index.ts"],"names":["CaptureStatus","CaptureType","Capture","data","status","SUCCEEDED","captureStatus","captureType","type","result","resultMetadata","url","options","initialValue","transformedOptions","value","verbose","transformInitialValueOptions","sendMessageAndAwaitResponse","kojiEventName","pickVerboseResultFromMessage","pickResultFromMessage","name","typeOptions","Error","returnType","KojiBridge","client","capture"],"mappings":"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","sourcesContent":["import { KojiBridge } from '../../kojiBridge';\nimport { client } from '../../@decorators/client';\nimport { FastlyOptions } from '../../../types';\n\nexport type CaptureResult = string | number | null | VerboseCapture;\n/**\n * Extended result of a user input capture.\n */\nexport interface VerboseCapture {\n  /** Whether the user completed the selection (`succeeded`) or exited the control without selecting a value (`cancelled`). */\n  captureStatus: CaptureStatus;\n  /** Capture method type (for example, `color` or `file`). */\n  captureType: CaptureType;\n  /** Value captured from the user. */\n  result?: CaptureResult;\n  /** Metadata associated with the captured result */\n  resultMetadata?: ExtendedMediaResult | ExtendedLinkResult | null;\n}\n\nexport interface CaptureMessage<T> {\n  _idempotencyKey: string;\n  event: string;\n  result: T;\n  status: CaptureStatus;\n  type: CaptureType;\n}\n\n/** Whether the user completed the selection (`succeeded`) or exited the control without selecting a value (`cancelled`). */\nexport enum CaptureStatus {\n  SUCCEEDED = 'succeeded',\n  CANCELLED = 'cancelled',\n}\n\n/** Capture method types. */\nexport enum CaptureType {\n  COLOR = 'color',\n  FILE = 'file',\n  IMAGE = 'image',\n  LINK = 'link',\n  MEDIA = 'media',\n  RANGE = 'range',\n  SELECT = 'select',\n  SOUND = 'sound',\n  VIDEO = 'video',\n}\n\n/**\n * Metadata when the capture option for a media capture request's return type \n * is set to `extended`.\n */\nexport interface ExtendedMediaResult {\n  /** URL of the selected media file. */\n  url?: string;\n  /** Type of media: `image`, `video`, `audio`, or `file`. */\n  type?: string;\n  /** Size in bytes of the media file. */\n  sizeBytes?: string;\n  /** Metadata for a video file. */\n  videoMetadata?: {\n    /** URL for the video thumbnail. */\n    thumbnailUrl: string;\n  };\n  /** Metadata for an audio file. */\n  audioMetadata?: {\n    /** Duration in seconds for an audio file. */\n    durationSeconds: number;\n  };\n  /** Metadata for an image file. */\n  imageMetadata?: {\n    /** Natural width of the image in pixels. */\n    naturalWidth: number;\n    /** Natural height of the image in pixels. */\n    naturalHeight: number;\n  };\n}\n\n/**\n * Metadat awhen the capture option for the return type for a link capture\n * request is set to `extended`\n */\nexport interface ExtendedLinkResult {\n  url: string;\n  title: string|null;\n  description: string|null;\n  thumbnailUrl: string|null;\n  sourceName: string|null;\n  sourceThumbnailUrl: string|null;\n}\n\n/**\n * Configuration options for a [[custom-vcc]] capture.\n */\nexport interface CaptureCustomOptions {\n  /** The short name for the custom vcc */\n  name?: string;\n  /** A url where the custom vcc is being hosted */\n  url?: string;\n  /** Type options specific to the custom vcc */\n  typeOptions?: any;\n}\n\n/**\n * Configuration options for a [[color]] capture.\n */\nexport interface CaptureColorOptions {\n  /** Indicates whether to support transparency (`false`, by default). */\n  allowAlpha?: boolean;\n  /** A default value to provide to the color capture tool */\n  initialValue?: string;\n}\n\n/**\n * Configuration options for an [[image]] capture.\n */\nexport interface CaptureImageOptions extends FastlyOptions {\n  /** Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium images). */\n  hideExtensions?: boolean;\n}\n\n/**\n * Configuration options for a [[file]] capture.\n */\nexport interface CaptureFileOptions {}\n\n/**\n * Configuration options for a [[link]] capture.\n */\nexport interface CaptureLinkOptions {\n  kojiTemplateId?: string;\n}\n\n/**\n * Configuration options for a [[range]] capture.\n */\nexport interface CaptureRangeOptions {\n  /** Minimum value. Default is `0`. */\n  min?: number;\n  /** Maximum value. Default is `100`. */\n  max?: number;\n  /** Default increment/step size. Default is `1`. */\n  step?: number;\n  /** A default value to provide to the range capture tool */\n  initialValue?: number;\n}\n\n/**\n * One of the predefined options for a [[select]] capture.\n */\nexport interface SelectOption {\n  /** Value to return if the option is selected. */\n  value: string;\n  /** Description of the option for users. */\n  label: string;\n}\n\n/**\n * Configuration options for a [[select]] capture.\n */\nexport interface CaptureSelectOptions {\n  /** Description of the selection for users. */\n  placeholder?: string;\n  /** List of predefined options. */\n  options?: SelectOption[];\n  /** A default value to provide to the range capture tool */\n  initialValue?: string;\n}\n\n/**\n * Types of files to allow for a [[media]] capture. The [[CaptureMediaOptions | configuration options]] vary by media file type.\n */\nexport type CaptureMediaAcceptOnly = 'image' | 'video' | 'audio' | 'file';\n\nexport interface CaptureVideoOptions {\n  /** Enables HTTP Live Streaming (HLS) for delivery of longer content. When enabled, uploaded videos are transcoded for HLS and return an m3u8 playlist. Use this feature in conjunction with [[https://github.com/video-dev/hls.js/ | hls.js]] for controlling playback. */\n  hls?: boolean;\n  /** Generates pose detection data. When enabled, pose data is available after upload by appending `.poses` to the returned file URL. For example, `https://objects.koji-cdn.com/project-id/my-video.mp4.poses`. */\n  estimatePoses?: boolean;\n  /** Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium videos). */\n  hideExtensions?: boolean;\n}\n\nexport interface CaptureSoundOptions {\n  /** Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium sounds). */\n  hideExtensions?: boolean;\n}\n\nexport interface CaptureMediaOptions {\n  /** Specifies the types of media files to allow. If empty or not specified, any type of file is allowed. */\n  acceptOnly?: CaptureMediaAcceptOnly[];\n  /** Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium media files). */\n  hideExtensions?: boolean;\n  /** Specifies the configuration options for video files. */\n  videoOptions?: CaptureVideoOptions;\n  /** Specifies the configuration options for image files. */\n  imageOptions?: CaptureImageOptions;\n}\n\n/**\n * Captures user input on the frontend of your Koji.\n */\nexport class Capture extends KojiBridge {\n  /**\n   * Map capture data to a verbose result\n   * @param data The capture data returned by the platform\n   */\n  private pickVerboseResultFromMessage(data: CaptureMessage<any>): VerboseCapture {\n    if (data.status !== CaptureStatus.SUCCEEDED) {\n      return {\n        captureStatus: data.status,\n        captureType: data.type,\n        result: null,\n        resultMetadata: null,\n      };\n    }\n\n    if (data.result && typeof data.result === 'object') {\n      const { url, ...resultMetadata } = data.result;\n\n      return {\n        captureStatus: data.status,\n        captureType: data.type,\n        result: url,\n        resultMetadata,\n      };\n    }\n\n    return {\n      captureStatus: data.status,\n      captureType: data.type,\n      result: data.result,\n      resultMetadata: {},\n    };\n  }\n\n  /**\n   * Map any non-successful capture data to a null return\n   * @param data The capture data returned by the platform\n   */\n  private pickResultFromMessage(data: CaptureMessage<any>): CaptureResult {\n    if (data.status !== CaptureStatus.SUCCEEDED) {\n      return null;\n    }\n\n    return data.result;\n  }\n\n  /**\n   * Map `initialValue` to `value`, the key where the platform expects to see the initialValue in a postMessage\n   * @param options The initial capture options passed by the user\n   */\n  private transformInitialValueOptions(options: any): any {\n    const {\n      initialValue,\n      ...transformedOptions\n    } = options;\n\n    if (initialValue) transformedOptions.value = initialValue;\n\n    return transformedOptions;\n  }\n\n  /**\n   * Prompts the user to select a color, either from a swatch or by entering a color code. Supports HEX, RGB, or HSL by default. Supports RBGA or HSLA, if transparency is enabled in the capture options.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the color code as a string.\n   * @return          Color code as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const color = await Koji.ui.capture.color();\n   *\n   * // Enable transparency and return an object\n   * const color = await Koji.ui.capture.color({ allowAlpha: true, verbose: true });\n   * ```\n   */\n  color(options: CaptureColorOptions, verbose: true): Promise<VerboseCapture>;\n  color(options?: CaptureColorOptions, verbose?: false): Promise<string | null>;\n  color(options: CaptureColorOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  async color(options: CaptureColorOptions = {}, verbose: boolean = false): Promise<CaptureResult> {\n    const transformedOptions = this.transformInitialValueOptions(options);\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'color',\n          options: transformedOptions,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select a value from a Custom VCC.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the value captured by the Custom VCC.\n   * @return          Color code as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const music = await Koji.ui.capture.custom({ name: 'scloud' });\n   * ```\n   */\n  custom(options: CaptureCustomOptions, verbose: true): Promise<VerboseCapture>;\n  custom(options?: CaptureCustomOptions, verbose?: false): Promise<any>;\n  custom(options: CaptureCustomOptions, verbose?: boolean): Promise<any | VerboseCapture>;\n  @client\n  async custom(options: CaptureCustomOptions = {}, verbose: boolean = false): Promise<any | VerboseCapture> {\n    const { name, url, ...typeOptions } = options;\n\n    if (!name && !url) throw new Error('Please supply the custom name or url for the Custom VCC you would like to load.');\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: `custom<${name || url}>`,\n          options: typeOptions,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return data.result;\n  }\n\n  /**\n   * Prompts the user to upload a file of any type. Use this method to allow the user to upload raw files in their original format. For example, to capture high-resolution images for download rather than for display in a browser.\n   *\n   * To apply automatic transcoding and transformations for specific file types, use the associated method. See [[image]], [[video]], [[sound]], or [[media]].\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the file as a string.\n   * @return          URL to the file as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const file = await Koji.ui.capture.file();\n   *\n   * // Return an object\n   * const file = await Koji.ui.capture.file({ verbose: true });\n   * ```\n   */\n  file(options: CaptureFileOptions, verbose: true): Promise<VerboseCapture>;\n  file(options?: CaptureFileOptions, verbose?: false): Promise<string>;\n  file(options: CaptureFileOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  async file(options: CaptureFileOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'file',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select an image by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method when you want to limit the user to selecting an image.\n   *\n   * To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the image asset as a string.\n   * @return          URL to the image asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const image = await Koji.ui.capture.image();\n   *\n   * // Hide asset packs and return an object\n   * const image = await Koji.ui.capture.image({ hideExtensions: true, verbose: true });\n   * ```\n   */\n  image(options: CaptureImageOptions, verbose: true): Promise<VerboseCapture>;\n  image(options?: CaptureImageOptions, verbose?: false): Promise<string>;\n  image(options: CaptureImageOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  async image(options: CaptureImageOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'image',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to create a new Koji or select an existing Koji, either from the user’s profile or from a URL.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the Koji as a string.\n   *\n   * @return          URL to the Koji as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   * @example\n   * ```javascript\n   * const koji = await Koji.ui.capture.koji();\n   *\n   * // Return an object\n   * const koji = await Koji.ui.capture.koji({ verbose: true });\n   * ```\n   */\n  link(options: CaptureLinkOptions, verbose: true): Promise<VerboseCapture>;\n  link(options?: CaptureLinkOptions, verbose?: false): Promise<string>;\n  link(options: CaptureLinkOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  async link(options: CaptureLinkOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'link',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select an image, file, sound, or video by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method to allow the user to select from more than one type of media with a single control. For example, allow the user to select an image or a video. You can limit the types of media to allow and configure options for each allowed type.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns only the value of the media capture, which is either the URL to the media as a string or an object with the URL and additional metadata.\n   * @return          [description]\n   *\n   * @example\n   * ```javascript\n   * const media = await Koji.ui.capture.media();\n   *\n   * // Limit to image or video, hide asset packs, return an object with extended metadata, transcode videos for HLS\n   * const media = await Koji.ui.capture.media({ acceptOnly: [image,video], hideExtensions: true, returnType: 'extended', videoOptions: { hls: true }, verbose: true });\n   * ```\n   */\n  media(options: CaptureMediaOptions, verbose: true): Promise<VerboseCapture>;\n  media(options?: CaptureMediaOptions, verbose?: false): Promise<string>;\n  media(options: CaptureMediaOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  async media(options: CaptureMediaOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    if (verbose) {\n      const data: CaptureMessage<ExtendedMediaResult> = await this.sendMessageAndAwaitResponse(\n        {\n          kojiEventName: 'Koji.Capture',\n          data: {\n            type: 'media',\n            options: {\n              ...options,\n              returnType: 'extended',\n            },\n          },\n        },\n        'Koji.CaptureSuccess',\n      );\n\n      return this.pickVerboseResultFromMessage(data);\n    }\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'media',\n          options: {\n            ...options,\n            returnType: 'url',\n          },\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select a numeric value within a certain range. You can configure the minimum value, maximum value, and default increment.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the numeric value as a string.\n   * @return          Numeric value as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const size = await Koji.ui.capture.range();\n   *\n   * // Return an object\n   * const size = await Koji.ui.capture.range({ min: 0, max: 60, step: 3, verbose: true });\n   * ```\n   */\n  range(options: CaptureRangeOptions, verbose: true): Promise<VerboseCapture>;\n  range(options?: CaptureRangeOptions, verbose?: false): Promise<number>;\n  range(options: CaptureRangeOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  async range(options: CaptureRangeOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    const transformedOptions = this.transformInitialValueOptions(options);\n\n    const data: CaptureMessage<number> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'range',\n          options: transformedOptions,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select from a predefined list of options.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the option as a string.\n   * @return         Value of the predefined option as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const option = await Koji.ui.capture.select();\n   *\n   * // Select from three options\n   * const option = await Koji.ui.capture.select(\n   *  { options: [\n   *    { value: \"one\", label: \"Option one\" },\n   *    { value: \"two\", label: \"Option two\" },\n   *    { value: \"three\", label: \"Option three\" }],\n   *    placeholder: \"Choose an option\"});\n   * ```\n   */\n  select(options: CaptureSelectOptions, verbose: true): Promise<VerboseCapture>;\n  select(options?: CaptureSelectOptions, verbose?: false): Promise<string>;\n  select(options: CaptureSelectOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  async select(options: CaptureSelectOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    const transformedOptions = this.transformInitialValueOptions(options);\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'select',\n          options: transformedOptions,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select a sound by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method when you want to limit the user to selecting a sound.\n   *\n   * To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the audio asset as a string.\n   * @return         URL to the audio asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const sound = await Koji.ui.capture.sound();\n   *\n   * // Hide asset packs and return an object\n   * const sound = await Koji.ui.capture.sound({ hideExtensions: true, verbose: true });\n   * ```\n   */\n  sound(options: CaptureSoundOptions, verbose: true): Promise<VerboseCapture>;\n  sound(options?: CaptureSoundOptions, verbose?: false): Promise<string>;\n  sound(options: CaptureSoundOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  async sound(options: CaptureSoundOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'sound',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to upload a video. Use this method when you want to limit the user to uploading a video file.\n   *\n   * To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the video asset as a string.\n   * @return          URL to the video asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const video = await Koji.ui.capture.video();\n   *\n   * // Transcode for HLS and return an object\n   * const video = await Koji.ui.capture.video({ hls: true, verbose: true });\n   * ```\n   */\n  video(options: CaptureVideoOptions, verbose: true): Promise<VerboseCapture>;\n  video(options?: CaptureVideoOptions, verbose?: false): Promise<string>;\n  video(options: CaptureVideoOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  async video(options: CaptureVideoOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'video',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n}\n\nexport const capture = new Capture();\n"],"file":"index.js"}