{"version":3,"sources":["../../../../src/frontend/ui/capture/index.ts"],"names":["CaptureStatus","CaptureType","Capture","data","status","SUCCEEDED","captureStatus","captureType","type","result","resultMetadata","url","options","initialValue","transformedOptions","value","verbose","sendMessageAndAwaitResponse","kojiEventName","acceptOnly","audioOptions","returnType","hideExtensions","pickVerboseResultFromMessage","pickResultFromMessage","transformInitialValueOptions","name","typeOptions","Error","fileOptions","imageOptions","videoOptions","KojiBridge","client","capture"],"mappings":"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","sourcesContent":["import { KojiBridge } from '../../kojiBridge';\nimport { client } from '../../@decorators/client';\nimport { FastlyOptions, RemuxPreset, Watermark } from '../../../types';\n\n/**\n * Result of a user input capture.\n */\nexport type CaptureResult = string | number | null | VerboseCapture;\n\n/**\n * Extended result of a user input capture.\n */\nexport interface VerboseCapture {\n  /** Whether the user completed the selection (`succeeded`) or exited the control without selecting a value (`cancelled`). */\n  captureStatus: CaptureStatus;\n  /** Capture method type (for example, `color` or `file`). */\n  captureType: CaptureType;\n  /** Value captured from the user. */\n  result?: string | number | null;\n  /** Metadata associated with the captured result. */\n  resultMetadata?: ExtendedMediaResult | ExtendedLinkResult | null;\n}\n\nexport interface CaptureMessage<T> {\n  _idempotencyKey: string;\n  event: string;\n  result: T;\n  status: CaptureStatus;\n  type: CaptureType;\n}\n\n/** Whether the user completed the selection (`succeeded`) or exited the control without selecting a value (`cancelled`). */\nexport enum CaptureStatus {\n  SUCCEEDED = 'succeeded',\n  CANCELLED = 'cancelled',\n}\n\n/** Capture method types. */\nexport enum CaptureType {\n  COLOR = 'color',\n  FILE = 'file',\n  IMAGE = 'image',\n  LINK = 'link',\n  MEDIA = 'media',\n  RANGE = 'range',\n  SELECT = 'select',\n  SOUND = 'audio',\n  VIDEO = 'video',\n}\n\n/** Metadata for a video file. */\nexport interface VideoMetadata {\n  /** URL for the video thumbnail. */\n  thumbnailUrl: string;\n}\n\n/** Metadata for an audio file. */\nexport interface AudioMetadata {\n  /** Duration in seconds for an audio file. */\n  durationSeconds: number;\n}\n\n/** Metadata for an image file. */\nexport interface ImageMetadata {\n  /** Natural width of the image in pixels. */\n  naturalWidth: number;\n  /** Natural height of the image in pixels. */\n  naturalHeight: number;\n}\n\n/**\n * Extended metadata for a [[media]] capture.\n */\nexport interface ExtendedMediaResult {\n  /** URL of the selected media file. */\n  url?: string;\n  /** Type of media: `image`, `video`, `audio`, or `file`. */\n  type?: string;\n  /** Size in bytes of the media file. */\n  sizeBytes?: string;\n  /** Metadata for a video file. */\n  videoMetadata?: VideoMetadata;\n  /** Metadata for an audio file. */\n  audioMetadata?: AudioMetadata;\n  /** Metadata for an image file. */\n  imageMetadata?: ImageMetadata;\n}\n\n/**\n * Extended metadata for a [[link]] capture.\n */\nexport interface ExtendedLinkResult {\n  /** Full URL of the selected Koji or pasted link resource. */\n  url: string;\n  /** Sharing metadata title (`og:title`) of the content at the URL, if available. */\n  title: string | null;\n  /** Sharing metadata description (`og:description`) of the content at the URL, if available. */\n  description: string | null;\n  /** Sharing metadata image (`og:image`) of the content at the URL, if available. */\n  thumbnailUrl: string | null;\n  /** If the resource is a Koji app, the app’s name, if available. */\n  sourceName: string | null;\n  /** If the resource is a Koji app, the URL of the Koji app’s thumbnail image, if available. */\n  sourceThumbnailUrl: string | null;\n}\n\n/**\n * Configuration options for a [[custom]] capture.\n */\nexport interface CaptureCustomOptions {\n  /** Short name for the custom control. */\n  name?: string;\n  /** URL where the custom control is hosted. */\n  url?: string;\n  /** Type options specific to the custom control. */\n  typeOptions?: any;\n}\n\n/**\n * Configuration options for a [[color]] capture.\n */\nexport interface CaptureColorOptions {\n  /** Indicates whether to support transparency (`false`, by default). */\n  allowAlpha?: boolean;\n  /** Default value for the color capture control. */\n  initialValue?: string;\n}\n\n/**\n * Configuration options for an [[image]] capture.\n */\nexport interface CaptureImageOptions extends FastlyOptions {\n  /** Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Koji apps that sell premium images). */\n  hideExtensions?: boolean;\n}\n\n/**\n * Configuration options for a [[file]] capture.\n */\nexport interface CaptureFileOptions {\n  /** No options are currently available. */\n}\n\n/**\n * Configuration options for a [[link]] capture.\n */\nexport interface CaptureLinkOptions {\n  /** App Store ID of a Koji app. Include this value to enable the user to create a new Koji from the link control. */\n  kojiTemplateId?: string;\n  /** Whether to prevent users from pasting an external link. If `true`, users can select only one of their Koji apps. */\n  disableExternalLinks?: boolean;\n}\n\n/**\n * Configuration options for a [[range]] capture.\n */\nexport interface CaptureRangeOptions {\n  /** Minimum value. Default is `0`. */\n  min?: number;\n  /** Maximum value. Default is `100`. */\n  max?: number;\n  /** Default increment/step size. Default is `1`. */\n  step?: number;\n  /** Default value for the range capture control. */\n  initialValue?: number;\n}\n\n/**\n * One of the predefined options for a [[select]] capture.\n */\nexport interface SelectOption {\n  /** Value to return if the option is selected. */\n  value: string;\n  /** Description of the option for users. */\n  label: string;\n}\n\n/**\n * Configuration options for a [[select]] capture.\n */\nexport interface CaptureSelectOptions {\n  /** Description of the selection for users. */\n  placeholder?: string;\n  /** List of predefined options. */\n  options?: SelectOption[];\n  /** Default value for the select capture control. */\n  initialValue?: string;\n}\n\n/**\n * Types of files to allow for a [[media]] capture. The [[CaptureMediaOptions | configuration options]] vary by media type.\n */\nexport type CaptureMediaAcceptOnly = 'image' | 'video' | 'audio' | 'file';\n\n/**\n * Configuration options for a [[video]] capture.\n */\nexport interface CaptureVideoOptions {\n  /** Enables HTTP Live Streaming (HLS) for delivery of longer content. When enabled, uploaded videos are transcoded for HLS and return an m3u8 playlist. Use this feature in conjunction with [[https://github.com/video-dev/hls.js/ | hls.js]] for controlling playback. */\n  hls?: boolean;\n  /** Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Koji apps that sell premium videos). */\n  hideExtensions?: boolean;\n  /** Remuxes video files constructed from getUserMedia MediaStreams, which ensures these files contain correct duration headers before they are delivered. */\n  remux?: boolean;\n  /** Specifies the cropping constraints when remuxing a video. If not specified, the video will not be cropped. */\n  remuxPreset?: RemuxPreset;\n  /** Applies a watermark to the uploaded image. Available only with HLS transcoding. */\n  watermark?: Watermark;\n}\n\n/**\n * Configuration options for an [[audio]] capture.\n */\nexport interface CaptureAudioOptions {\n  /** Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Koji apps that sell premium audios). */\n  hideExtensions?: boolean;\n}\n\n/**\n * Configuration options for a [[media]] capture.\n */\nexport interface CaptureMediaOptions {\n  /** Specifies the types of media files to allow. If empty or not specified, any type of file is allowed. */\n  acceptOnly?: CaptureMediaAcceptOnly[];\n  /** Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Koji apps that sell premium media files). */\n  hideExtensions?: boolean;\n  /** Specifies the configuration options for video files. */\n  videoOptions?: CaptureVideoOptions;\n  /** Specifies the configuration options for image files. */\n  imageOptions?: CaptureImageOptions;\n}\n\n/**\n * Captures user input on the frontend of your Koji app.\n */\nexport class Capture extends KojiBridge {\n  /**\n   * Map capture data to a verbose result.\n   *\n   * @param data Capture data returned by the platform.\n   */\n  private pickVerboseResultFromMessage(data: CaptureMessage<any>): VerboseCapture {\n    if (data.status !== CaptureStatus.SUCCEEDED) {\n      return {\n        captureStatus: data.status,\n        captureType: data.type,\n        result: null,\n        resultMetadata: null,\n      };\n    }\n\n    if (data.result && typeof data.result === 'object') {\n      const { url, ...resultMetadata } = data.result;\n\n      return {\n        captureStatus: data.status,\n        captureType: data.type,\n        result: url,\n        resultMetadata,\n      };\n    }\n\n    return {\n      captureStatus: data.status,\n      captureType: data.type,\n      result: data.result,\n      resultMetadata: {},\n    };\n  }\n\n  /**\n   * Map any non-successful capture data to a null return.\n   *\n   * @param data Capture data returned by the platform.\n   */\n  private pickResultFromMessage(data: CaptureMessage<any>): CaptureResult {\n    if (data.status !== CaptureStatus.SUCCEEDED) {\n      return null;\n    }\n\n    return data.result;\n  }\n\n  /**\n   * Map `initialValue` to `value`, the key where the platform expects to see the initialValue in a postMessage.\n   *\n   * @param options Initial capture options passed by the user.\n   */\n  private transformInitialValueOptions(options: any): any {\n    const { initialValue, ...transformedOptions } = options;\n\n    if (initialValue) transformedOptions.value = initialValue;\n\n    return transformedOptions;\n  }\n\n  /**\n   * Prompts the user to select a sound by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method when you want to limit the user to selecting a sound.\n   *\n   * To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the audio asset as a string.\n   * @return         URL to the audio asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const audio = await Koji.ui.capture.audio();\n   *\n   * // Hide asset packs and return an object\n   * const audio = await Koji.ui.capture.audio({ hideExtensions: true }, true);\n   * ```\n   */\n  audio(options: CaptureAudioOptions, verbose: true): Promise<VerboseCapture>;\n  audio(options?: CaptureAudioOptions, verbose?: false): Promise<string>;\n  audio(options: CaptureAudioOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  public async audio(options: CaptureAudioOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    if (verbose) {\n      const data: CaptureMessage<ExtendedMediaResult> = await this.sendMessageAndAwaitResponse(\n        {\n          kojiEventName: 'Koji.Capture',\n          data: {\n            type: 'media',\n            options: {\n              acceptOnly: ['audio'],\n              audioOptions: options,\n              returnType: 'extended',\n              hideExtensions: options.hideExtensions,\n            },\n          },\n        },\n        'Koji.CaptureSuccess',\n      );\n\n      return this.pickVerboseResultFromMessage(data);\n    }\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'media',\n          options: {\n            acceptOnly: ['audio'],\n            audioOptions: options,\n            returnType: 'url',\n            hideExtensions: options.hideExtensions,\n          },\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select a color, either from a swatch or by entering a color code. Supports HEX, RGB, or HSL by default. Supports RBGA or HSLA, if transparency is enabled in the capture options.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the color code as a string.\n   * @return          Color code as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const color = await Koji.ui.capture.color();\n   *\n   * // Enable transparency and return an object\n   * const color = await Koji.ui.capture.color({ allowAlpha: true }, true);\n   * ```\n   */\n  color(options: CaptureColorOptions, verbose: true): Promise<VerboseCapture>;\n  color(options?: CaptureColorOptions, verbose?: false): Promise<string | null>;\n  color(options: CaptureColorOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  public async color(options: CaptureColorOptions = {}, verbose: boolean = false): Promise<CaptureResult> {\n    const transformedOptions = this.transformInitialValueOptions(options);\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'color',\n          options: transformedOptions,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select a value from a custom control. To build a custom control, use the {@doclink withkoji-custom-vcc-sdk | @withkoji/custom-vcc-sdk package}.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the value captured by the custom control.\n   * @return          Color code as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const music = await Koji.ui.capture.custom({ name: 'scloud' });\n   * ```\n   */\n  custom(options: CaptureCustomOptions, verbose: true): Promise<VerboseCapture>;\n  custom(options?: CaptureCustomOptions, verbose?: false): Promise<any>;\n  custom(options: CaptureCustomOptions, verbose?: boolean): Promise<any | VerboseCapture>;\n  @client\n  public async custom(options: CaptureCustomOptions = {}, verbose: boolean = false): Promise<any | VerboseCapture> {\n    const { name, url, ...typeOptions } = options;\n\n    if (!name && !url) throw new Error('Please supply the custom name or url for the Custom VCC you would like to load.');\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: `custom<${name || url}>`,\n          options: typeOptions,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return data.result;\n  }\n\n  /**\n   * Prompts the user to upload a file of any type.\n   * Use this method to allow the user to upload raw files in their original format.\n   * For example, use this to capture high-resolution images for download rather than for display in a browser.\n   *\n   * To apply automatic transcoding and transformations for specific file types, use the associated method.\n   * See [[image]], [[video]], [[audio]], or [[media]].\n   *\n   * To provide a custom upload experience or to upload media created or captured during the app experience, use {@doclink core-frontend-ui-upload#uploadFile | Upload.uploadFile}.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the file as a string.\n   * @return          URL to the file as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const file = await Koji.ui.capture.file();\n   *\n   * // Return an object\n   * const file = await Koji.ui.capture.file({}, true);\n   * ```\n   */\n  file(options: CaptureFileOptions, verbose: true): Promise<VerboseCapture>;\n  file(options?: CaptureFileOptions, verbose?: false): Promise<string>;\n  file(options: CaptureFileOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  public async file(options: CaptureFileOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    if (verbose) {\n      const data: CaptureMessage<ExtendedMediaResult> = await this.sendMessageAndAwaitResponse(\n        {\n          kojiEventName: 'Koji.Capture',\n          data: {\n            type: 'media',\n            options: {\n              acceptOnly: ['file'],\n              fileOptions: options,\n              returnType: 'extended',\n            },\n          },\n        },\n        'Koji.CaptureSuccess',\n      );\n\n      return this.pickVerboseResultFromMessage(data);\n    }\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'media',\n          options: {\n            acceptOnly: ['file'],\n            fileOptions: options,\n            returnType: 'url',\n          },\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select an image by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method when you want to limit the user to selecting an image.\n   *\n   * To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the image asset as a string.\n   * @return          URL to the image asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const image = await Koji.ui.capture.image();\n   *\n   * // Hide asset packs and return an object\n   * const image = await Koji.ui.capture.image({ hideExtensions: true }, true);\n   * ```\n   */\n  image(options: CaptureImageOptions, verbose: true): Promise<VerboseCapture>;\n  image(options?: CaptureImageOptions, verbose?: false): Promise<string>;\n  image(options: CaptureImageOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  public async image(options: CaptureImageOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    if (verbose) {\n      const data: CaptureMessage<ExtendedMediaResult> = await this.sendMessageAndAwaitResponse(\n        {\n          kojiEventName: 'Koji.Capture',\n          data: {\n            type: 'media',\n            options: {\n              acceptOnly: ['image'],\n              imageOptions: options,\n              returnType: 'extended',\n              hideExtensions: options.hideExtensions,\n            },\n          },\n        },\n        'Koji.CaptureSuccess',\n      );\n\n      return this.pickVerboseResultFromMessage(data);\n    }\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'media',\n          options: {\n            acceptOnly: ['image'],\n            imageOptions: options,\n            returnType: 'url',\n            hideExtensions: options.hideExtensions,\n          },\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to paste an external URL, create a new app, or select an existing app from their profile.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL as a string.\n   *\n   * @return          URL as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   * @example\n   * ```javascript\n   * const link = await Koji.ui.capture.link();\n   *\n   * // Return an object\n   * const link = await Koji.ui.capture.link({}, true);\n   * ```\n   */\n  link(options: CaptureLinkOptions, verbose: true): Promise<VerboseCapture>;\n  link(options?: CaptureLinkOptions, verbose?: false): Promise<string>;\n  link(options: CaptureLinkOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  async link(options: CaptureLinkOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'link',\n          options,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select an image, file, audio, or video by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method to allow the user to select from more than one type of media with a single control. For example, allow the user to select an image or a video. You can limit the types of media to allow and configure options for each allowed type.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns only the value of the media capture.\n   * @return          Value of the media capture, which is either the URL to the media as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const media = await Koji.ui.capture.media();\n   *\n   * // Limit to image or video, hide asset packs,\n   * // return an object with extended metadata, transcode videos for HLS\n   * const media = await Koji.ui.capture.media({\n   *    acceptOnly: ['image', 'video'],\n   *    hideExtensions: true,\n   *    videoOptions: { hls: true }\n   *  }, true);\n   * ```\n   */\n  media(options: CaptureMediaOptions, verbose: true): Promise<VerboseCapture>;\n  media(options?: CaptureMediaOptions, verbose?: false): Promise<string>;\n  media(options: CaptureMediaOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  public async media(options: CaptureMediaOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    if (verbose) {\n      const data: CaptureMessage<ExtendedMediaResult> = await this.sendMessageAndAwaitResponse(\n        {\n          kojiEventName: 'Koji.Capture',\n          data: {\n            type: 'media',\n            options: {\n              ...options,\n              returnType: 'extended',\n            },\n          },\n        },\n        'Koji.CaptureSuccess',\n      );\n\n      return this.pickVerboseResultFromMessage(data);\n    }\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'media',\n          options: {\n            ...options,\n            returnType: 'url',\n          },\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select a numeric value within a certain range.\n   * You can configure the minimum value, maximum value, and default increment, as well as an initial value for the control.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the numeric value as a string.\n   * @return          Numeric value as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const size = await Koji.ui.capture.range();\n   *\n   * // Return an object\n   * const size = await Koji.ui.capture.range({ min: 0, max: 60, step: 3 }, true);\n   * ```\n   */\n  range(options: CaptureRangeOptions, verbose: true): Promise<VerboseCapture>;\n  range(options?: CaptureRangeOptions, verbose?: false): Promise<number>;\n  range(options: CaptureRangeOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  public async range(options: CaptureRangeOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    const transformedOptions = this.transformInitialValueOptions(options);\n\n    const data: CaptureMessage<number> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'range',\n          options: transformedOptions,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to select from a predefined list of options.\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the option as a string.\n   * @return         Value of the predefined option as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const option = await Koji.ui.capture.select();\n   *\n   * // Select from three options\n   * const option = await Koji.ui.capture.select(\n   *  { options: [\n   *    { value: \"one\", label: \"Option one\" },\n   *    { value: \"two\", label: \"Option two\" },\n   *    { value: \"three\", label: \"Option three\" }],\n   *    placeholder: \"Choose an option\"});\n   * ```\n   */\n  select(options: CaptureSelectOptions, verbose: true): Promise<VerboseCapture>;\n  select(options?: CaptureSelectOptions, verbose?: false): Promise<string>;\n  select(options: CaptureSelectOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  public async select(options: CaptureSelectOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    const transformedOptions = this.transformInitialValueOptions(options);\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'select',\n          options: transformedOptions,\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    if (verbose) return this.pickVerboseResultFromMessage(data);\n\n    return this.pickResultFromMessage(data);\n  }\n\n  /**\n   * Prompts the user to upload a video. Use this method when you want to limit the user to uploading a video file.\n   *\n   * To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n   *\n   * @param   options\n   * @param   verbose Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the video asset as a string.\n   * @return          URL to the video asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n   *\n   * @example\n   * ```javascript\n   * const video = await Koji.ui.capture.video();\n   *\n   * // Transcode for HLS and return an object\n   * const video = await Koji.ui.capture.video({ hls: true }, true);\n   * ```\n   */\n  video(options: CaptureVideoOptions, verbose: true): Promise<VerboseCapture>;\n  video(options?: CaptureVideoOptions, verbose?: false): Promise<string>;\n  video(options: CaptureVideoOptions, verbose?: boolean): Promise<CaptureResult>;\n  @client\n  public async video(options: CaptureVideoOptions = {}, verbose?: boolean): Promise<CaptureResult> {\n    if (verbose) {\n      const data: CaptureMessage<ExtendedMediaResult> = await this.sendMessageAndAwaitResponse(\n        {\n          kojiEventName: 'Koji.Capture',\n          data: {\n            type: 'media',\n            options: {\n              acceptOnly: ['video'],\n              returnType: 'extended',\n              videoOptions: options,\n              hideExtensions: options.hideExtensions,\n            },\n          },\n        },\n        'Koji.CaptureSuccess',\n      );\n\n      return this.pickVerboseResultFromMessage(data);\n    }\n\n    const data: CaptureMessage<string> = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.Capture',\n        data: {\n          type: 'media',\n          options: {\n            acceptOnly: ['video'],\n            returnType: 'url',\n            videoOptions: options,\n            hideExtensions: options.hideExtensions,\n          },\n        },\n      },\n      'Koji.CaptureSuccess',\n    );\n\n    return this.pickResultFromMessage(data);\n  }\n}\n\nexport const capture = new Capture();\n"],"file":"index.js"}