{"version":3,"sources":["../../../../src/frontend/ui/present/index.ts"],"names":["Present","options","sendMessageAndAwaitResponse","kojiEventName","data","title","message","confirmButtonLabel","cancelButtonLabel","didConfirm","sendMessage","type","KojiBridge","client","present"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AA+BA;AACA;AACA;IACaA,O;;;;;;;;;;;;;AACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAE4BC,gBAAAA,O,2DAAsC,E;;uBAC3C,KAAKC,2BAAL,CACjB;AACEC,kBAAAA,aAAa,EAAE,oBADjB;AAEEC,kBAAAA,IAAI,EAAE;AACJC,oBAAAA,KAAK,EAAEJ,OAAO,CAACI,KADX;AAEJC,oBAAAA,OAAO,EAAEL,OAAO,CAACK,OAFb;AAGJC,oBAAAA,kBAAkB,EAAEN,OAAO,CAACM,kBAHxB;AAIJC,oBAAAA,iBAAiB,EAAEP,OAAO,CAACO;AAJvB;AAFR,iBADiB,EAUjB,sBAViB,C;;;AAAbJ,gBAAAA,I;iDAaCA,IAAI,CAACK,U;;;;;;;;;;;;;;;;AAGd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;0BAEeR,O,EAAoC;AAC/C,WAAKS,WAAL,CACE;AACEP,QAAAA,aAAa,EAAE,YADjB;AAEEC,QAAAA,IAAI,EAAE;AACJC,UAAAA,KAAK,EAAEJ,OAAO,CAACI,KADX;AAEJC,UAAAA,OAAO,EAAEL,OAAO,CAACK;AAFb;AAFR,OADF;AASD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;gCAEqBK,I,EAAuB;AACxC,WAAKD,WAAL,CACE;AACEP,QAAAA,aAAa,EAAE,sBADjB;AAEEC,QAAAA,IAAI,EAAE;AACJO,UAAAA,IAAI,EAAJA;AADI;AAFR,OADF;AAQD;;;EArF0BC,sB,kFAiB1BC,c,gKAiCAA,c,+JAyBAA,c;;AAaI,IAAMC,OAAO,GAAG,IAAId,OAAJ,EAAhB","sourcesContent":["import { KojiBridge } from '../../kojiBridge';\nimport { client } from '../../@decorators/client';\n\n/**\n * Defines a confirmation dialog box to show a user.\n */\nexport interface PresentConfirmationOptions {\n  /** Title for the dialog box (`Confirm` by default). */\n  title?: string;\n  /** Question to ask the user (empty by default). */\n  message?: string;\n  /** Label for the confirm action (`Confirm` by default). */\n  confirmButtonLabel?: string;\n  /** Label for the cancel action (`Cancel` by default). */\n  cancelButtonLabel?: string;\n}\n\n/**\n * Defines an alert dialog box to show a user.\n */\nexport interface PresentAlertOptions {\n  /** Title for the dialog box. */\n  title: string;\n  /** Information to display to the user. */\n  message: string;\n}\n\n/**\n * Type of a system alert – `success` (check mark), `sent` (message sent icon), `rejected` (alert icon), and `reported` (alert icon).\n */\nexport type SystemAlertType = 'success'|'sent'|'reported'|'rejected';\n\n/**\n * Presents dialog boxes and system alerts to users on the frontend of your Koji app.\n */\nexport class Present extends KojiBridge {\n  /**\n   * Presents a confirmation dialog box to a user. Use this method for messages that require a decision from the user, such as to ask whether to proceed with an action. For messages that do not require a decision, use [[alert]] or [[systemAlert]].\n   *\n   * @param   options Confirmation dialog box to display.\n   * @return          Whether the user confirmed (`true`) or cancelled (`false`) the action.\n   *\n   * @example\n   * ```javascript\n   * const confirmed = await Koji.ui.present.confirmation({\n   *  title: 'Delete File',\n   *  message: 'Are you sure you want to delete this file?',\n   *  confirmButtonLabel: 'Delete',\n   *  cancelButtonLabel: 'Cancel'\n   * });\n   * ```\n   */\n  @client\n  public async confirmation(options: PresentConfirmationOptions = {}): Promise<boolean> {\n    const data = await this.sendMessageAndAwaitResponse(\n      {\n        kojiEventName: 'Koji.ConfirmPrompt',\n        data: {\n          title: options.title,\n          message: options.message,\n          confirmButtonLabel: options.confirmButtonLabel,\n          cancelButtonLabel: options.cancelButtonLabel,\n        },\n      },\n      'Koji.ConfirmResolved',\n    );\n\n    return data.didConfirm;\n  }\n\n  /**\n   * Presents an alert dialog box to the user.\n   * Use this method for messages that require only an acknowledgement from the user.\n   * For messages that require a decision, use [[confirmation]].\n   * For simple alerts that are dismissed automatically after a delay, without user interaction or a message, use [[systemAlert]].\n   *\n   * @param   options\n   *\n   * @example\n   * ```javascript\n   * Koji.ui.present.alert({\n   *  title: 'Image Posted',\n   *  message: 'Your new image is available on your fan wall!'\n   * });\n   */\n  @client\n  public alert(options: PresentAlertOptions): void {\n    this.sendMessage(\n      {\n        kojiEventName: 'Koji.Alert',\n        data: {\n          title: options.title,\n          message: options.message,\n        },\n      },\n    );\n  }\n\n  /**\n   * Presents a system alert (icon and label).\n   * System alerts are displayed for 1200ms and then dismissed automatically, allowing for an easy way to communicate state changes to a user.\n   * For dialog boxes that show messages and require user interaction, use [[alert]] or [[confirmation]].\n   *\n   * @param type Type of system alert to display.\n   *\n   * @example\n   * ```javascript\n   * Koji.ui.present.systemAlert('success');\n   * ```\n   */\n  @client\n  public systemAlert(type: SystemAlertType) {\n    this.sendMessage(\n      {\n        kojiEventName: 'Koji.ShowSystemAlert',\n        data: {\n          type,\n        },\n      },\n    );\n  }\n}\n\nexport const present = new Present();\n"],"file":"index.js"}