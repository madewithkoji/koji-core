{"version":3,"sources":["../../../../src/frontend/ui/navigate/index.ts"],"names":["Navigate","url","sendMessage","kojiEventName","data","presentationType","appId","options","id","KojiBridge","client","navigate"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;AAEA;AACA;AACA;IACaA,Q;;;;;;;;;;;;;AACX;AACF;AACA;AACA;AACA;uBAEKC,G,EAAmB;AACpB,WAAKC,WAAL,CAAiB;AACfC,QAAAA,aAAa,EAAE,eADA;AAEfC,QAAAA,IAAI,EAAE;AACJH,UAAAA,GAAG,EAAHA;AADI;AAFS,OAAjB;AAMD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;mCAEiBA,G,EAAmB;AAChC,WAAKC,WAAL,CAAiB;AACfC,QAAAA,aAAa,EAAE,eADA;AAEfC,QAAAA,IAAI,EAAE;AACJC,UAAAA,gBAAgB,EAAE,OADd;AAEJJ,UAAAA,GAAG,EAAHA;AAFI;AAFS,OAAjB;AAOD;AAED;AACF;AACA;AACA;AACA;;;;gCAEcK,K,EAAsB;AAChC,WAAKJ,WAAL,CAAiB;AACfC,QAAAA,aAAa,EAAE,kBADA;AAEfC,QAAAA,IAAI,EAAE;AACJG,UAAAA,OAAO,EAAE;AACPC,YAAAA,EAAE,EAAEF;AADG;AADL;AAFS,OAAjB;AAQD;AAED;AACF;AACA;;;;sCAE0B;AACtB,WAAKJ,WAAL,CAAiB;AACfC,QAAAA,aAAa,EAAE,YADA;AAEfC,QAAAA,IAAI,EAAE;AAFS,OAAjB;AAID;;;EA7D2BK,sB,wEAM3BC,c,+JAkBAA,c,wKAgBAA,c,yKAeAA,c;;AASI,IAAMC,QAAQ,GAAG,IAAIX,QAAJ,EAAjB","sourcesContent":["import { KojiBridge } from '../../kojiBridge';\nimport { client } from '../../@decorators/client';\n\n/**\n * Allow for navigation within a koji.\n */\nexport class Navigate extends KojiBridge {\n  /**\n   * Navigate replaces the currently loaded Koji with the content of `url`\n   *\n   * @param url The url to navigate to\n   */\n  @client\n  to(url: string): void {\n    this.sendMessage({\n      kojiEventName: 'Koji.Navigate',\n      data: {\n        url,\n      },\n    });\n  }\n\n  /**\n   * Presents the currently loaded Koji in a sheet that animates from\n   * the bottom of the screen. If the parent Koji is already presented in a\n   * modal, presenting a new Koji will navigate within the sheet instead of\n   * presenting another sheet.\n   *\n   * @param url The url to present in the modal\n   */\n  @client\n  presentInModal(url: string): void {\n    this.sendMessage({\n      kojiEventName: 'Koji.Navigate',\n      data: {\n        presentationType: 'modal',\n        url,\n      },\n    });\n  }\n\n  /**\n   * Programmatically create a new remix.\n   *\n   * @param appId [appId] An optional app id; if this parameter is omitted, the current Koji will be remixed\n   */\n  @client\n  createRemix(appId?: string): void {\n    this.sendMessage({\n      kojiEventName: 'Koji.CreateRemix',\n      data: {\n        options: {\n          id: appId,\n        },\n      },\n    });\n  }\n\n  /**\n   * Programmatically open the Koji's share sheet/dialog.\n   */\n  @client\n  openShareDialog(): void {\n    this.sendMessage({\n      kojiEventName: 'Koji.Share',\n      data: {},\n    });\n  }\n}\n\nexport const navigate = new Navigate();\n"],"file":"index.js"}