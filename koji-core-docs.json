{
	"id": 0,
	"name": "@withkoji/core",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 389,
			"name": "backend",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 390,
					"name": "KojiBackend",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Provides backend methods for your Koji."
					},
					"sources": [
						{
							"fileName": "backend/index.ts",
							"line": 12,
							"character": 24
						},
						{
							"fileName": "index.ts",
							"line": 4,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 391,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 392,
									"name": "Database",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 60,
											"name": "Database"
										}
									}
								},
								{
									"id": 394,
									"name": "Dispatch",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 226,
											"name": "Dispatch"
										}
									}
								},
								{
									"id": 393,
									"name": "IAP",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 295,
											"name": "IAP"
										}
									}
								},
								{
									"id": 395,
									"name": "Identity",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 371,
											"name": "Identity"
										}
									}
								},
								{
									"id": 396,
									"name": "Secret",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 422,
											"name": "Secret"
										}
									}
								},
								{
									"id": 397,
									"name": "Utilities",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 439,
											"name": "Utilities"
										}
									}
								},
								{
									"id": 398,
									"name": "middleware",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 399,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 400,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Executes an [[http://expressjs.com/en/guide/using-middleware.html | Express middleware]], making Koji-specific data available on the `res.locals` property.",
														"tags": [
															{
																"tag": "example",
																"text": "\n```\nconst app = express();\napp.use(Koji.middleware(require('koji.json'));\n\napp.get('/data', (req, res, next) => {\n  // Backend constructor\n  const database = new KojiBackend.Database({ res });\n  ...\n};\n```\n"
															}
														]
													},
													"parameters": [
														{
															"id": 401,
															"name": "kojiConfig",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Configuration data for the Koji.\n"
															},
															"type": {
																"type": "reference",
																"id": 416,
																"name": "KojiConfig"
															},
															"defaultValue": "..."
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 402,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 403,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 404,
																			"name": "req",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"name": "ParamsDictionary"
																					},
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "reference",
																						"name": "ParsedQs"
																					},
																					{
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							},
																							{
																								"type": "intrinsic",
																								"name": "any"
																							}
																						],
																						"name": "Record"
																					}
																				],
																				"name": "Request"
																			}
																		},
																		{
																			"id": 405,
																			"name": "res",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							},
																							{
																								"type": "intrinsic",
																								"name": "any"
																							}
																						],
																						"name": "Record"
																					}
																				],
																				"name": "Response"
																			}
																		},
																		{
																			"id": 406,
																			"name": "next",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "NextFunction"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										392,
										394,
										393,
										395,
										396,
										397,
										398
									]
								}
							]
						}
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						390
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "backend/@decorators/server",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "server",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"decorates": [
						{
							"type": "reference",
							"id": 75,
							"name": "get"
						},
						{
							"type": "reference",
							"id": 80,
							"name": "getCollections"
						},
						{
							"type": "reference",
							"id": 82,
							"name": "search"
						},
						{
							"type": "reference",
							"id": 88,
							"name": "getWhere"
						},
						{
							"type": "reference",
							"id": 95,
							"name": "getAll"
						},
						{
							"type": "reference",
							"id": 100,
							"name": "getAllWhere"
						},
						{
							"type": "reference",
							"id": 107,
							"name": "set"
						},
						{
							"type": "reference",
							"id": 113,
							"name": "update"
						},
						{
							"type": "reference",
							"id": 119,
							"name": "arrayPush"
						},
						{
							"type": "reference",
							"id": 125,
							"name": "arrayRemove"
						},
						{
							"type": "reference",
							"id": 131,
							"name": "delete"
						},
						{
							"type": "reference",
							"id": 138,
							"name": "get"
						},
						{
							"type": "reference",
							"id": 143,
							"name": "getCollections"
						},
						{
							"type": "reference",
							"id": 145,
							"name": "search"
						},
						{
							"type": "reference",
							"id": 151,
							"name": "getWhere"
						},
						{
							"type": "reference",
							"id": 158,
							"name": "getAll"
						},
						{
							"type": "reference",
							"id": 163,
							"name": "getAllWhere"
						},
						{
							"type": "reference",
							"id": 170,
							"name": "set"
						},
						{
							"type": "reference",
							"id": 176,
							"name": "update"
						},
						{
							"type": "reference",
							"id": 182,
							"name": "arrayPush"
						},
						{
							"type": "reference",
							"id": 188,
							"name": "arrayRemove"
						},
						{
							"type": "reference",
							"id": 194,
							"name": "delete"
						},
						{
							"type": "reference",
							"id": 301,
							"name": "resolveReceiptsByIAPToken"
						},
						{
							"type": "reference",
							"id": 304,
							"name": "resolveReceiptById"
						},
						{
							"type": "reference",
							"id": 307,
							"name": "resolveReceiptsBySku"
						},
						{
							"type": "reference",
							"id": 324,
							"name": "resolveReceiptsByIAPToken"
						},
						{
							"type": "reference",
							"id": 327,
							"name": "resolveReceiptById"
						},
						{
							"type": "reference",
							"id": 330,
							"name": "resolveReceiptsBySku"
						},
						{
							"type": "reference",
							"id": 377,
							"name": "pushNotificationToUser"
						},
						{
							"type": "reference",
							"id": 381,
							"name": "pushNotificationToOwner"
						},
						{
							"type": "reference",
							"id": 384,
							"name": "resolveUserFromToken"
						},
						{
							"type": "reference",
							"id": 428,
							"name": "resolveValue"
						},
						{
							"type": "reference",
							"id": 432,
							"name": "generateSignedUrl"
						},
						{
							"type": "reference",
							"id": 445,
							"name": "unfreeze"
						}
					],
					"sources": [
						{
							"fileName": "backend/@decorators/server.ts",
							"line": 10,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "server",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Verifies that server-side methods are used only in backend services of the Koji.",
								"returns": "Method's behavior or an error, if the method is being invoked in a frontend environment.\n"
							},
							"parameters": [
								{
									"id": 4,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Class to which the method belongs."
									},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								},
								{
									"id": 5,
									"name": "propertyKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6,
									"name": "descriptor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method's behavior (which can be mutated inside this function)."
									},
									"type": {
										"type": "reference",
										"name": "PropertyDescriptor"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/@decorators/server.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 8,
			"name": "backend/base",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 19,
					"name": "Base",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 20,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 21,
									"name": "new Base",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 22,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 19,
										"name": "Base"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								20
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 58,
							"character": 17
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 25,
							"name": "IDatabase"
						},
						{
							"type": "reference",
							"id": 60,
							"name": "Database"
						},
						{
							"type": "reference",
							"id": 226,
							"name": "Dispatch"
						},
						{
							"type": "reference",
							"id": 295,
							"name": "IAP"
						},
						{
							"type": "reference",
							"id": 371,
							"name": "Identity"
						},
						{
							"type": "reference",
							"id": 422,
							"name": "Secret"
						},
						{
							"type": "reference",
							"id": 439,
							"name": "Utilities"
						}
					]
				},
				{
					"id": 16,
					"name": "BackendConfiguration",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Environment variables that serve as access credentials for the Koji's backend services."
					},
					"children": [
						{
							"id": 17,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Unique identifier for the Koji."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 20,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 18,
							"name": "projectToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Secret key for the Koji."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 22,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								17,
								18
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 18,
							"character": 37
						}
					]
				},
				{
					"id": 12,
					"name": "BackendConfigurationInput",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration information for the Koji."
					},
					"children": [
						{
							"id": 13,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Unique identifier for the Koji. Will override data passed through `res`."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 8,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 14,
							"name": "projectToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Secret key for the Koji. Will override data passed through `res`."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 10,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 15,
							"name": "res",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Express response object. Used in conjunction with middleware to scope environment variables for instant remixes of the original Koji. For the original definition see [[https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/express/index.d.ts#L127 | @types/express]]."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 12,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record"
											}
										],
										"name": "Response"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								13,
								14,
								15
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 6,
							"character": 42
						}
					]
				},
				{
					"id": 25,
					"name": "IDatabase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 70,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				},
				{
					"id": 9,
					"name": "generateConfig",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 30,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 10,
							"name": "generateConfig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates an extensible configuration for the Koji's backend services."
							},
							"parameters": [
								{
									"id": 11,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Configuration information for the Koji.\n"
									},
									"type": {
										"type": "reference",
										"id": 12,
										"name": "BackendConfigurationInput"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 16,
								"name": "BackendConfiguration"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						19
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						16,
						12,
						25
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						9
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/base/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7,
			"name": "backend/base/index.spec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"sources": [
				{
					"fileName": "backend/base/index.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 29,
			"name": "backend/database",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 52,
					"name": "DatabaseHttpStatusCode",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Possible response values when interacting with the database API."
					},
					"children": [
						{
							"id": 54,
							"name": "BAD_REQUEST",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "The server cannot or will not process the request due to an apparent client error",
								"text": "One of the following error conditions:\nUnable to parse data.\nMissing data.\nThe request attempts data that is too large.\nThe data contains invalid child names as part of the path.\nThe data path is too long.\nThe request contains an unrecognized server value.\nThe request does not support one of the query parameters that is specified.\nThe request mixes query parameters with a shallow request.\n"
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 59,
									"character": 13
								}
							],
							"defaultValue": "400"
						},
						{
							"id": 58,
							"name": "INTERNAL_SERVER_ERROR",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "A server error occurred."
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 84,
									"character": 23
								}
							],
							"defaultValue": "500"
						},
						{
							"id": 56,
							"name": "NOT_FOUND",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "The specified Database was not found."
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 74,
									"character": 11
								}
							],
							"defaultValue": "404"
						},
						{
							"id": 53,
							"name": "OK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "Standard response for successful HTTP requests."
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 44,
									"character": 4
								}
							],
							"defaultValue": "200"
						},
						{
							"id": 57,
							"name": "PRECONDITION_FAILED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "The request's specified ETag value in the if-match header did not match the server's value."
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 79,
									"character": 21
								}
							],
							"defaultValue": "412"
						},
						{
							"id": 59,
							"name": "SERVICE_UNAVAILABLE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "The specified Database is temporarily unavailable, which means the request was not attempted."
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 89,
									"character": 21
								}
							],
							"defaultValue": "503"
						},
						{
							"id": 55,
							"name": "UNAUTHORIZED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\nbeen provided.",
								"text": "One of the following error conditions:\nThe user token has expired or is missing.\nThe user token used in the request is invalid.\n"
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 69,
									"character": 14
								}
							],
							"defaultValue": "401"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								54,
								58,
								56,
								53,
								57,
								59,
								55
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 40,
							"character": 34
						}
					]
				},
				{
					"id": 30,
					"name": "DatabaseRoutes",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "API routes for database methods."
					},
					"children": [
						{
							"id": 31,
							"name": "ARRAY_PUSH",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 9,
									"character": 12
								}
							],
							"defaultValue": "\"/v1/store/update/push\""
						},
						{
							"id": 32,
							"name": "ARRAY_REMOVE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 10,
									"character": 14
								}
							],
							"defaultValue": "\"/v1/store/update/remove\""
						},
						{
							"id": 33,
							"name": "DELETE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 11,
									"character": 8
								}
							],
							"defaultValue": "\"/v1/store/delete\""
						},
						{
							"id": 34,
							"name": "GET",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 12,
									"character": 5
								}
							],
							"defaultValue": "\"/v1/store/get\""
						},
						{
							"id": 35,
							"name": "GET_ALL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 13,
									"character": 9
								}
							],
							"defaultValue": "\"/v1/store/getAll\""
						},
						{
							"id": 36,
							"name": "GET_ALL_WHERE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 14,
									"character": 15
								}
							],
							"defaultValue": "\"/v1/store/getAllWhere\""
						},
						{
							"id": 37,
							"name": "GET_COLLECTIONS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 15,
									"character": 17
								}
							],
							"defaultValue": "\"/v1/store/getCollections\""
						},
						{
							"id": 38,
							"name": "SEARCH",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 16,
									"character": 8
								}
							],
							"defaultValue": "\"/v1/store/search\""
						},
						{
							"id": 39,
							"name": "SET",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 17,
									"character": 5
								}
							],
							"defaultValue": "\"/v1/store/set\""
						},
						{
							"id": 40,
							"name": "UPDATE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 18,
									"character": 8
								}
							],
							"defaultValue": "\"/v1/store/update\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								31,
								32,
								33,
								34,
								35,
								36,
								37,
								38,
								39,
								40
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 8,
							"character": 26
						}
					]
				},
				{
					"id": 41,
					"name": "PredicateOperator",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Available operator types for database comparisons."
					},
					"children": [
						{
							"id": 48,
							"name": "ARRAY_CONTAINS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 31,
									"character": 16
								}
							],
							"defaultValue": "\"array-contains\""
						},
						{
							"id": 49,
							"name": "ARRAY_CONTAINS_ANY",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 32,
									"character": 20
								}
							],
							"defaultValue": "\"array-contains-any\""
						},
						{
							"id": 44,
							"name": "EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 27,
									"character": 10
								}
							],
							"defaultValue": "\"==\""
						},
						{
							"id": 45,
							"name": "GREATER_THAN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 28,
									"character": 14
								}
							],
							"defaultValue": "\">\""
						},
						{
							"id": 46,
							"name": "GREATER_THAN_OR_EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 29,
									"character": 26
								}
							],
							"defaultValue": "\">=\""
						},
						{
							"id": 50,
							"name": "IN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 33,
									"character": 4
								}
							],
							"defaultValue": "\"in\""
						},
						{
							"id": 42,
							"name": "LESS_THAN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 25,
									"character": 11
								}
							],
							"defaultValue": "\"<\""
						},
						{
							"id": 43,
							"name": "LESS_THAN_OR_EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 26,
									"character": 23
								}
							],
							"defaultValue": "\"<=\""
						},
						{
							"id": 47,
							"name": "NOT_EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 30,
									"character": 14
								}
							],
							"defaultValue": "\"!=\""
						},
						{
							"id": 51,
							"name": "NOT_IN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 34,
									"character": 8
								}
							],
							"defaultValue": "\"not-in\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								48,
								49,
								44,
								45,
								46,
								50,
								42,
								43,
								47,
								51
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 24,
							"character": 29
						}
					]
				},
				{
					"id": 60,
					"name": "Database",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements a Koji database for the backend of your Koji.",
						"text": "A Koji database is a key-value store that is included with each project on Koji.\nFor more information, see the [[https://developer.withkoji.com/docs/develop/koji-database | Koji database developer guide]].\n"
					},
					"children": [
						{
							"id": 70,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 71,
									"name": "new Database",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiates the Database class.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst database = new KojiBackend.Database({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 72,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 60,
										"name": "Database"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 61,
							"name": "valueTypes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isStatic": true
							},
							"comment": {
								"shortText": "Increments a numeric value by a specified amount. You can use this method to increment numeric values in the database with a single request. See [[update]].",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n\n// Increment a value (using a positive integer)\nconst updatedDoc = await database.update('collection', 'document', {\n  'myValue': KojiBackend.Database.valueTypes.increment(1),\n}, true);\n\n// Decrement a value (using a negative integer)\nconst updatedDoc = await database.update('collection', 'document', {\n  'myValue': KojiBackend.Database.valueTypes.increment(-1),\n}, true);\n\n```\n"
									}
								]
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 120,
									"character": 26
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 62,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 63,
											"name": "increment",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 64,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 65,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 66,
																	"name": "number",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 67,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 68,
																			"name": "_updateType",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			},
																			"defaultValue": "'increment'"
																		},
																		{
																			"id": 69,
																			"name": "value",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "number"
																			},
																			"defaultValue": "..."
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				68,
																				69
																			]
																		}
																	]
																}
															}
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												63
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 119,
							"name": "arrayPush",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 414,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 120,
									"name": "arrayPush",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds data onto arrays in an existing database entry.",
										"returns": "An HTTP status code indicating whether the request was successful, or the updated entry if `returnDoc` was set to `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst doc = await database.arrayPush('myCollection', 'myDocument', {\n array1: 'newValue1',\n array2: 'newValue2',\n}, true);\n\n// Updated document after arrayPush\ndoc = {\n array1: ['existingValue1', 'newValue1'],\n array2: ['existingValue2', 'newValue2'],\n}\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 121,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 122,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 123,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Key-value pairs of arrays and the entries to add to them."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 124,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Whether to return the updated entry as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 125,
							"name": "arrayRemove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 447,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 126,
									"name": "arrayRemove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes data from an existing database entry.",
										"returns": "An HTTP status code indicating whether the request was successful, or the updated entry if `returnDoc` was set to `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst isRemoved = await database.arrayRemove('myCollection', 'myDocument', {\n 'myData1': 'myValue1',\n 'myData2': 'myValue2'\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 127,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 128,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 129,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Data to remove from the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 130,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Whether to return the updated entry as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 131,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 475,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 132,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a database entry from a collection.",
										"returns": "An HTTP status code indicating whether the request was successful.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst isDeleted = await database.delete('myCollection', 'myDocument');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 133,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 134,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 52,
												"name": "DatabaseHttpStatusCode"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 75,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 164,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 76,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the specified database entry or collection of entries.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.get('myCollection');\nconst myEntry = await database.get('myCollection','myDoc');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 77,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 78,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 79,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 95,
							"name": "getAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 275,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 96,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the specified database entries.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAll<'myClass'>('myCollection', ['doc1', 'doc2']);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 97,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 98,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 99,
											"name": "documentNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of one or more entry names to retrieve."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 100,
							"name": "getAllWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 306,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 101,
									"name": "getAllWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValues.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAllWhere<'myClass'>('myCollection',\n 'myField', '==', ['mySearchValue1', 'mySearchValue2']);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 102,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 103,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 104,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of a field in the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 105,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Operator to use for the search."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 106,
											"name": "predicateValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of one or more search values."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 80,
							"name": "getCollections",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 187,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 81,
									"name": "getCollections",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of all collections available in the database.",
										"returns": "List containing the names of the collections.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst collections = await database.getCollections();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 88,
							"name": "getWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 244,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 89,
									"name": "getWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValue.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getWhere<'myClass'>('myCollection',\n 'myField', 'myOperator, 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 90,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 91,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 92,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the field to search."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 93,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Operator to use for the search."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 94,
											"name": "predicateValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 82,
							"name": "search",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 212,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 83,
									"name": "search",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that match the specified search criteria.\nThe search criteria are the search field and the search value.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.search<'myClass'>('myCollection', 'myField', 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 84,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 85,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 86,
											"name": "queryKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the search field."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 87,
											"name": "queryValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 107,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 339,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 108,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds an entry to a database collection.",
										"returns": "An HTTP status code indicating whether the request was successful, or the updated entry if `returnDoc` was set to `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.set('myCollection', 'myDocument', {\n 'myData1': 'myValue1',\n 'myData2': 'myValue2'\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 109,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 110,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 111,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Data for the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 112,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Whether to return the updated entry as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 113,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 375,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 114,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the specified data for an entry in the database collection.",
										"text": "<p class=\"note\">This method updates only the values that are specified in `documentBody`. If other values exist in the entry, they are not changed.\nIf no existing entry matches the `documentName`, a new entry is created with the specified `documentName` and `documentBody`.</p>\n",
										"returns": "An HTTP status code indicating whether the request was successful, or the updated entry if `returnDoc` was set to `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.update('myCollection', 'myDocument', {\n 'myData1': 'myValue1',\n 'myData2': 'myValue2'\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 115,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 116,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 117,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "New data."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 118,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Whether to return the updated entry as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								70
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								61
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								119,
								125,
								131,
								75,
								95,
								100,
								80,
								88,
								82,
								107,
								113
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 98,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 137,
							"name": "IDatabase"
						}
					]
				},
				{
					"id": 137,
					"name": "IDatabase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 182,
							"name": "arrayPush",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 414,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 183,
									"name": "arrayPush",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds data onto arrays in an existing database entry.",
										"returns": "An HTTP status code indicating whether the request was successful, or the updated entry if `returnDoc` was set to `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst doc = await database.arrayPush('myCollection', 'myDocument', {\n array1: 'newValue1',\n array2: 'newValue2',\n}, true);\n\n// Updated document after arrayPush\ndoc = {\n array1: ['existingValue1', 'newValue1'],\n array2: ['existingValue2', 'newValue2'],\n}\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 184,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 185,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 186,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Key-value pairs of arrays and the entries to add to them."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 187,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Whether to return the updated entry as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 120,
										"name": "Database.arrayPush"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 119,
								"name": "Database.arrayPush"
							}
						},
						{
							"id": 188,
							"name": "arrayRemove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 447,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 189,
									"name": "arrayRemove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes data from an existing database entry.",
										"returns": "An HTTP status code indicating whether the request was successful, or the updated entry if `returnDoc` was set to `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst isRemoved = await database.arrayRemove('myCollection', 'myDocument', {\n 'myData1': 'myValue1',\n 'myData2': 'myValue2'\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 190,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 191,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 192,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Data to remove from the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 193,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Whether to return the updated entry as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 126,
										"name": "Database.arrayRemove"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 125,
								"name": "Database.arrayRemove"
							}
						},
						{
							"id": 194,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 475,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 195,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a database entry from a collection.",
										"returns": "An HTTP status code indicating whether the request was successful.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst isDeleted = await database.delete('myCollection', 'myDocument');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 196,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 197,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 52,
												"name": "DatabaseHttpStatusCode"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 132,
										"name": "Database.delete"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 131,
								"name": "Database.delete"
							}
						},
						{
							"id": 138,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 164,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 139,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the specified database entry or collection of entries.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.get('myCollection');\nconst myEntry = await database.get('myCollection','myDoc');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 140,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 141,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 142,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 76,
										"name": "Database.get"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 75,
								"name": "Database.get"
							}
						},
						{
							"id": 158,
							"name": "getAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 275,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 159,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the specified database entries.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAll<'myClass'>('myCollection', ['doc1', 'doc2']);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 160,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 161,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 162,
											"name": "documentNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of one or more entry names to retrieve."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 96,
										"name": "Database.getAll"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 95,
								"name": "Database.getAll"
							}
						},
						{
							"id": 163,
							"name": "getAllWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 306,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 164,
									"name": "getAllWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValues.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAllWhere<'myClass'>('myCollection',\n 'myField', '==', ['mySearchValue1', 'mySearchValue2']);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 165,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 166,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 167,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of a field in the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 168,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Operator to use for the search."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 169,
											"name": "predicateValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of one or more search values."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 101,
										"name": "Database.getAllWhere"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 100,
								"name": "Database.getAllWhere"
							}
						},
						{
							"id": 143,
							"name": "getCollections",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 187,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 144,
									"name": "getCollections",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of all collections available in the database.",
										"returns": "List containing the names of the collections.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst collections = await database.getCollections();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 81,
										"name": "Database.getCollections"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 80,
								"name": "Database.getCollections"
							}
						},
						{
							"id": 151,
							"name": "getWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 244,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 152,
									"name": "getWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValue.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getWhere<'myClass'>('myCollection',\n 'myField', 'myOperator, 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 153,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 154,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 155,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the field to search."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 156,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Operator to use for the search."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 157,
											"name": "predicateValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 89,
										"name": "Database.getWhere"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 88,
								"name": "Database.getWhere"
							}
						},
						{
							"id": 145,
							"name": "search",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 212,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 146,
									"name": "search",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that match the specified search criteria.\nThe search criteria are the search field and the search value.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.search<'myClass'>('myCollection', 'myField', 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 147,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 148,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 149,
											"name": "queryKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the search field."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 150,
											"name": "queryValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 83,
										"name": "Database.search"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 82,
								"name": "Database.search"
							}
						},
						{
							"id": 170,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 339,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 171,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds an entry to a database collection.",
										"returns": "An HTTP status code indicating whether the request was successful, or the updated entry if `returnDoc` was set to `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.set('myCollection', 'myDocument', {\n 'myData1': 'myValue1',\n 'myData2': 'myValue2'\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 172,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 173,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 174,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Data for the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 175,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Whether to return the updated entry as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 108,
										"name": "Database.set"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 107,
								"name": "Database.set"
							}
						},
						{
							"id": 176,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 375,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 177,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the specified data for an entry in the database collection.",
										"text": "<p class=\"note\">This method updates only the values that are specified in `documentBody`. If other values exist in the entry, they are not changed.\nIf no existing entry matches the `documentName`, a new entry is created with the specified `documentName` and `documentBody`.</p>\n",
										"returns": "An HTTP status code indicating whether the request was successful, or the updated entry if `returnDoc` was set to `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.update('myCollection', 'myDocument', {\n 'myData1': 'myValue1',\n 'myData2': 'myValue2'\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 178,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 179,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 180,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "New data."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 181,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Whether to return the updated entry as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 114,
										"name": "Database.update"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 113,
								"name": "Database.update"
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								182,
								188,
								194,
								138,
								158,
								163,
								143,
								151,
								145,
								170,
								176
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 489,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 60,
							"name": "Database"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						52,
						30,
						41
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						60
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						137
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/database/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 28,
			"name": "backend/database/index.spec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"sources": [
				{
					"fileName": "backend/database/index.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 200,
			"name": "backend/dispatch",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 201,
					"name": "PlatformEvents",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Defines constants for Koji platform events."
					},
					"children": [
						{
							"id": 202,
							"name": "CONNECTED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 37,
									"character": 11
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED\""
						},
						{
							"id": 203,
							"name": "CONNECTED_CLIENTS_CHANGED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 38,
									"character": 27
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED_CLIENTS_CHANGED\""
						},
						{
							"id": 204,
							"name": "IDENTIFY",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 39,
									"character": 10
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/IDENTIFY\""
						},
						{
							"id": 205,
							"name": "SET_USER_INFO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 40,
									"character": 15
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/SET_USER_INFO\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								202,
								203,
								204,
								205
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 36,
							"character": 26
						}
					]
				},
				{
					"id": 226,
					"name": "Dispatch",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements a real-time messaging dispatch system for the backend of your Koji."
					},
					"children": [
						{
							"id": 227,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 228,
									"name": "new Dispatch",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiates the Dispatch class.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst dispatch = new KojiBackend.Dispatch({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 229,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 226,
										"name": "Dispatch"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 238,
							"name": "connect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 138,
									"character": 22
								}
							],
							"signatures": [
								{
									"id": 239,
									"name": "connect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Connects a client to a dispatch shard.",
										"returns": "Connection details, including the client ID and shard name.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myInfo = await dispatch.connect({\n maxConnectionsPerShard: '25',\n authorization: token\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 240,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DispatchConfigurationInput"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 223,
												"name": "ConnectionInfo"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 271,
							"name": "disconnect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 354,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 272,
									"name": "disconnect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Disconnects the client from the dispatch shard.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.disconnect();\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 263,
							"name": "emitEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 320,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 264,
									"name": "emitEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the named event to the specified recipients or to all clients.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.emitEvent('myEvent', myDataPayload);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 265,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the event."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 266,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object of key-value pair data to send as a message payload."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 267,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 268,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 269,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 270,
											"name": "recipients",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "List of clients to receive the event. If this parameter is not included, the event is sent to all clients on the current shard.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 260,
							"name": "identify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 302,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 261,
									"name": "identify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Identifies a connected client, which enables the server and other connected clients to send it secure messages.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst authToken = await identity.getToken();\ndispatch.identify(authToken.token);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 262,
											"name": "authToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Short-lived user token for the connected client. To get a user token, use [[Identity.getToken]].\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 236,
							"name": "info",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 116,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 237,
									"name": "info",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets information about the active dispatch shards.",
										"returns": "Array of objects containing information about the dispatch shards.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst shardInfo = await dispatch.info();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 220,
													"name": "ShardInfo"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 256,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 277,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 257,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a listener for a specific event, and invokes a callback function when the event is dispatched over the shard.",
										"returns": "Function to unsubscribe from the event listener.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nunsubscribeEvent = dispatch.on('eventName', callbackFunction);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 258,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the event to subscribe to."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 259,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to invoke when the event is fired.\n"
											},
											"type": {
												"type": "reference",
												"id": 210,
												"name": "MessageHandlerCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								227
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								238,
								271,
								263,
								260,
								236,
								256
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 84,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				},
				{
					"id": 223,
					"name": "ConnectionInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Connection details for a client. Returned when the client [[connect | connects to a dispatch shard]]."
					},
					"children": [
						{
							"id": 224,
							"name": "clientId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "ID of the connected client."
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 76,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 225,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Name of the dispatch shard that the client is connected to."
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 78,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								224,
								225
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 74,
							"character": 31
						}
					]
				},
				{
					"id": 206,
					"name": "MessageHandler",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a MessageHandler interface."
					},
					"children": [
						{
							"id": 209,
							"name": "callback",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 49,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 210,
								"name": "MessageHandlerCallback"
							}
						},
						{
							"id": 208,
							"name": "eventName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 48,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 207,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 47,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								209,
								208,
								207
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 46,
							"character": 31
						}
					]
				},
				{
					"id": 220,
					"name": "ShardInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Information about a dispatch shard."
					},
					"children": [
						{
							"id": 222,
							"name": "numConnectedClients",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Number of clients currently connected to the dispatch shard."
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 68,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 221,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Name of the dispatch shard."
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 66,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								222,
								221
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 64,
							"character": 26
						}
					]
				},
				{
					"id": 210,
					"name": "MessageHandlerCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 52,
							"character": 34
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 211,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"comment": {
								"shortText": "Function to handle a dispatch event. Invoked by the [[on]] listener."
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 52,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 212,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Function to handle a dispatch event. Invoked by the [[on]] listener."
									},
									"parameters": [
										{
											"id": 213,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Data payload sent with the fired event."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 214,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "backend/dispatch/index.ts",
															"line": 59,
															"character": 9
														}
													],
													"indexSignature": {
														"id": 215,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 216,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 217,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing additional information about the event, including the message latency in milliseconds.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 218,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 219,
															"name": "latencyMs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "backend/dispatch/index.ts",
																	"line": 59,
																	"character": 57
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																219
															]
														}
													],
													"sources": [
														{
															"fileName": "backend/dispatch/index.ts",
															"line": 59,
															"character": 45
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						201
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						226
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						223,
						206,
						220
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						210
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/dispatch/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 275,
			"name": "backend/iap",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 276,
					"name": "IapRoutes",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "API routes for iap methods."
					},
					"children": [
						{
							"id": 277,
							"name": "GET_PRODUCT_BY_SKU",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 10,
									"character": 20
								}
							],
							"defaultValue": "\"/v1/iap/consumer/getProductBySku\""
						},
						{
							"id": 278,
							"name": "RESOLVE_RECEIPTS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 11,
									"character": 18
								}
							],
							"defaultValue": "\"/v1/iap/consumer/resolveReceipts\""
						},
						{
							"id": 280,
							"name": "RESOLVE_RECEIPTS_BY_SKU",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 13,
									"character": 25
								}
							],
							"defaultValue": "\"/v1/iap/consumer/resolveReceiptsBySku\""
						},
						{
							"id": 279,
							"name": "RESOLVE_RECEIPT_BY_ID",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 12,
									"character": 23
								}
							],
							"defaultValue": "\"/v1/iap/consumer/resolveReceiptById\""
						},
						{
							"id": 281,
							"name": "UPDATE_RECEIPT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 14,
									"character": 16
								}
							],
							"defaultValue": "\"/v1/iap/consumer/updateReceiptAttributes\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								277,
								278,
								280,
								279,
								281
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 9,
							"character": 21
						}
					]
				},
				{
					"id": 295,
					"name": "IAP",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages in-app purchases on the backend of your Koji template."
					},
					"children": [
						{
							"id": 296,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 297,
									"name": "new IAP",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiates the IAP class.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst iap = new KojiBackend.IAP({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 298,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 295,
										"name": "IAP"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 318,
							"name": "loadProduct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 187,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 319,
									"name": "loadProduct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the properties of a specified product, which enables the template to leverage dynamic product information.\nFor example, you can check the stock for a product with limited quantity (via the `numAvailable` property), and indicate the number of remaining items.",
										"returns": "Properties of the specified product.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst product = await iap.loadProduct(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 320,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Identifier for the product."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 304,
							"name": "resolveReceiptById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 122,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 305,
									"name": "resolveReceiptById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a specific transaction receipt by its ID, which can be used to facilitate fulfillment.\nFor example, use a dynamic receipt to upload a video response from the seller and then share that response with the buyer.",
										"returns": "Object for the specified receipt.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipt = await iap.resolveReceiptById(id);\n\n// Use custom attributes for a video response\nthis.setState({\n instructions: receipt.attributes.message,\n video: receipt.attributes.video,\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 306,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Unique identifier for the receipt."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 282,
												"name": "IapReceipt"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 301,
							"name": "resolveReceiptsByIAPToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 88,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 302,
									"name": "resolveReceiptsByIAPToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all receipts for the current user, which can be used to validate purchases for specific products.",
										"returns": "Array of receipts for the user's purchases.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = await iap.resolveReceiptsByIAPToken(iapToken);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 303,
											"name": "iapToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Short-lived IAP token for the current user.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 282,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 307,
							"name": "resolveReceiptsBySku",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 140,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 308,
									"name": "resolveReceiptsBySku",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all receipts for a specified product, which can be used to aggregate sales data.",
										"returns": "Array of receipts for the specified product.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = await iap.resolveReceiptBySku(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 309,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Identifier for the product. Products are defined in the entitlements file and registered or updated when the template is published."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 282,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 310,
							"name": "updateReceipt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 161,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 311,
									"name": "updateReceipt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the custom attributes for a specified receipt.\nFor example, if a user purchases a \"power up\" and then uses it in a game, you can update the receipt to indicate that the product has been consumed and is not available for future sessions.",
										"returns": "Confirmation of the update, if the request was successful, or an error message, if not.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\niap.updateReceipt(id, { consumed: true }, 'You have successfully redeemed your purchase.');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 312,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Unique identifier for the receipt."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 313,
											"name": "attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object of key-value paired attributes to store with the receipt."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 314,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 315,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 316,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 317,
											"name": "notificationMessage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Custom message to sent the user when the receipt is updated (up to 80 characters). If undefined, the message will read: `Your receipt for PRODUCT_NAME was updated.`\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								296
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								318,
								304,
								301,
								307,
								310
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 49,
							"character": 16
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 323,
							"name": "IIAP"
						}
					]
				},
				{
					"id": 323,
					"name": "IIAP",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 341,
							"name": "loadProduct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 187,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 342,
									"name": "loadProduct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the properties of a specified product, which enables the template to leverage dynamic product information.\nFor example, you can check the stock for a product with limited quantity (via the `numAvailable` property), and indicate the number of remaining items.",
										"returns": "Properties of the specified product.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst product = await iap.loadProduct(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 343,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Identifier for the product."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 319,
										"name": "IAP.loadProduct"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 318,
								"name": "IAP.loadProduct"
							}
						},
						{
							"id": 327,
							"name": "resolveReceiptById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 122,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 328,
									"name": "resolveReceiptById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a specific transaction receipt by its ID, which can be used to facilitate fulfillment.\nFor example, use a dynamic receipt to upload a video response from the seller and then share that response with the buyer.",
										"returns": "Object for the specified receipt.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipt = await iap.resolveReceiptById(id);\n\n// Use custom attributes for a video response\nthis.setState({\n instructions: receipt.attributes.message,\n video: receipt.attributes.video,\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 329,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Unique identifier for the receipt."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 282,
												"name": "IapReceipt"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 305,
										"name": "IAP.resolveReceiptById"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 304,
								"name": "IAP.resolveReceiptById"
							}
						},
						{
							"id": 324,
							"name": "resolveReceiptsByIAPToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 88,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 325,
									"name": "resolveReceiptsByIAPToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all receipts for the current user, which can be used to validate purchases for specific products.",
										"returns": "Array of receipts for the user's purchases.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = await iap.resolveReceiptsByIAPToken(iapToken);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 326,
											"name": "iapToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Short-lived IAP token for the current user.\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 282,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 302,
										"name": "IAP.resolveReceiptsByIAPToken"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 301,
								"name": "IAP.resolveReceiptsByIAPToken"
							}
						},
						{
							"id": 330,
							"name": "resolveReceiptsBySku",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 140,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 331,
									"name": "resolveReceiptsBySku",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets all receipts for a specified product, which can be used to aggregate sales data.",
										"returns": "Array of receipts for the specified product.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = await iap.resolveReceiptBySku(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 332,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Identifier for the product. Products are defined in the entitlements file and registered or updated when the template is published."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 282,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 308,
										"name": "IAP.resolveReceiptsBySku"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 307,
								"name": "IAP.resolveReceiptsBySku"
							}
						},
						{
							"id": 333,
							"name": "updateReceipt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 161,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 334,
									"name": "updateReceipt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the custom attributes for a specified receipt.\nFor example, if a user purchases a \"power up\" and then uses it in a game, you can update the receipt to indicate that the product has been consumed and is not available for future sessions.",
										"returns": "Confirmation of the update, if the request was successful, or an error message, if not.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\niap.updateReceipt(id, { consumed: true }, 'You have successfully redeemed your purchase.');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 335,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Unique identifier for the receipt."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 336,
											"name": "attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object of key-value paired attributes to store with the receipt."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 337,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 338,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 339,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 340,
											"name": "notificationMessage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Custom message to sent the user when the receipt is updated (up to 80 characters). If undefined, the message will read: `Your receipt for PRODUCT_NAME was updated.`\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 311,
										"name": "IAP.updateReceipt"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 310,
								"name": "IAP.updateReceipt"
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								341,
								327,
								324,
								330,
								333
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 194,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 295,
							"name": "IAP"
						}
					]
				},
				{
					"id": 282,
					"name": "IapReceipt",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Receipt for a user’s purchase of a product.\nResolve receipts with [[resolveReceiptById]], [[resolveReceiptsByIAPToken]], or [[resolveReceiptsBySku]].\nAdd custom attributes for to a receipt with [[updateReceipt]]."
					},
					"children": [
						{
							"id": 286,
							"name": "attributes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Object containing a list of custom key-value pairs associated with the receipt.\nYou can use [[updateReceipt]] to update these values.\nAdditionally, the fulfillment information (email, phone, or address) and customMessage are included this object, if set at purchase time."
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 33,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 287,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 288,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 289,
												"name": "index",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							}
						},
						{
							"id": 294,
							"name": "datePurchased",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Date of the purchase"
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 43,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 284,
							"name": "productId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Unique identifier for the product."
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 26,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 285,
							"name": "purchasedPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Price the user paid for the product."
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 28,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 283,
							"name": "receiptId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Unique identifier for the receipt."
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 24,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 290,
							"name": "transactionIds",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Object containing references to the associated transaction receipts – `credit` for the user receiving the funds (seller), `debit` for the user sending the funds (buyer).\nTo link to the transaction receipt in the user’s Koji wallet, use the format `https://withkoji.com/payments/transactions/TXN_ID`."
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 38,
									"character": 16
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 291,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 292,
											"name": "credit",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "backend/iap/index.ts",
													"line": 39,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 293,
											"name": "debit",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "backend/iap/index.ts",
													"line": 40,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												292,
												293
											]
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								286,
								294,
								284,
								285,
								283,
								290
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 22,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						276
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						295
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						323,
						282
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/iap/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 346,
			"name": "backend/identity",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 347,
					"name": "AuthRoutes",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "API routes for auth methods."
					},
					"children": [
						{
							"id": 348,
							"name": "GET_GRANT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 10,
									"character": 11
								}
							],
							"defaultValue": "\"/v1/apps/auth/consumer/getGrantForToken\""
						},
						{
							"id": 349,
							"name": "GET_ROLE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 11,
									"character": 10
								}
							],
							"defaultValue": "\"/v1/apps/auth/consumer/getRoleForToken\""
						},
						{
							"id": 350,
							"name": "PUSH_NOTIFICATION",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 12,
									"character": 19
								}
							],
							"defaultValue": "\"/v1/apps/auth/consumer/pushNotification\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								348,
								349,
								350
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 9,
							"character": 22
						}
					]
				},
				{
					"id": 351,
					"name": "UserRole",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Possible values for a user's role within a Koji."
					},
					"children": [
						{
							"id": 352,
							"name": "ADMIN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 19,
									"character": 7
								}
							],
							"defaultValue": "\"admin\""
						},
						{
							"id": 353,
							"name": "UNKNOWN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 20,
									"character": 9
								}
							],
							"defaultValue": "\"unknown\""
						},
						{
							"id": 354,
							"name": "USER",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 21,
									"character": 6
								}
							],
							"defaultValue": "\"user\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								352,
								353,
								354
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 18,
							"character": 20
						}
					]
				},
				{
					"id": 371,
					"name": "Identity",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages authentication and authorization on the backend of your Koji template."
					},
					"children": [
						{
							"id": 372,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 373,
									"name": "new Identity",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiates the Identity class.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst identity = new KojiBackend.Identity({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 374,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 371,
										"name": "Identity"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 381,
							"name": "pushNotificationToOwner",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 134,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 382,
									"name": "pushNotificationToOwner",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": " Sends a notification to the Koji account of the user who created the Koji.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nawait identity.pushNotificationToOwner({\n icon: '❓',\n appName: 'Ask me anything',\n message: 'Someone asked you a question! Respond now',\n ref: '?context=admin',\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 383,
											"name": "notification",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Notification to send to the owner.\n"
											},
											"type": {
												"type": "reference",
												"id": 366,
												"name": "PushNotification"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 377,
							"name": "pushNotificationToUser",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 105,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 378,
									"name": "pushNotificationToUser",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a notification to the Koji account of a user who interacted with the Koji.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst user = identity.resolveUserFromToken(userToken);\n\nawait identity.pushNotificationToUser(user.id, {\n icon: '❓',\n appName: 'Ask me anything',\n message: 'Your custom video is ready! View now',\n ref: '?dynamic-receipt=buyer',\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 379,
											"name": "userId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "User’s unique ID for this Koji. To get the user's ID, see [[resolveUserFromToken]]."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 380,
											"name": "notification",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Notification to send to the user.\n"
											},
											"type": {
												"type": "reference",
												"id": 366,
												"name": "PushNotification"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 384,
							"name": "resolveUserFromToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 162,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 385,
									"name": "resolveUserFromToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the user's information for this Koji.",
										"returns": "Object containing information about the user.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\n// Get the user token (generated using the frontend identity module)\nconst userToken = req.headers.authorization;\n\nconst user = identity.resolveUserFromToken(userToken);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 386,
											"name": "token",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Short-lived token identifying the current user, which is generated with the frontend identity module. See [[getToken]]."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 355,
												"name": "User"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								372
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								381,
								377,
								384
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 60,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				},
				{
					"id": 366,
					"name": "PushNotification",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a notification to send to a user’s Koji account.\nSend notifications with [[pushNotificationToOwner]], for the user who created the Koji, or [[pushNotificationToUser]], for a user who interacts with the Koji and has granted the appropriate authorization."
					},
					"children": [
						{
							"id": 367,
							"name": "appName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Headline for the message. For example, the name of the Koji that generated the notification."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 48,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 368,
							"name": "icon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Icon to display next to the message, either the URL of an image or an emoji character."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 50,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 369,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Content of the message."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 52,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 370,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Query parameters to append to the Koji URL when the notification is tapped. For example, load the admin experience or a dynamic receipt from the notification."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 54,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								367,
								368,
								369,
								370
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 46,
							"character": 33
						}
					]
				},
				{
					"id": 355,
					"name": "User",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Information about a user of the Koji. To retrieve a user's information, use [[resolveUserFromToken]]."
					},
					"children": [
						{
							"id": 357,
							"name": "attributes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Object containing custom information about the user."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 31,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 358,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 359,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 360,
														"name": "index",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								]
							}
						},
						{
							"id": 361,
							"name": "dateCreated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Date the user's information was created or updated on this Koji."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 33,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 362,
							"name": "grants",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Object containing information about capabilities that the user has authorized this Koji to use."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 35,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 363,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 364,
													"name": "pushNotificationsEnabled",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "backend/identity/index.ts",
															"line": 36,
															"character": 28
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														364
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 356,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "User’s unique ID for this Koji."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 29,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 365,
							"name": "role",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "User’s role for this Koji – the owner/creator (`admin`), not the owner (`user`), or not logged in (`unknown`)."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 39,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"id": 352,
										"name": "ADMIN"
									},
									{
										"type": "reference",
										"id": 353,
										"name": "UNKNOWN"
									},
									{
										"type": "reference",
										"id": 354,
										"name": "USER"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								357,
								361,
								362,
								356,
								365
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 27,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						347,
						351
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						371
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						366,
						355
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/identity/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 407,
			"name": "backend/middleware",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 416,
					"name": "KojiConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration data for the Koji."
					},
					"children": [
						{
							"id": 420,
							"name": "@@initialTransform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Placeholder values for new remixes."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 11,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 418,
							"name": "deploy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for deploying the services to production."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 9,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 417,
							"name": "develop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for setting up the services in a development/editor environment."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 7,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 419,
							"name": "remixData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default values for the customizable remix data."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 11,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								420,
								418,
								417,
								419
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/middleware/index.ts",
							"line": 5,
							"character": 27
						}
					]
				},
				{
					"id": 408,
					"name": "middleware",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "backend/middleware/index.ts",
							"line": 45,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 409,
							"name": "middleware",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Executes an [[http://expressjs.com/en/guide/using-middleware.html | Express middleware]], making Koji-specific data available on the `res.locals` property.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\nconst app = express();\napp.use(Koji.middleware(require('koji.json'));\n\napp.get('/data', (req, res, next) => {\n  // Backend constructor\n  const database = new KojiBackend.Database({ res });\n  ...\n};\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 410,
									"name": "kojiConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Configuration data for the Koji.\n"
									},
									"type": {
										"type": "reference",
										"id": 416,
										"name": "KojiConfig"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 411,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 412,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 413,
													"name": "req",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "ParamsDictionary"
															},
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "reference",
																"name": "ParsedQs"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "Record"
															}
														],
														"name": "Request"
													}
												},
												{
													"id": 414,
													"name": "res",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "Record"
															}
														],
														"name": "Response"
													}
												},
												{
													"id": 415,
													"name": "next",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "NextFunction"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						416
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						408
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/middleware/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 421,
			"name": "backend/secret",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 422,
					"name": "Secret",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Handles sensitive data used in your Koji template."
					},
					"children": [
						{
							"id": 423,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 424,
									"name": "new Secret",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiates the Secret class.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst secret = new KojiBackend.Secret({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 425,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 422,
										"name": "Secret"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 432,
							"name": "generateSignedUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/secret/index.ts",
									"line": 87,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 433,
									"name": "generateSignedUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates a signed URL for securely serving a file, without exposing the permanent URI.\nThis method provides additional security against sharing or rehosting of protected content.",
										"returns": "Signed URL for the resource.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst temporaryImagePath = await secret.generateSignedUrl('https://images.koji-cdn.com/e83eaff0-279f-4403-951b-e56507af923d/userData/emfga-icon.png');\n\n// Blur the image\nconst temporaryBlurredImagePath = await secret.generateSignedUrl('https://images.koji-cdn.com/e83eaff0-279f-4403-951b-e56507af923d/userData/emfga-icon.png?blur=10');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 434,
											"name": "resource",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Full URL of the resource. If the resource is an image hosted on the  Koji CDN, you can pass in query parameters to transform it. For example, resize or crop the image."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 435,
											"name": "expireSeconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Amount of time for which the signed URL remains valid, in seconds. If undefined, signed videos expire after 1 hour, and any other resource expires after 5 minutes."
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 428,
							"name": "resolveValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/secret/index.ts",
									"line": 54,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 429,
									"name": "resolveValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Resolves sensitive data that was [[encryptValue | stored as an encrypted value]].",
										"returns": "Decrypted value.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst keyValue = await secret.resolveValue<string>(SecretRoutes.KEYSTORE_GET + \"/mySecretKey\");\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 430,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 431,
											"name": "keyPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Path where the encrypted value is stored."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								423
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								432,
								428
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/secret/index.ts",
							"line": 16,
							"character": 19
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						422
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/secret/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 438,
			"name": "backend/utilities",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 439,
					"name": "Utilities",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Provides utility methods for improving the performance and functionality of your Koji template."
					},
					"children": [
						{
							"id": 440,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 441,
									"name": "new Utilities",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"shortText": "Instantiates the Utilities class.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst utilities = new KojiBackend.Utilities({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 442,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 439,
										"name": "Utilities"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 445,
							"name": "unfreeze",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/utilities/index.ts",
									"line": 71,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 446,
									"name": "unfreeze",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Unfreezes a response that has been frozen with an `x-koji-freeze-key` header.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\napp.get('/loadPosts', async (req, res) => {\n   const posts = [{ value: 'postValue' }];\n\n   res.setHeader('x-koji-freeze-key', 'posts');\n   res.status(200).json({\n       posts,\n   });\n});\n\napp.post('/update', async (req, res) => {\n   // Update some data in the database\n   // await db.update....\n\n   // Unfreeze. The next request to /loadPosts will hit the server and get\n   // a fresh list of posts, which will then be frozen until unfreeze is\n   // called again.\n   await utilities.unfreeze('posts');\n\n   res.sendStatus(200);\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 447,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Key used to freeze the response.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								440
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								445
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/utilities/index.ts",
							"line": 15,
							"character": 22
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						439
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/utilities/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 639,
			"name": "frontend",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 652,
					"name": "Koji",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Provides frontend methods for your Koji."
					},
					"children": [
						{
							"id": 653,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 654,
									"name": "new Koji",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 652,
										"name": "Koji"
									}
								}
							]
						},
						{
							"id": 659,
							"name": "analytics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 53,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 457,
								"name": "Analytics"
							},
							"defaultValue": "..."
						},
						{
							"id": 656,
							"name": "configInitialized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Indicates that the Koji.config() call has been made."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 47,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 660,
							"name": "dispatch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 54,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 505,
								"name": "Dispatch"
							},
							"defaultValue": "..."
						},
						{
							"id": 661,
							"name": "iap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 55,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"id": 574,
								"name": "IAP"
							},
							"defaultValue": "..."
						},
						{
							"id": 662,
							"name": "identity",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 56,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 612,
								"name": "Identity"
							},
							"defaultValue": "..."
						},
						{
							"id": 655,
							"name": "isReady",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Indicates that the Koji.ready() call has been made."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 45,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 663,
							"name": "playerState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 57,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"id": 728,
								"name": "PlayerState"
							},
							"defaultValue": "..."
						},
						{
							"id": 658,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The project's id."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 51,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 664,
							"name": "remix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 58,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 764,
								"name": "Remix"
							},
							"defaultValue": "..."
						},
						{
							"id": 657,
							"name": "services",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "The configured service endpoints."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 49,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 645,
								"name": "Services"
							},
							"defaultValue": "..."
						},
						{
							"id": 665,
							"name": "ui",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 59,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 1058,
								"name": "UI"
							},
							"defaultValue": "..."
						},
						{
							"id": 666,
							"name": "config",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 77,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 667,
									"name": "config",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Initializes this package for use with configuration data from the `koji.json` file. This method sets up the services, remix values, development environment, and deployment instructions for your Koji template. It also performs some basic structural checks.",
										"text": "<p class=\"note\"> A template should initialize the package one time, before any data in the application is rendered.</p>\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nKoji.config(require('koji.json'));\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 668,
											"name": "kojiConfig",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Configuration data for the Koji.\n"
											},
											"type": {
												"type": "reference",
												"id": 640,
												"name": "KojiConfig"
											},
											"defaultValue": "..."
										},
										{
											"id": 669,
											"name": "kojiConfigOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 649,
												"name": "KojiConfigOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 682,
							"name": "ready",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 249,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 683,
									"name": "ready",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Indicates that the Koji is ready to start receiving events.",
										"text": "<p class=\"note\">You must call this function after initializing the package and subscribing to remix state changes, but before advancing to the preview with `Koji.remix.finish`.</p>\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.ready();\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								653
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								659,
								656,
								660,
								661,
								662,
								655,
								663,
								658,
								664,
								657,
								665
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								666,
								682
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 43,
							"character": 17
						}
					]
				},
				{
					"id": 640,
					"name": "KojiConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration data for the Koji."
					},
					"children": [
						{
							"id": 644,
							"name": "@@initialTransform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Placeholder values for new remixes."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 21,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 642,
							"name": "deploy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for deploying the services to production."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 19,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 641,
							"name": "develop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for setting up the services in a development/editor environment."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 17,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 643,
							"name": "remixData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default values for the customizable remix data."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								644,
								642,
								641,
								643
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 15,
							"character": 27
						}
					]
				},
				{
					"id": 649,
					"name": "KojiConfigOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for the Koji."
					},
					"children": [
						{
							"id": 650,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Unique identifier for the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 36,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 651,
							"name": "services",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Defines services for the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 645,
								"name": "Services"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								650,
								651
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 34,
							"character": 34
						}
					]
				},
				{
					"id": 645,
					"name": "Services",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Key-value pairs of services and endpoints."
					},
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 29,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 646,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 29,
									"character": 22
								}
							],
							"indexSignature": {
								"id": 647,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 648,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "undefined"
										}
									]
								}
							}
						}
					}
				},
				{
					"id": 684,
					"name": "default",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 652,
						"name": "Koji"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						652
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						640,
						649
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						645
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						684
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 450,
			"name": "frontend/@decorators/client",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 451,
					"name": "client",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"decorates": [
						{
							"type": "reference",
							"id": 460,
							"name": "track"
						},
						{
							"type": "reference",
							"id": 577,
							"name": "getToken"
						},
						{
							"type": "reference",
							"id": 579,
							"name": "startPurchase"
						},
						{
							"type": "reference",
							"id": 615,
							"name": "getToken"
						},
						{
							"type": "reference",
							"id": 682,
							"name": "ready"
						},
						{
							"type": "reference",
							"id": 735,
							"name": "onFocus"
						},
						{
							"type": "reference",
							"id": 738,
							"name": "onBlur"
						},
						{
							"type": "reference",
							"id": 741,
							"name": "subscribe"
						},
						{
							"type": "reference",
							"id": 770,
							"name": "init"
						},
						{
							"type": "reference",
							"id": 773,
							"name": "get"
						},
						{
							"type": "reference",
							"id": 778,
							"name": "set"
						},
						{
							"type": "reference",
							"id": 781,
							"name": "overwrite"
						},
						{
							"type": "reference",
							"id": 784,
							"name": "finish"
						},
						{
							"type": "reference",
							"id": 786,
							"name": "cancel"
						},
						{
							"type": "reference",
							"id": 788,
							"name": "encryptValue"
						},
						{
							"type": "reference",
							"id": 791,
							"name": "decryptValue"
						},
						{
							"type": "reference",
							"id": 1084,
							"name": "to"
						},
						{
							"type": "reference",
							"id": 1087,
							"name": "presentInModal"
						},
						{
							"type": "reference",
							"id": 1090,
							"name": "createRemix"
						},
						{
							"type": "reference",
							"id": 1093,
							"name": "edit"
						},
						{
							"type": "reference",
							"id": 1095,
							"name": "dismiss"
						},
						{
							"type": "reference",
							"id": 1097,
							"name": "openShareDialog"
						},
						{
							"type": "reference",
							"id": 1127,
							"name": "confirmation"
						},
						{
							"type": "reference",
							"id": 1130,
							"name": "alert"
						},
						{
							"type": "reference",
							"id": 1159,
							"name": "uploadFile"
						}
					],
					"sources": [
						{
							"fileName": "frontend/@decorators/client.ts",
							"line": 10,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 452,
							"name": "client",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Verifies that client-side methods are used only in frontend services of the Koji.",
								"returns": "Method's behavior or an error, if the method is being invoked in a node/backend environment.\n"
							},
							"parameters": [
								{
									"id": 453,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Class to which the method belongs."
									},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								},
								{
									"id": 454,
									"name": "propertyKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 455,
									"name": "descriptor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method's behavior (which can be mutated inside this function)."
									},
									"type": {
										"type": "reference",
										"name": "PropertyDescriptor"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						451
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/@decorators/client.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 456,
			"name": "frontend/analytics",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 457,
					"name": "Analytics",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Enables you to track custom events in your Koji templates.\nFor example, track `onClick` events for the links and buttons in a Koji.",
						"text": "To view the analytics data for a published Koji, click the **Koji** button and click **Analytics**.\nYou will see data for the custom events along with a standard set of built-in metrics, which are calculated from the Koji’s access logs.\n\n<p class=\"tip\">Analytics data is processed at frequent intervals throughout the day. If you are testing the custom events in a published template and you don’t see results at first, wait 10 minutes to account for data processing latency, and then check again.</p>\n"
					},
					"children": [
						{
							"id": 458,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 459,
									"name": "new Analytics",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 457,
										"name": "Analytics"
									}
								}
							]
						},
						{
							"id": 460,
							"name": "track",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/analytics/index.ts",
									"line": 30,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 461,
									"name": "track",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates an analytics event with the specified name and data payload, if applicable.",
										"returns": "Indicates whether the event was generated.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```javascript\nconst event = Koji.analytics.track('My Custom Event');\n\n// with optional payload\nconst event = Koji.analytics.track('Won game', { score: 120 });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 462,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the custom event."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 463,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "List of custom key-value pairs to save with the event."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 464,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 465,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 466,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								458
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								460
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/analytics/index.ts",
							"line": 12,
							"character": 22
						}
					]
				},
				{
					"id": 467,
					"name": "analytics",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/analytics/index.ts",
							"line": 44,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"id": 457,
						"name": "Analytics"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						457
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						467
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/analytics/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 468,
			"name": "frontend/dispatch",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 480,
					"name": "PlatformEvents",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Defines constants for Koji platform events."
					},
					"children": [
						{
							"id": 481,
							"name": "CONNECTED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 35,
									"character": 11
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED\""
						},
						{
							"id": 482,
							"name": "CONNECTED_CLIENTS_CHANGED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 36,
									"character": 27
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED_CLIENTS_CHANGED\""
						},
						{
							"id": 483,
							"name": "IDENTIFY",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 37,
									"character": 10
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/IDENTIFY\""
						},
						{
							"id": 484,
							"name": "SET_USER_INFO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 38,
									"character": 15
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/SET_USER_INFO\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								481,
								482,
								483,
								484
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 34,
							"character": 26
						}
					]
				},
				{
					"id": 505,
					"name": "Dispatch",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements a dispatch system for real-time communication on the frontend of your Koji template."
					},
					"children": [
						{
							"id": 506,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 507,
									"name": "new Dispatch",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 505,
										"name": "Dispatch"
									}
								}
							]
						},
						{
							"id": 520,
							"name": "connect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 137,
									"character": 22
								}
							],
							"signatures": [
								{
									"id": 521,
									"name": "connect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Connects a client to a dispatch shard.",
										"returns": "Connection details, including the client ID and shard name.\n\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myInfo = await Koji.dispatch.connect({\n maxConnectionsPerShard: '25',\n authorization: token\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 522,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 469,
												"name": "DispatchConfigurationInput"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 502,
												"name": "ConnectionInfo"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 563,
							"name": "disconnect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 396,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 564,
									"name": "disconnect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Disconnects the client from the dispatch shard.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.dispatch.disconnect();\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 555,
							"name": "emitEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 362,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 556,
									"name": "emitEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the named event to the specified recipients or to all clients.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.dispatch.emitEvent('myEvent', myDataPayload);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 557,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the event."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 558,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object of key-value pair data to send as a message payload."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 559,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 560,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 561,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 562,
											"name": "recipients",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "List of clients to receive the event. If this parameter is not included, the event is sent to all clients on the current shard.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 552,
							"name": "identify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 344,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 553,
									"name": "identify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Identifies a connected client, which enables the server and other connected clients to send it secure messages.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst { userToken, presumedRole, presumedAttributes  } = await Koji.identity.getToken();\nKoji.dispatch.identify(userToken);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 554,
											"name": "authToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Short-lived user token for the connected client. To get a user token, use [[Identity.getToken]].\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 515,
							"name": "info",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 102,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 516,
									"name": "info",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets information about the active dispatch shards.",
										"returns": "Array of objects containing information about the dispatch shards.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst shardInfo = await Koji.dispatch.info();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 499,
													"name": "ShardInfo"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 539,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 279,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 540,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a listener for a specific event, and invokes a callback function when the event is dispatched over the shard.",
										"returns": "Function to unsubscribe from the event listener.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nunsubscribeEvent = Koji.dispatch.on('eventName', callbackFunction);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 541,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the event to subscribe to."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 542,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to invoke when the event is fired.\n"
											},
											"type": {
												"type": "reference",
												"id": 489,
												"name": "MessageHandlerCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 543,
							"name": "onConnectClientsChanged",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 305,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 544,
									"name": "onConnectClientsChanged",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a listener for a change in connected clients (can be a new client, or an client updated via [[setUserInfo]]), and invokes a callback function when the event is dispatched over the shard.",
										"returns": "Function to unsubscribe from the event listener.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nunsubscribeEvent = Koji.dispatch.onConnectedClientsChanged(callbackFunction);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 545,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to invoke when the event is fired.\n"
											},
											"type": {
												"type": "reference",
												"id": 489,
												"name": "MessageHandlerCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 517,
							"name": "setProjectId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 117,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 518,
									"name": "setProjectId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the project ID for the dispatch service.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.dispatch.setProjectId(myProject);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 519,
											"name": "projectId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Unique identifier for the Koji project.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 546,
							"name": "setUserInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 329,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 547,
									"name": "setUserInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets user information that is sent with the payload whenever the client dispatches an event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.dispatch.setUserInfo({ avatar: userAvatar });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 548,
											"name": "userInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Data for the user information to set.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 549,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 550,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 551,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								506
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								520,
								563,
								555,
								552,
								515,
								539,
								543,
								517,
								546
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 82,
							"character": 21
						}
					]
				},
				{
					"id": 502,
					"name": "ConnectionInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Connection details for a client. Returned when the client [[Dispatch.connect | connects to a dispatch shard]]."
					},
					"children": [
						{
							"id": 503,
							"name": "clientId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "ID of the connected client."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 74,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 504,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Name of the dispatch shard that the client is connected to."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 76,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								503,
								504
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 72,
							"character": 31
						}
					]
				},
				{
					"id": 469,
					"name": "DispatchConfigurationInput",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a new connection."
					},
					"children": [
						{
							"id": 472,
							"name": "authorization",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Short-lived user token that identifies the client, so the server and other connected clients can send it secure messages. If this value is not included, you can [[identify | identify the client]] after it is connected."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 17,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 471,
							"name": "maxConnectionsPerShard",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Total clients to allow on a shard before it is full. When a shard is full, new clients are added to a new shard unless a different shard is explicitly set."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 15,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 470,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Name of the dispatch shard to use. If not specified, the client is added to a shard automatically."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 13,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								472,
								471,
								470
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 11,
							"character": 43
						}
					]
				},
				{
					"id": 473,
					"name": "DispatchOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a DispatchOptions interface."
					},
					"children": [
						{
							"id": 477,
							"name": "authorization",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 27,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 476,
							"name": "maxConnectionsPerShard",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 26,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 474,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 24,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 475,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 25,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								477,
								476,
								474,
								475
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 23,
							"character": 32
						}
					],
					"indexSignature": {
						"id": 478,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"comment": {
							"shortText": "Defines a DispatchOptions interface."
						},
						"parameters": [
							{
								"id": 479,
								"name": "index",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 485,
					"name": "MessageHandler",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a MessageHandler interface."
					},
					"children": [
						{
							"id": 488,
							"name": "callback",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 47,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 489,
								"name": "MessageHandlerCallback"
							}
						},
						{
							"id": 487,
							"name": "eventName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 46,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 486,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 45,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								488,
								487,
								486
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 44,
							"character": 31
						}
					]
				},
				{
					"id": 499,
					"name": "ShardInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Information about a dispatch shard."
					},
					"children": [
						{
							"id": 501,
							"name": "numConnectedClients",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Number of clients currently connected to the dispatch shard."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 66,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 500,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Name of the dispatch shard."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 64,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								501,
								500
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 62,
							"character": 26
						}
					]
				},
				{
					"id": 489,
					"name": "MessageHandlerCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 50,
							"character": 34
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 490,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"comment": {
								"shortText": "Function to handle a dispatch event. Invoked by the [[Dispatch.on | on]] listener."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 50,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 491,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Function to handle a dispatch event. Invoked by the [[Dispatch.on | on]] listener."
									},
									"parameters": [
										{
											"id": 492,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Data payload sent with the fired event."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 493,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "frontend/dispatch/index.ts",
															"line": 57,
															"character": 9
														}
													],
													"indexSignature": {
														"id": 494,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 495,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 496,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing additional information about the event, including the message latency in milliseconds.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 497,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 498,
															"name": "latencyMs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "frontend/dispatch/index.ts",
																	"line": 57,
																	"character": 57
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																498
															]
														}
													],
													"sources": [
														{
															"fileName": "frontend/dispatch/index.ts",
															"line": 57,
															"character": 45
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 565,
					"name": "dispatch",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 402,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"id": 505,
						"name": "Dispatch"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						480
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						505
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						502,
						469,
						473,
						485,
						499
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						489
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						565
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/dispatch/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 566,
			"name": "frontend/iap",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 574,
					"name": "IAP",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages in-app purchase transactions on the frontend of your Koji."
					},
					"children": [
						{
							"id": 575,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 576,
									"name": "new IAP",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 574,
										"name": "IAP"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 688,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 687,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 577,
							"name": "getToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 42,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 578,
									"name": "getToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates an IAP token for the current user that can be used to resolve receipts on the backend.",
										"returns": "Short-lived IAP token for the current user.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n``` javascript\nconst iapToken = await Koji.iap.getToken();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 579,
							"name": "startPurchase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 72,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 580,
									"name": "startPurchase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to purchase a product from the Koji. Products are defined in the entitlements file and registered or updated when the Koji is published.",
										"returns": "Results of the in-app purchase transaction.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n``` javascript\nconst purchase = await Koji.iap.startPurchase(sku);\n\n// with optional parameters\nconst purchase = await Koji.iap.startPurchase(sku, { customMessage: 'Your power up has been added' }, { isConsumed: false });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 581,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Identifier for the product to purchase."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 582,
											"name": "purchaseOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Optional information to add to the transaction receipt."
											},
											"type": {
												"type": "reference",
												"id": 567,
												"name": "PurchaseOptions"
											},
											"defaultValue": "..."
										},
										{
											"id": 583,
											"name": "customAttributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Optional key-value pairs to associate with the receipt. These attribute values can be referenced or updated at a later date.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 584,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 585,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 586,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 570,
												"name": "Purchase"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								575
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								577,
								579
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 30,
							"character": 16
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 686,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 570,
					"name": "Purchase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Results of an in-app purchase transaction."
					},
					"children": [
						{
							"id": 572,
							"name": "iapToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Short-lived IAP token for the current user. See [[getToken]]."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 22,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 573,
							"name": "receiptId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Unique identifier for the receipt, if the purchase was successful, or `undefined`, if not."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 24,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 571,
							"name": "success",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates whether the purchase was successful."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 20,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								572,
								573,
								571
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 18,
							"character": 25
						}
					]
				},
				{
					"id": 567,
					"name": "PurchaseOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Optional information to add to a [[IapReceipt | transaction receipt]] for a given in-app purchase."
					},
					"children": [
						{
							"id": 568,
							"name": "amount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Amount of the purchase."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 10,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 569,
							"name": "customMessage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Custom message associated with the purchase. This value is stored as a custom attribute on the [[IapReceipt | transaction receipt]]."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 12,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								568,
								569
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 8,
							"character": 32
						}
					]
				},
				{
					"id": 601,
					"name": "iap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 97,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 574,
						"name": "IAP"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						574
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						570,
						567
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						601
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/iap/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 603,
			"name": "frontend/identity",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 612,
					"name": "Identity",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages authentication and authorization on the frontend of your Koji."
					},
					"children": [
						{
							"id": 613,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 614,
									"name": "new Identity",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 612,
										"name": "Identity"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 688,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 687,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 617,
							"name": "checkGrants",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 79,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 618,
									"name": "checkGrants",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks whether the user has granted authorizations to the Koji. Use this method to determine whether to request authorization for certain capabilities.",
										"returns": "Indicates whether the user has already granted authorization for the capabilities.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst hasGrant = await Koji.identity.checkGrants(['username', 'push_notifications']);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 619,
											"name": "grants",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "List of authorization grants to check for the user."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 604,
													"name": "AuthGrantCapability"
												}
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 615,
							"name": "getToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 48,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 616,
									"name": "getToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a token identifying the current user.",
										"returns": "Identity information for the current user of the Koji.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst { userToken, presumedRole, presumedAttributes  } = await Koji.identity.getToken()\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 605,
												"name": "IdentityResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 620,
							"name": "requestGrants",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 103,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 621,
									"name": "requestGrants",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Requests the specified authorization grants from the user for the Koji.",
										"returns": "Indicates whether authorization for the capabilities was successfully obtained from the user.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst hasGrant = await Koji.identity.requestGrants(['username', 'push_notifications']);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 622,
											"name": "grants",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "List of authorization grants to request from the user."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 604,
													"name": "AuthGrantCapability"
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 623,
											"name": "usageDescription",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Custom message to display when requesting the grant.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								613
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								617,
								615,
								620
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 36,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 686,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 605,
					"name": "IdentityResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Identity information for the current user of the Koji."
					},
					"children": [
						{
							"id": 608,
							"name": "presumedAttributes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Additional user attributes, which are returned if the user has granted username authorization via [[requestGrants]]."
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 25,
									"character": 20
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 609,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 611,
											"name": "profilePicture",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Koji avatar for the user."
											},
											"sources": [
												{
													"fileName": "frontend/identity/index.ts",
													"line": 29,
													"character": 18
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 610,
											"name": "username",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Koji username for the user."
											},
											"sources": [
												{
													"fileName": "frontend/identity/index.ts",
													"line": 27,
													"character": 12
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												611,
												610
											]
										}
									]
								}
							}
						},
						{
							"id": 607,
							"name": "presumedRole",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Presumed role of the current user as the owner/creator (`admin`), not the owner (`user`), or not logged in (`unknown`).\nAdmin actions must still be secured on the backend by resolving the user’s role."
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 23,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "admin"
									},
									{
										"type": "literal",
										"value": "user"
									},
									{
										"type": "literal",
										"value": "unknown"
									}
								]
							}
						},
						{
							"id": 606,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Short-lived token to identify the user."
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								608,
								607,
								606
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 17,
							"character": 31
						}
					]
				},
				{
					"id": 604,
					"name": "AuthGrantCapability",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Capabilities that a user can grant the current Koji authorization to use."
					},
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 8,
							"character": 31
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "push_notifications"
							},
							{
								"type": "literal",
								"value": "username"
							}
						]
					}
				},
				{
					"id": 638,
					"name": "identity",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 116,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"id": 612,
						"name": "Identity"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						612
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						605
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						604
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						638
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/identity/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 602,
			"name": "frontend/identity/index.spec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"sources": [
				{
					"fileName": "frontend/identity/index.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 685,
			"name": "frontend/kojiBridge",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 686,
					"name": "KojiBridge",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Enables communication between the platform and the Koji."
					},
					"children": [
						{
							"id": 687,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 688,
									"name": "new KojiBridge",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 686,
										"name": "KojiBridge"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								687
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/kojiBridge/index.ts",
							"line": 20,
							"character": 23
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 574,
							"name": "IAP"
						},
						{
							"type": "reference",
							"id": 612,
							"name": "Identity"
						},
						{
							"type": "reference",
							"id": 728,
							"name": "PlayerState"
						},
						{
							"type": "reference",
							"id": 764,
							"name": "Remix"
						},
						{
							"type": "reference",
							"id": 930,
							"name": "Capture"
						},
						{
							"type": "reference",
							"id": 1058,
							"name": "UI"
						},
						{
							"type": "reference",
							"id": 1081,
							"name": "Navigate"
						},
						{
							"type": "reference",
							"id": 1124,
							"name": "Present"
						},
						{
							"type": "reference",
							"id": 1156,
							"name": "Upload"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						686
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/kojiBridge/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 703,
			"name": "frontend/playerState",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 728,
					"name": "PlayerState",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages the state of the Koji player to enable distinct experiences for different users and views."
					},
					"children": [
						{
							"id": 729,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 730,
									"name": "new PlayerState",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 728,
										"name": "PlayerState"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 688,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 687,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 731,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Context of the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 75,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"id": 704,
								"name": "PlayerStateContext"
							},
							"defaultValue": "'default'"
						},
						{
							"id": 733,
							"name": "hasFocus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Focus state of the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 79,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 734,
							"name": "presentationStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Presentation style of the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 81,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 706,
								"name": "PlayerPresentationStyle"
							},
							"defaultValue": "'fullscreen'"
						},
						{
							"id": 732,
							"name": "receiptType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Type of receipt."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 77,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "buyer"
									},
									{
										"type": "literal",
										"value": "seller"
									}
								]
							}
						},
						{
							"id": 738,
							"name": "onBlur",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 151,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 739,
									"name": "onBlur",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens for when a Koji leaves focus and invokes a callback function to respond to the focus state change.",
										"returns": "Function to unsubscribe from the onBlur listener.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst unsubscribeBlur = Koji.playerState.onBlur((blur) => {\n // Change Koji experience\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 740,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to handle when the Koji leaves focus.\n"
											},
											"type": {
												"type": "reference",
												"id": 722,
												"name": "BlurCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 735,
							"name": "onFocus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 128,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 736,
									"name": "onFocus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens for when a Koji enters focus and invokes a callback function to respond to the focus state change.",
										"returns": "Function to unsubscribe from the onFocus listener.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst unsubscribeFocus = Koji.playerState.onFocus((focus) => {\n // Change Koji experience\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 737,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to handle when the Koji enters focus.\n"
											},
											"type": {
												"type": "reference",
												"id": 725,
												"name": "FocusCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 741,
							"name": "subscribe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 174,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 742,
									"name": "subscribe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens to changes in remix state and invokes a callback function to enable different experiences during remix, preview, or use.",
										"returns": "Function to unsubscribe from the remix state listener.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst unsubscribe = Koji.playerState.subscribe((remixing, { type, mode }) => {\n // Change Koji experience\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 743,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to handle changes in remix state.\n"
											},
											"type": {
												"type": "reference",
												"id": 717,
												"name": "IsRemixingCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								729
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								731,
								733,
								734,
								732
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								738,
								735,
								741
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 73,
							"character": 24
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 686,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 713,
					"name": "EditorAttributes",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Describes the remixer's editor."
					},
					"children": [
						{
							"id": 715,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 45,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "edit"
									},
									{
										"type": "literal",
										"value": "new"
									}
								]
							}
						},
						{
							"id": 714,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "[[EditorType]]"
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 44,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "instant"
									},
									{
										"type": "literal",
										"value": "full"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								715,
								714
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 42,
							"character": 33
						}
					]
				},
				{
					"id": 707,
					"name": "ExpectedQueryParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "URL query parameters that describe the current state of the Koji player."
					},
					"children": [
						{
							"id": 708,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "admin"
									},
									{
										"type": "literal",
										"value": "about"
									},
									{
										"type": "literal",
										"value": "remix"
									},
									{
										"type": "literal",
										"value": "sticker"
									},
									{
										"type": "literal",
										"value": "receipt"
									},
									{
										"type": "literal",
										"value": "screenshot"
									},
									{
										"type": "literal",
										"value": "default"
									}
								]
							}
						},
						{
							"id": 709,
							"name": "dynamic-receipt",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 25,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "buyer"
									},
									{
										"type": "literal",
										"value": "seller"
									}
								]
							}
						},
						{
							"id": 710,
							"name": "presentationStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 27,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "fullscreen"
									},
									{
										"type": "literal",
										"value": "popover"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								708,
								709,
								710
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 24,
							"character": 40
						}
					]
				},
				{
					"id": 722,
					"name": "BlurCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 62,
							"character": 24
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 723,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"comment": {
								"shortText": "Function to handle when the Koji leaves focus. Invoked by the [[onBlur]] listener."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 62,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 724,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Function to handle when the Koji leaves focus. Invoked by the [[onBlur]] listener."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 712,
					"name": "EditorMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Distinguishes between a `new` remix and an `edit` to the user’s existing Koji."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 37,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "edit"
							},
							{
								"type": "literal",
								"value": "new"
							}
						]
					}
				},
				{
					"id": 711,
					"name": "EditorType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Type of editor, either `instant` for an instant remix or `full` for the code editor."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 33,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "instant"
							},
							{
								"type": "literal",
								"value": "full"
							}
						]
					}
				},
				{
					"id": 725,
					"name": "FocusCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 66,
							"character": 25
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 726,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"comment": {
								"shortText": "Function to handle when the Koji enters focus. Invoked by the [[onFocus]] listener."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 66,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 727,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Function to handle when the Koji enters focus. Invoked by the [[onFocus]] listener."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 717,
					"name": "IsRemixingCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 53,
							"character": 30
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 718,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"comment": {
								"shortText": "Function to handle changes in remix state. Invoked by the [[subscribe]] listener."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 53,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 719,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Function to handle changes in remix state. Invoked by the [[subscribe]] listener."
									},
									"parameters": [
										{
											"id": 720,
											"name": "isRemixing",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether the Koji is in remixing mode."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 721,
											"name": "editorAttributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 713,
												"name": "EditorAttributes"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 706,
					"name": "PlayerPresentationStyle",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Presentation style of the Koji, either in a modal window (`popover`) or the standard player (`fullscreen`).\nThe popover presentation style does not display the Koji button, so the Koji can use the full view."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 19,
							"character": 35
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "fullscreen"
							},
							{
								"type": "literal",
								"value": "popover"
							}
						]
					}
				},
				{
					"id": 704,
					"name": "PlayerStateContext",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Context in which the Koji is being viewed. A Koji can provide a distinct experience for each context."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 8,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "about"
							},
							{
								"type": "literal",
								"value": "admin"
							},
							{
								"type": "literal",
								"value": "remix"
							},
							{
								"type": "literal",
								"value": "sticker"
							},
							{
								"type": "literal",
								"value": "receipt"
							},
							{
								"type": "literal",
								"value": "screenshot"
							},
							{
								"type": "literal",
								"value": "default"
							}
						]
					}
				},
				{
					"id": 705,
					"name": "PlayerStateReceiptType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "View of the receipt for a transaction, either `buyer` or `seller`."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 13,
							"character": 34
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "buyer"
							},
							{
								"type": "literal",
								"value": "seller"
							}
						]
					}
				},
				{
					"id": 716,
					"name": "ReceiptType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Who is viewing the receipt for a transaction, either `buyer` or `seller`."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 51,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "seller"
							},
							{
								"type": "literal",
								"value": "buyer"
							}
						]
					}
				},
				{
					"id": 758,
					"name": "playerState",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 181,
							"character": 24
						}
					],
					"type": {
						"type": "reference",
						"id": 728,
						"name": "PlayerState"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						728
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						713,
						707
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						722,
						712,
						711,
						725,
						717,
						706,
						704,
						705,
						716
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						758
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/playerState/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 759,
			"name": "frontend/remix",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 764,
					"name": "Remix",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages the remixing experience for your Koji."
					},
					"children": [
						{
							"id": 765,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 766,
									"name": "new Remix",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 764,
										"name": "Remix"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 688,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 687,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 786,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 177,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 787,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancels the remix experience and returns the user to where they were before they started remixing. If the user has made changes, they are prompted to confirm this action.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.remix.cancel();\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 791,
							"name": "decryptValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 223,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 792,
									"name": "decryptValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves sensitive data that was [[encryptValue | stored as an encrypted value]].",
										"text": "<p class=\"note\">Only the creator of the Koji can access the decrypted value with this method. For example, to check that the value was entered correctly. To retrieve the value for other users, use [[resolveValue]] on the backend.</p>\n",
										"returns": "Decrypted value.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst value = await Koji.remix.decryptValue(encryptPath);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 793,
											"name": "encryptedValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Path where the encrypted value is stored."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 788,
							"name": "encryptValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 195,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 789,
									"name": "encryptValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stores sensitive data as an encrypted value. The sensitive data can only be accessed programmatically and is not available when the Koji is remixed.",
										"returns": "Path where the encrypted value is stored. Use this value to [[decryptValue | decrypt the value]] on the frontend, for the creator, or to [[resolveValue | resolve the value]] on the backend, for other users.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst encryptPath = await Koji.remix.encryptValue(text);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 790,
											"name": "rawValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value to encrypt."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 784,
							"name": "finish",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 160,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 785,
									"name": "finish",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Advances the Koji from remix to preview.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```html\n<button onClick={() => Koji.remix.finish()}>\n Next\n</button>\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 773,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 100,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 774,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the remix data for the Koji.",
										"returns": "Object containing the current remix data.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\n\n// Return the entire `remixData` object\nconst values = Koji.remix.get();\n\n// Return a particular value\nconst backgroundColor = Koji.remix.get(['colors', 'background']);\n\n// Return a particular value with a default if the value is not defined\nconst textColor = Koji.remix.get(['colors', 'text'], '#000000');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 775,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 776,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Array of keys to target a specific value in the object."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 777,
											"name": "defaultValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Value to return if no value exists at the targeted path."
											},
											"type": {
												"type": "reference",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 770,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 60,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 771,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Initializes the remix data for the Koji with default values.",
										"text": "<p class=\"note\">In most cases, you do not need to call this method manually because it is automatically called when you initialize the package with `Koji.config`.\nUse this method only if you want to use the Remix class by itself, without any other classes in the package.</p>\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nimport { remixData } from '../../koji.json;\n\nKoji.remix.init(remixData));\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 772,
											"name": "remixData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing the default values for your Koji.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 781,
							"name": "overwrite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 144,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 782,
									"name": "overwrite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Replaces all remix data with the specified object.",
										"text": "<p class=\"note\">This method overwrites all existing values in the remix data.\nTo update specific values only, use [[set]].</p>\n",
										"returns": "Indicates whether the remix data was successfully replaced.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nawait Koji.remix.overwrite({'myColor': color, 'myText': text});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 783,
											"name": "newValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing the new remix data for the Koji."
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 778,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 120,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 779,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the specified values in the remix data.",
										"text": "<p class=\"note\">This method updates only the values that are specified in `newValue`. If other values exist, they are not changed. To replace all remix data, use [[overwrite]].</p>\n",
										"returns": "Indicates whether the values were successfully updated.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nawait Koji.remix.set({'myColor': color});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 780,
											"name": "newValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Key-value pairs to update in the remix data."
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								765
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								786,
								791,
								788,
								784,
								773,
								770,
								781,
								778
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/remix/index.ts",
							"line": 26,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 686,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 760,
					"name": "ValueChanged",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Communicates changes to remix data."
					},
					"children": [
						{
							"id": 762,
							"name": "newValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "New value."
							},
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 18,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 761,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Path of the changed value."
							},
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 16,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 763,
							"name": "savedValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Previous value."
							},
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 20,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								762,
								761,
								763
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/remix/index.ts",
							"line": 14,
							"character": 29
						}
					]
				},
				{
					"id": 810,
					"name": "remix",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/remix/index.ts",
							"line": 259,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"id": 764,
						"name": "Remix"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						764
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						760
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						810
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/remix/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 811,
			"name": "frontend/serviceMap",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 816,
					"name": "ServiceMap",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages endpoints for the services running in your Koji."
					},
					"children": [
						{
							"id": 817,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 818,
									"name": "new ServiceMap",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 816,
										"name": "ServiceMap"
									}
								}
							]
						},
						{
							"id": 819,
							"name": "services",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Key-value pairs of services and endpoints."
							},
							"sources": [
								{
									"fileName": "frontend/serviceMap/index.ts",
									"line": 9,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 812,
								"name": "Services"
							},
							"defaultValue": "..."
						},
						{
							"id": 820,
							"name": "config",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/serviceMap/index.ts",
									"line": 23,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 821,
									"name": "config",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the environment variables for the available services in the Koji. This method automatically scopes the variables for instant remixes of the original Koji.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.serviceMap.config({\n frontend: process.env.KOJI_SERVICE_URL_frontend\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 822,
											"name": "envMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Key-value pairs of services and endpoints in the original Koji.\n"
											},
											"type": {
												"type": "reference",
												"id": 812,
												"name": "Services"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								817
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								819
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								820
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/serviceMap/index.ts",
							"line": 7,
							"character": 23
						}
					]
				},
				{
					"id": 812,
					"name": "Services",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Key-value pairs of services and endpoints."
					},
					"sources": [
						{
							"fileName": "frontend/serviceMap/index.ts",
							"line": 2,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 813,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/serviceMap/index.ts",
									"line": 2,
									"character": 22
								}
							],
							"indexSignature": {
								"id": 814,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 815,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					}
				},
				{
					"id": 823,
					"name": "serviceMap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/serviceMap/index.ts",
							"line": 43,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"id": 816,
						"name": "ServiceMap"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						816
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						812
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						823
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/serviceMap/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1057,
			"name": "frontend/ui",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1058,
					"name": "UI",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Defines the user interface for KojiBridge."
					},
					"children": [
						{
							"id": 1059,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1060,
									"name": "new UI",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1058,
										"name": "UI"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 688,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 687,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 1061,
							"name": "capture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/index.ts",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 930,
								"name": "Capture"
							},
							"defaultValue": "..."
						},
						{
							"id": 1062,
							"name": "navigate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/index.ts",
									"line": 12,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1081,
								"name": "Navigate"
							},
							"defaultValue": "..."
						},
						{
							"id": 1063,
							"name": "present",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/index.ts",
									"line": 13,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 1124,
								"name": "Present"
							},
							"defaultValue": "..."
						},
						{
							"id": 1064,
							"name": "upload",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/index.ts",
									"line": 14,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 1156,
								"name": "Upload"
							},
							"defaultValue": "..."
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1059
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1061,
								1062,
								1063,
								1064
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/index.ts",
							"line": 10,
							"character": 15
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 686,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 1079,
					"name": "ui",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/index.ts",
							"line": 17,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"id": 1058,
						"name": "UI"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1058
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1079
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 824,
			"name": "frontend/ui/capture",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 838,
					"name": "CaptureStatus",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Whether the user completed the selection (`succeeded`) or exited the control without selecting a value (`cancelled`)."
					},
					"children": [
						{
							"id": 840,
							"name": "CANCELLED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 35,
									"character": 11
								}
							],
							"defaultValue": "\"cancelled\""
						},
						{
							"id": 839,
							"name": "SUCCEEDED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 34,
									"character": 11
								}
							],
							"defaultValue": "\"succeeded\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								840,
								839
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 33,
							"character": 25
						}
					]
				},
				{
					"id": 841,
					"name": "CaptureType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Capture method types."
					},
					"children": [
						{
							"id": 842,
							"name": "COLOR",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 40,
									"character": 7
								}
							],
							"defaultValue": "\"color\""
						},
						{
							"id": 843,
							"name": "FILE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 41,
									"character": 6
								}
							],
							"defaultValue": "\"file\""
						},
						{
							"id": 844,
							"name": "IMAGE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 42,
									"character": 7
								}
							],
							"defaultValue": "\"image\""
						},
						{
							"id": 845,
							"name": "LINK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 43,
									"character": 6
								}
							],
							"defaultValue": "\"link\""
						},
						{
							"id": 846,
							"name": "MEDIA",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 44,
									"character": 7
								}
							],
							"defaultValue": "\"media\""
						},
						{
							"id": 847,
							"name": "RANGE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 45,
									"character": 7
								}
							],
							"defaultValue": "\"range\""
						},
						{
							"id": 848,
							"name": "SELECT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 46,
									"character": 8
								}
							],
							"defaultValue": "\"select\""
						},
						{
							"id": 849,
							"name": "SOUND",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 47,
									"character": 7
								}
							],
							"defaultValue": "\"audio\""
						},
						{
							"id": 850,
							"name": "VIDEO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 48,
									"character": 7
								}
							],
							"defaultValue": "\"video\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								842,
								843,
								844,
								845,
								846,
								847,
								848,
								849,
								850
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 39,
							"character": 23
						}
					]
				},
				{
					"id": 930,
					"name": "Capture",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Captures user input on the frontend of your Koji."
					},
					"children": [
						{
							"id": 931,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 932,
									"name": "new Capture",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 930,
										"name": "Capture"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 688,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 687,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 942,
							"name": "audio",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 299,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 943,
									"name": "audio",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a sound by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method when you want to limit the user to selecting a sound.",
										"text": "To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n",
										"returns": "URL to the audio asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst audio = await Koji.ui.capture.audio();\n\n// Hide asset packs and return an object\nconst audio = await Koji.ui.capture.audio({ hideExtensions: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 944,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 923,
												"name": "CaptureAudioOptions"
											}
										},
										{
											"id": 945,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the audio asset as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 826,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 946,
									"name": "audio",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 947,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 923,
												"name": "CaptureAudioOptions"
											}
										},
										{
											"id": 948,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 949,
									"name": "audio",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 950,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 923,
												"name": "CaptureAudioOptions"
											}
										},
										{
											"id": 951,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 825,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 952,
							"name": "color",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 356,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 953,
									"name": "color",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a color, either from a swatch or by entering a color code. Supports HEX, RGB, or HSL by default. Supports RBGA or HSLA, if transparency is enabled in the capture options.",
										"returns": "Color code as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst color = await Koji.ui.capture.color();\n\n// Enable transparency and return an object\nconst color = await Koji.ui.capture.color({ allowAlpha: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 954,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 876,
												"name": "CaptureColorOptions"
											}
										},
										{
											"id": 955,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the color code as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 826,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 956,
									"name": "color",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 957,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 876,
												"name": "CaptureColorOptions"
											}
										},
										{
											"id": 958,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 959,
									"name": "color",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 960,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 876,
												"name": "CaptureColorOptions"
											}
										},
										{
											"id": 961,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 825,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 962,
							"name": "custom",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 391,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 963,
									"name": "custom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a value from a custom control. To build a custom control, use the [[https://developer.withkoji.com/reference/packages/customvcc/withkoji-custom-vcc-sdk | @withkoji/custom-vcc-sdk package]].",
										"returns": "Color code as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst music = await Koji.ui.capture.custom({ name: 'scloud' });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 964,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 872,
												"name": "CaptureCustomOptions"
											}
										},
										{
											"id": 965,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the value captured by the custom control."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 826,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 966,
									"name": "custom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 967,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 872,
												"name": "CaptureCustomOptions"
											}
										},
										{
											"id": 968,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 969,
									"name": "custom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 970,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 872,
												"name": "CaptureCustomOptions"
											}
										},
										{
											"id": 971,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 972,
							"name": "file",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 433,
									"character": 6
								}
							],
							"signatures": [
								{
									"id": 973,
									"name": "file",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to upload a file of any type. Use this method to allow the user to upload raw files in their original format. For example, to capture high-resolution images for download rather than for display in a browser.",
										"text": "To apply automatic transcoding and transformations for specific file types, use the associated method. See [[image]], [[video]], [[audio]], or [[media]].\n",
										"returns": "URL to the file as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst file = await Koji.ui.capture.file();\n\n// Return an object\nconst file = await Koji.ui.capture.file({}, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 974,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 902,
												"name": "CaptureFileOptions"
											}
										},
										{
											"id": 975,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the file as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 826,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 976,
									"name": "file",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 977,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 902,
												"name": "CaptureFileOptions"
											}
										},
										{
											"id": 978,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 979,
									"name": "file",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 980,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 902,
												"name": "CaptureFileOptions"
											}
										},
										{
											"id": 981,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 825,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 982,
							"name": "image",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 491,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 983,
									"name": "image",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select an image by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method when you want to limit the user to selecting an image.",
										"text": "To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n",
										"returns": "URL to the image asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst image = await Koji.ui.capture.image();\n\n// Hide asset packs and return an object\nconst image = await Koji.ui.capture.image({ hideExtensions: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 984,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 879,
												"name": "CaptureImageOptions"
											}
										},
										{
											"id": 985,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the image asset as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 826,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 986,
									"name": "image",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 987,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 879,
												"name": "CaptureImageOptions"
											}
										},
										{
											"id": 988,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 989,
									"name": "image",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 990,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 879,
												"name": "CaptureImageOptions"
											}
										},
										{
											"id": 991,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 825,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 992,
							"name": "link",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 549,
									"character": 6
								}
							],
							"signatures": [
								{
									"id": 993,
									"name": "link",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to paste an external URL, create a new Koji from a template, or select an existing\nKoji from their profile.",
										"returns": "URL as a string or the [[VerboseCapture]] object, if `verbose` is `true`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst link = await Koji.ui.capture.link();\n\n// Return an object\nconst link = await Koji.ui.capture.link({}, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 994,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 903,
												"name": "CaptureLinkOptions"
											}
										},
										{
											"id": 995,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL as a string.\n"
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 826,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 996,
									"name": "link",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 997,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 903,
												"name": "CaptureLinkOptions"
											}
										},
										{
											"id": 998,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 999,
									"name": "link",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1000,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 903,
												"name": "CaptureLinkOptions"
											}
										},
										{
											"id": 1001,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 825,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1002,
							"name": "media",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 590,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 1003,
									"name": "media",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select an image, file, audio, or video by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method to allow the user to select from more than one type of media with a single control. For example, allow the user to select an image or a video. You can limit the types of media to allow and configure options for each allowed type.",
										"returns": "Value of the media capture, which is either the URL to the media as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst media = await Koji.ui.capture.media();\n\n// Limit to image or video, hide asset packs,\n// return an object with extended metadata, transcode videos for HLS\nconst media = await Koji.ui.capture.media({\n   acceptOnly: ['image', 'video'],\n   hideExtensions: true,\n   videoOptions: { hls: true }\n }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1004,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 925,
												"name": "CaptureMediaOptions"
											}
										},
										{
											"id": 1005,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns only the value of the media capture."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 826,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1006,
									"name": "media",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1007,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 925,
												"name": "CaptureMediaOptions"
											}
										},
										{
											"id": 1008,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1009,
									"name": "media",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1010,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 925,
												"name": "CaptureMediaOptions"
											}
										},
										{
											"id": 1011,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 825,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1012,
							"name": "range",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 646,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 1013,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a numeric value within a certain range.\nYou can configure the minimum value, maximum value, and default increment, as well as an initial value for the control.",
										"returns": "Numeric value as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst size = await Koji.ui.capture.range();\n\n// Return an object\nconst size = await Koji.ui.capture.range({ min: 0, max: 60, step: 3 }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1014,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 906,
												"name": "CaptureRangeOptions"
											}
										},
										{
											"id": 1015,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the numeric value as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 826,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1016,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1017,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 906,
												"name": "CaptureRangeOptions"
											}
										},
										{
											"id": 1018,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1019,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1020,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 906,
												"name": "CaptureRangeOptions"
											}
										},
										{
											"id": 1021,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 825,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1022,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 689,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 1023,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select from a predefined list of options.",
										"returns": "Value of the predefined option as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst option = await Koji.ui.capture.select();\n\n// Select from three options\nconst option = await Koji.ui.capture.select(\n { options: [\n   { value: \"one\", label: \"Option one\" },\n   { value: \"two\", label: \"Option two\" },\n   { value: \"three\", label: \"Option three\" }],\n   placeholder: \"Choose an option\"});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1024,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 914,
												"name": "CaptureSelectOptions"
											}
										},
										{
											"id": 1025,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the option as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 826,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1026,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1027,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 914,
												"name": "CaptureSelectOptions"
											}
										},
										{
											"id": 1028,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1029,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1030,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 914,
												"name": "CaptureSelectOptions"
											}
										},
										{
											"id": 1031,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 825,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1032,
							"name": "video",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 729,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 1033,
									"name": "video",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to upload a video. Use this method when you want to limit the user to uploading a video file.",
										"text": "To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n",
										"returns": "URL to the video asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst video = await Koji.ui.capture.video();\n\n// Transcode for HLS and return an object\nconst video = await Koji.ui.capture.video({ hls: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1034,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 919,
												"name": "CaptureVideoOptions"
											}
										},
										{
											"id": 1035,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the video asset as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 826,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1036,
									"name": "video",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1037,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 919,
												"name": "CaptureVideoOptions"
											}
										},
										{
											"id": 1038,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1039,
									"name": "video",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1040,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 919,
												"name": "CaptureVideoOptions"
											}
										},
										{
											"id": 1041,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 825,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								931
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								942,
								952,
								962,
								972,
								982,
								992,
								1002,
								1012,
								1022,
								1032
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 221,
							"character": 20
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 686,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 923,
					"name": "CaptureAudioOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for an [[audio]] capture."
					},
					"children": [
						{
							"id": 924,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium audios)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 201,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								924
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 199,
							"character": 36
						}
					]
				},
				{
					"id": 876,
					"name": "CaptureColorOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[color]] capture."
					},
					"children": [
						{
							"id": 877,
							"name": "allowAlpha",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates whether to support transparency (`false`, by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 115,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 878,
							"name": "initialValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default value for the color capture control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 117,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								877,
								878
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 113,
							"character": 36
						}
					]
				},
				{
					"id": 872,
					"name": "CaptureCustomOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[custom]] capture."
					},
					"children": [
						{
							"id": 873,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Short name for the custom control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 103,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 875,
							"name": "typeOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Type options specific to the custom control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 107,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 874,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "URL where the custom control is hosted."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 105,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								873,
								875,
								874
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 101,
							"character": 37
						}
					]
				},
				{
					"id": 902,
					"name": "CaptureFileOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[file]] capture."
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 131,
							"character": 35
						}
					]
				},
				{
					"id": 879,
					"name": "CaptureImageOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for an [[image]] capture."
					},
					"children": [
						{
							"id": 881,
							"name": "auto",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Enables image optimizations based on content negotiation.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/auto | Fastly auto reference]].\n\n<p class=\"note\">Although the WebP format produces images at a higher compression ratio with a lower loss of quality, it is not supported in all browsers.</p>\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 13,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1182,
								"name": "FastlyOptions.auto"
							}
						},
						{
							"id": 882,
							"name": "bg-color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sets the background color to use when applying padding or when replacing transparent pixels in the image.",
								"text": "The value can be in HEX 3- and 6-digit format (for example, `a22` or `cf23a5`), RGB format (for example,  `255,0,0`), or RGBA format (for example, `0,255,0,0.5`).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/bg-color | Fastly bg-color reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 13,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1183,
								"name": "FastlyOptions.bg-color"
							}
						},
						{
							"id": 883,
							"name": "blur",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a Gaussian blur filter to the image.",
								"text": "The value can be a number of pixels between 0.5 and 1000 (for example, `50`), or a percentage followed by `p` (for example, `1p` for 1%).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/blur | Fastly blur reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1184,
								"name": "FastlyOptions.blur"
							}
						},
						{
							"id": 884,
							"name": "brightness",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases or decreases the brightness of the image.",
								"text": "The value can be a number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `100` – Results in a fully white image.\n* `-100` – Results in a fully black image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/brightness | Fastly brightness reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 41,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1185,
								"name": "FastlyOptions.brightness"
							}
						},
						{
							"id": 885,
							"name": "contrast",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases or decreases the difference between the darkest and lightest tones in the image.",
								"text": "The value can be a number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `-100` – Results in a fully grey image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/contrast | Fastly contrast reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 52,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1186,
								"name": "FastlyOptions.contrast"
							}
						},
						{
							"id": 886,
							"name": "crop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image.",
								"text": "The value starts with the desired width and height of the final image.\nThe rest of the value determines the position of the cropped region within the existing image.\nFor example: `150,100,x50,y50`\tcrops the image to 150px by 100px and selects the starting sub region x coordinate to be 50px and the y coordinate to be 50px. `16:9`\tcrops the image to an aspect ratio of 16:9.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/crop | Fastly crop reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 62,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1187,
								"name": "FastlyOptions.crop"
							}
						},
						{
							"id": 887,
							"name": "dpr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Serves correctly sized images for devices that expose a device pixel ratio.",
								"text": "The value can be any number between 1 and 10.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/dpr | Fastly dpr reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 70,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1188,
								"name": "FastlyOptions.dpr"
							}
						},
						{
							"id": 888,
							"name": "fit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Controls how the image will be constrained within the provided size (width and height) values to maintain the correct proportions.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/fit | Fastly fit reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 76,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "bounds"
									},
									{
										"type": "literal",
										"value": "cover"
									},
									{
										"type": "literal",
										"value": "crop"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1189,
								"name": "FastlyOptions.fit"
							}
						},
						{
							"id": 889,
							"name": "format",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Converts the image to the specified encoded format.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/format | Fastly format reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 82,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									},
									{
										"type": "literal",
										"value": "gif"
									},
									{
										"type": "literal",
										"value": "png"
									},
									{
										"type": "literal",
										"value": "png8"
									},
									{
										"type": "literal",
										"value": "jpg"
									},
									{
										"type": "literal",
										"value": "pjpg"
									},
									{
										"type": "literal",
										"value": "bjpg"
									},
									{
										"type": "literal",
										"value": "webpll"
									},
									{
										"type": "literal",
										"value": "webply"
									},
									{
										"type": "literal",
										"value": "mp4"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1190,
								"name": "FastlyOptions.format"
							}
						},
						{
							"id": 890,
							"name": "frame",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Extracts the first frame from an animated image sequence.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/frame | Fastly frame reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 88,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1191,
								"name": "FastlyOptions.frame"
							}
						},
						{
							"id": 891,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Resizes the height of the image based on pixels or percent.",
								"text": "For absolute heights, set an integer number of pixels.\nFor relative heights (percent), set a value between 0 and 1 or a value between 0 and 100 followed by `p` (for example, `0.5` or `50p` for 50 percent).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/height | Fastly height reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 97,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1192,
								"name": "FastlyOptions.height"
							}
						},
						{
							"id": 880,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium images)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 125,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 892,
							"name": "optimize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies optimal quality compression to produce an output image with as much visual fidelity as possible, while minimizing the file size.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/optimize | Fastly optimize reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 103,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "low"
									},
									{
										"type": "literal",
										"value": "medium"
									},
									{
										"type": "literal",
										"value": "high"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1193,
								"name": "FastlyOptions.optimize"
							}
						},
						{
							"id": 893,
							"name": "orient",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Changes the cardinal orientation of the image.",
								"text": "The value can orient the image right or left, flip it horizontally, flip it vertically, or apply a combination of these options.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/orient | Fastly orient reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 111,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									},
									{
										"type": "literal",
										"value": "r"
									},
									{
										"type": "literal",
										"value": "l"
									},
									{
										"type": "literal",
										"value": "h"
									},
									{
										"type": "literal",
										"value": "v"
									},
									{
										"type": "literal",
										"value": "hv"
									},
									{
										"type": "literal",
										"value": "2"
									},
									{
										"type": "literal",
										"value": "3"
									},
									{
										"type": "literal",
										"value": "4"
									},
									{
										"type": "literal",
										"value": "5"
									},
									{
										"type": "literal",
										"value": "6"
									},
									{
										"type": "literal",
										"value": "7"
									},
									{
										"type": "literal",
										"value": "8"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1194,
								"name": "FastlyOptions.orient"
							}
						},
						{
							"id": 894,
							"name": "pad",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds pixels to the edge of an image.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/pad | Fastly pad reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 117,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1195,
								"name": "FastlyOptions.pad"
							}
						},
						{
							"id": 895,
							"name": "precrop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image before any other transformations occur.",
								"text": "The value is specified in the same way as `crop`, except that `precrop` is performed before any other transformations.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/precrop | Fastly precrop reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 125,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1196,
								"name": "FastlyOptions.precrop"
							}
						},
						{
							"id": 896,
							"name": "quality",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Optimizes the image to the given compression level for lossy file formatted images.",
								"text": "The value can be any integer between 1 and 100, where 1 is a lower quality image and a smaller file and 100 is the highest quality image and larger file.\nAn optional second quality level can be specified for use when auto=webp is enabled and a WebP output format has been selected.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/quality | Fastly quality reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 134,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1197,
								"name": "FastlyOptions.quality"
							}
						},
						{
							"id": 897,
							"name": "resize-filter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Controls the filter used to resize an image to a higher or lower number of pixels.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/resize-filter | Fastly resize-filter reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 134,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "nearest"
									},
									{
										"type": "literal",
										"value": "linear"
									},
									{
										"type": "literal",
										"value": "cubic"
									},
									{
										"type": "literal",
										"value": "lanczos2"
									},
									{
										"type": "literal",
										"value": "lanczos3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1198,
								"name": "FastlyOptions.resize-filter"
							}
						},
						{
							"id": 898,
							"name": "saturation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sets the intensity of the colors in the image.",
								"text": "The value can be any number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `-100` – Generates a grayscale image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/saturation | Fastly saturation reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 151,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1199,
								"name": "FastlyOptions.saturation"
							}
						},
						{
							"id": 899,
							"name": "sharpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases the definition of the edges of objects in the image.",
								"text": "The value specifies the amount, radius, and threshold for an unsharp mask (for example, `a5,r2,t0`).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/sharpen | Fastly sharpen reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 159,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1200,
								"name": "FastlyOptions.sharpen"
							}
						},
						{
							"id": 900,
							"name": "trim",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from the edge of the image.",
								"text": "The value can be specified in pixels or percent.\nFor example: `25,50,75,100` trims the top edge 25px, right edge 50px, bottom edge 75px, and left edge 100px.\n`0.25`\ttrims all edges by 25 percent.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/trim | Fastly trim reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 169,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1201,
								"name": "FastlyOptions.trim"
							}
						},
						{
							"id": 901,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Resizes the width of the image based on pixels or percent.",
								"text": "For absolute widths, set an integer number of pixels between 1 and 8192.\nFor relative widths (percent), set a value between 0 and 1 or a value between 0 and 100 followed by p (for example, `0.5` or `50p` for 50 percent).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/width | Fastly width reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 178,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1202,
								"name": "FastlyOptions.width"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								881,
								882,
								883,
								884,
								885,
								886,
								887,
								888,
								889,
								890,
								891,
								880,
								892,
								893,
								894,
								895,
								896,
								897,
								898,
								899,
								900,
								901
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 123,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 1181,
							"name": "FastlyOptions"
						}
					]
				},
				{
					"id": 903,
					"name": "CaptureLinkOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[link]] capture."
					},
					"children": [
						{
							"id": 905,
							"name": "disableExternalLinks",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to prevent users from pasting an external link. If `true`, users can select only one of their Kojis."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 140,
									"character": 22
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 904,
							"name": "kojiTemplateId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Template store ID of a Koji template. Include this value to enable the user to create a new Koji from the link control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 138,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								905,
								904
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 136,
							"character": 35
						}
					]
				},
				{
					"id": 925,
					"name": "CaptureMediaOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[media]] capture."
					},
					"children": [
						{
							"id": 926,
							"name": "acceptOnly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the types of media files to allow. If empty or not specified, any type of file is allowed."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 209,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 918,
											"name": "CaptureMediaAcceptOnly"
										}
									}
								]
							}
						},
						{
							"id": 927,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium media files)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 211,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 929,
							"name": "imageOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the configuration options for image files."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 215,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"id": 879,
										"name": "CaptureImageOptions"
									}
								]
							}
						},
						{
							"id": 928,
							"name": "videoOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the configuration options for video files."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 213,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"id": 919,
										"name": "CaptureVideoOptions"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								926,
								927,
								929,
								928
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 207,
							"character": 36
						}
					]
				},
				{
					"id": 831,
					"name": "CaptureMessage",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 832,
							"name": "_idempotencyKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 25,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 833,
							"name": "event",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 26,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 834,
							"name": "result",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "T"
							}
						},
						{
							"id": 835,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 28,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 838,
								"name": "CaptureStatus"
							}
						},
						{
							"id": 836,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"id": 841,
								"name": "CaptureType"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								832,
								833,
								834,
								835,
								836
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 24,
							"character": 31
						}
					],
					"typeParameter": [
						{
							"id": 837,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					]
				},
				{
					"id": 906,
					"name": "CaptureRangeOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[range]] capture."
					},
					"children": [
						{
							"id": 910,
							"name": "initialValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default value for the range capture control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 154,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 908,
							"name": "max",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Maximum value. Default is `100`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 150,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 907,
							"name": "min",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Minimum value. Default is `0`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 148,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 909,
							"name": "step",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default increment/step size. Default is `1`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 152,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								910,
								908,
								907,
								909
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 146,
							"character": 36
						}
					]
				},
				{
					"id": 914,
					"name": "CaptureSelectOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[select]] capture."
					},
					"children": [
						{
							"id": 917,
							"name": "initialValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default value for the select capture control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 176,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 916,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "List of predefined options."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 174,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 911,
											"name": "SelectOption"
										}
									}
								]
							}
						},
						{
							"id": 915,
							"name": "placeholder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Description of the selection for users."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 172,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								917,
								916,
								915
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 170,
							"character": 37
						}
					]
				},
				{
					"id": 919,
					"name": "CaptureVideoOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[video]] capture."
					},
					"children": [
						{
							"id": 921,
							"name": "estimatePoses",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Generates pose detection data. When enabled, pose data is available after upload by appending `.poses` to the returned file URL. For example, `https://objects.koji-cdn.com/project-id/my-video.mp4.poses`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 191,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 922,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium videos)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 193,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 920,
							"name": "hls",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Enables HTTP Live Streaming (HLS) for delivery of longer content. When enabled, uploaded videos are transcoded for HLS and return an m3u8 playlist. Use this feature in conjunction with [[https://github.com/video-dev/hls.js/ | hls.js]] for controlling playback."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 189,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								921,
								922,
								920
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 187,
							"character": 36
						}
					]
				},
				{
					"id": 865,
					"name": "ExtendedLinkResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Extended metadata for a [[link]] capture."
					},
					"children": [
						{
							"id": 868,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Sharing metadata description (`og:description`) of the content at the URL, if available."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 89,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 870,
							"name": "sourceName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If the resource is a Koji, the Koji’s name, if available."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 93,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 871,
							"name": "sourceThumbnailUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If the resource is a Koji, the URL of the Koji’s thumbnail image, if available."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 95,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 869,
							"name": "thumbnailUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Sharing metadata image (`og:image`) of the content at the URL, if available."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 91,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 867,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Sharing metadata title (`og:title`) of the content at the URL, if available."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 87,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 866,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Full URL of the selected Koji or pasted link resource."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 85,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								868,
								870,
								871,
								869,
								867,
								866
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 83,
							"character": 35
						}
					]
				},
				{
					"id": 851,
					"name": "ExtendedMediaResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Extended metadata for a [[media]] capture."
					},
					"children": [
						{
							"id": 858,
							"name": "audioMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata for an audio file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 67,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 859,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 860,
													"name": "durationSeconds",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Duration in seconds for an audio file."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 69,
															"character": 19
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														860
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 861,
							"name": "imageMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata for an image file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 72,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 862,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 864,
													"name": "naturalHeight",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Natural height of the image in pixels."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 76,
															"character": 17
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 863,
													"name": "naturalWidth",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Natural width of the image in pixels."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 74,
															"character": 16
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														864,
														863
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 854,
							"name": "sizeBytes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Size in bytes of the media file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 60,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 853,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Type of media: `image`, `video`, `audio`, or `file`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 852,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "URL of the selected media file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 56,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 855,
							"name": "videoMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata for a video file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 62,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 856,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 857,
													"name": "thumbnailUrl",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "URL for the video thumbnail."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 64,
															"character": 16
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														857
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								858,
								861,
								854,
								853,
								852,
								855
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 54,
							"character": 36
						}
					]
				},
				{
					"id": 911,
					"name": "SelectOption",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "One of the predefined options for a [[select]] capture."
					},
					"children": [
						{
							"id": 913,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Description of the option for users."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 164,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 912,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Value to return if the option is selected."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 162,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								913,
								912
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 160,
							"character": 29
						}
					]
				},
				{
					"id": 826,
					"name": "VerboseCapture",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Extended result of a user input capture."
					},
					"children": [
						{
							"id": 827,
							"name": "captureStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether the user completed the selection (`succeeded`) or exited the control without selecting a value (`cancelled`)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 15,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"id": 838,
								"name": "CaptureStatus"
							}
						},
						{
							"id": 828,
							"name": "captureType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Capture method type (for example, `color` or `file`)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 17,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"id": 841,
								"name": "CaptureType"
							}
						},
						{
							"id": 829,
							"name": "result",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Value captured from the user."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 19,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 830,
							"name": "resultMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata associated with the captured result."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 21,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"id": 851,
										"name": "ExtendedMediaResult"
									},
									{
										"type": "reference",
										"id": 865,
										"name": "ExtendedLinkResult"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								827,
								828,
								829,
								830
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 13,
							"character": 31
						}
					]
				},
				{
					"id": 918,
					"name": "CaptureMediaAcceptOnly",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Types of files to allow for a [[media]] capture. The [[CaptureMediaOptions | configuration options]] vary by media type."
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 182,
							"character": 34
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "image"
							},
							{
								"type": "literal",
								"value": "video"
							},
							{
								"type": "literal",
								"value": "audio"
							},
							{
								"type": "literal",
								"value": "file"
							}
						]
					}
				},
				{
					"id": 825,
					"name": "CaptureResult",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Result of a user input capture."
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 8,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"id": 826,
								"name": "VerboseCapture"
							}
						]
					}
				},
				{
					"id": 1056,
					"name": "capture",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 772,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"id": 930,
						"name": "Capture"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						838,
						841
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						930
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						923,
						876,
						872,
						902,
						879,
						903,
						925,
						831,
						906,
						914,
						919,
						865,
						851,
						911,
						826
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						918,
						825
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1056
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/capture/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1080,
			"name": "frontend/ui/navigate",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1081,
					"name": "Navigate",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Provides methods for controlling navigation within your Koji template."
					},
					"children": [
						{
							"id": 1082,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1083,
									"name": "new Navigate",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1081,
										"name": "Navigate"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 688,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 687,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 1090,
							"name": "createRemix",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 67,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 1091,
									"name": "createRemix",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts a new remix.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```html\n<button type=\"button\" onClick={() => Koji.ui.navigate.createRemix()}>\n  Create my own remix\n</button>\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1092,
											"name": "appId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "ID of the Koji project to remix. Defaults to the current Koji, if an ID is not specified.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1095,
							"name": "dismiss",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 110,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1096,
									"name": "dismiss",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes a Koji that is open in a modal window.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```html\n<button type=\"button\" onClick={() => Koji.ui.navigate.dismiss()}>\n  Close window\n</button>\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1093,
							"name": "edit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 92,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 1094,
									"name": "edit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens the Koji in the editing experience.",
										"text": "<p class=\"note\"> Check that the current user is an admin before calling this method.\nOtherwise, the user will not be authorized to edit the Koji.</p>\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```html\n<button type=\"button\" onClick={() => Koji.ui.navigate.edit()}>\n  Edit this Koji\n</button>\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1097,
							"name": "openShareDialog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 140,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 1098,
									"name": "openShareDialog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens the sharing dialog box. By default, the dialog box shares the URL of the current Koji. Specify a full or a relative URL to open a dialog box for sharing a different URL or for a deep link into your Koji.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```html\n<button type=\"button\" onClick={() => Koji.ui.navigate.openShareDialog()}>\n  Share this Koji\n</button>\n\n// full URL\n<button type=\"button\" onClick={() => Koji.ui.navigate.openShareDialog('https://withkoji.com/@myname')}>\n  Share your profile\n</button>\n\n// relative URL\n<button type=\"button\" onClick={() => Koji.ui.navigate.openShareDialog('?key=value')}>\n  Share this info\n</button>\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1099,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "URL to use instead of the current Koji.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1087,
							"name": "presentInModal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 44,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 1088,
									"name": "presentInModal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens the content at the specified URL in a modal window that animates from the bottom of the screen.\nIf the parent Koji is already displayed in a modal window, the content will open in the same window, replacing the current view.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```html\n<button type=\"button\" onClick={() => Koji.ui.navigate.presentInModal(url)}>\n  My favorite Koji\n</button>\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1089,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "URL of the content to load.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1084,
							"name": "to",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 21,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 1085,
									"name": "to",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Replaces the currently loaded Koji with the content at the specified URL.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```html\n<button type=\"button\" onClick={() => Koji.ui.navigate.to(url)}>\n My favorite Koji\n</button>\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1086,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "URL of the content to load.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1082
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1090,
								1095,
								1093,
								1097,
								1087,
								1084
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/navigate/index.ts",
							"line": 7,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 686,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 1114,
					"name": "navigate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/navigate/index.ts",
							"line": 150,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"id": 1081,
						"name": "Navigate"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1081
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1114
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/navigate/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1115,
			"name": "frontend/ui/present",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1124,
					"name": "Present",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Presents dialog boxes to users on the frontend of your Koji."
					},
					"children": [
						{
							"id": 1125,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1126,
									"name": "new Present",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1124,
										"name": "Present"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 688,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 687,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 1130,
							"name": "alert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 79,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 1131,
									"name": "alert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Presents an alert dialog box to the user. Use this method for messages that do not require any response from the user, other than an acknowledgement. For messages that require a decision, use [[confirmation]].",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.ui.present.alert({\n title: 'Image Posted',\n message: 'Your new image is available on your fan wall!'\n});\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1132,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 1121,
												"name": "PresentAlertOptions"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1127,
							"name": "confirmation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 49,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 1128,
									"name": "confirmation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Presents a confirmation dialog box to a user. Use this method for messages that require a decision from the user, such as to ask whether to proceed with an action. For messages that do not require a decision, use [[alert]].",
										"returns": "Whether the user confirmed (`true`) or cancelled (`false`) the action.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst confirmed = await Koji.ui.present.confirmation({\n title: 'Delete File',\n message: 'Are you sure you want to delete this file?',\n confirmButtonLabel: 'Delete',\n cancelButtonLabel: 'Cancel'\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1129,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1116,
												"name": "PresentConfirmationOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1125
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1130,
								1127
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 31,
							"character": 20
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 686,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 1121,
					"name": "PresentAlertOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines an alert dialog box to show a user."
					},
					"children": [
						{
							"id": 1123,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Information to display to the user."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1122,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Title for the dialog box."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 23,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1123,
								1122
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 21,
							"character": 36
						}
					]
				},
				{
					"id": 1116,
					"name": "PresentConfirmationOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a confirmation dialog box to show a user."
					},
					"children": [
						{
							"id": 1120,
							"name": "cancelButtonLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Label for the cancel action (`Cancel` by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 15,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1119,
							"name": "confirmButtonLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Label for the confirm action (`Confirm` by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1118,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Question to ask the user (empty by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1117,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Title for the dialog box (`Confirm` by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 9,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1120,
								1119,
								1118,
								1117
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 7,
							"character": 43
						}
					]
				},
				{
					"id": 1147,
					"name": "present",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 92,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"id": 1124,
						"name": "Present"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1124
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1121,
						1116
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1147
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/present/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1148,
			"name": "frontend/ui/upload",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1156,
					"name": "Upload",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Uploads files from the frontend of your Koji directly to your project's CDN."
					},
					"children": [
						{
							"id": 1157,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1158,
									"name": "new Upload",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1156,
										"name": "Upload"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 688,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 687,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 1159,
							"name": "uploadFile",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 451,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/upload/index.ts",
									"line": 43,
									"character": 25
								}
							],
							"signatures": [
								{
									"id": 1160,
									"name": "uploadFile",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Uploads a file to your project’s CDN. You can use this method to upload media created or captured by the user as part of the template experience. For example, recording a video or drawing on a canvas.",
										"returns": "Unique URL for accessing the file on `images.koji-cdn.com` or `objects.koji-cdn.com`, depending on the type of file.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst url = await Koji.ui.upload.uploadFile({\n file: new File([blob], 'video.webm'),\n type: 'video',\n videoOptions: {\n   hls: true,\n });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1161,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Request options for the file upload.\n"
											},
											"type": {
												"type": "reference",
												"id": 1149,
												"name": "UploadOptions"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1157
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1159
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/upload/index.ts",
							"line": 24,
							"character": 19
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 686,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 1149,
					"name": "UploadOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Request options for a [[uploadFile | file upload]]."
					},
					"children": [
						{
							"id": 1150,
							"name": "file",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "File to upload."
							},
							"sources": [
								{
									"fileName": "frontend/ui/upload/index.ts",
									"line": 9,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"name": "File"
							}
						},
						{
							"id": 1151,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Media type of the file, which is used to determine whether transcoding or other processing is required."
							},
							"sources": [
								{
									"fileName": "frontend/ui/upload/index.ts",
									"line": 11,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "image"
									},
									{
										"type": "literal",
										"value": "video"
									},
									{
										"type": "literal",
										"value": "audio"
									}
								]
							}
						},
						{
							"id": 1152,
							"name": "videoOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Options for uploaded video."
							},
							"sources": [
								{
									"fileName": "frontend/ui/upload/index.ts",
									"line": 13,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 1153,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 1154,
													"name": "hls",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Enables HTTP Live Streaming (HLS) for delivery of longer content. When enabled, uploaded videos are transcoded for HLS and saved as an m3u8 playlist. Use this feature in conjunction with [[https://github.com/video-dev/hls.js/ | hls.js]] for controlling playback."
													},
													"sources": [
														{
															"fileName": "frontend/ui/upload/index.ts",
															"line": 15,
															"character": 7
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												},
												{
													"id": 1155,
													"name": "remux",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Remuxes video files constructed from getUserMedia MediaStreams. Use this feature to ensure these types of files contain correct duration headers before they are delivered."
													},
													"sources": [
														{
															"fileName": "frontend/ui/upload/index.ts",
															"line": 17,
															"character": 9
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														1154,
														1155
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1150,
								1151,
								1152
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/upload/index.ts",
							"line": 7,
							"character": 30
						}
					]
				},
				{
					"id": 1176,
					"name": "upload",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/upload/index.ts",
							"line": 60,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 1156,
						"name": "Upload"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1156
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1149
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1176
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/upload/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1177,
			"name": "index",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1214,
					"name": "KojiBackend",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 390
				},
				{
					"id": 1215,
					"name": "default",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 684
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						1214,
						1215
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1178,
			"name": "types",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1181,
					"name": "FastlyOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1182,
							"name": "auto",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Enables image optimizations based on content negotiation.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/auto | Fastly auto reference]].\n\n<p class=\"note\">Although the WebP format produces images at a higher compression ratio with a lower loss of quality, it is not supported in all browsers.</p>\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 13,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									}
								]
							}
						},
						{
							"id": 1183,
							"name": "bg-color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sets the background color to use when applying padding or when replacing transparent pixels in the image.",
								"text": "The value can be in HEX 3- and 6-digit format (for example, `a22` or `cf23a5`), RGB format (for example,  `255,0,0`), or RGBA format (for example, `0,255,0,0.5`).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/bg-color | Fastly bg-color reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 13,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1184,
							"name": "blur",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a Gaussian blur filter to the image.",
								"text": "The value can be a number of pixels between 0.5 and 1000 (for example, `50`), or a percentage followed by `p` (for example, `1p` for 1%).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/blur | Fastly blur reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1185,
							"name": "brightness",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases or decreases the brightness of the image.",
								"text": "The value can be a number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `100` – Results in a fully white image.\n* `-100` – Results in a fully black image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/brightness | Fastly brightness reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 41,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1186,
							"name": "contrast",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases or decreases the difference between the darkest and lightest tones in the image.",
								"text": "The value can be a number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `-100` – Results in a fully grey image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/contrast | Fastly contrast reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 52,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1187,
							"name": "crop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image.",
								"text": "The value starts with the desired width and height of the final image.\nThe rest of the value determines the position of the cropped region within the existing image.\nFor example: `150,100,x50,y50`\tcrops the image to 150px by 100px and selects the starting sub region x coordinate to be 50px and the y coordinate to be 50px. `16:9`\tcrops the image to an aspect ratio of 16:9.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/crop | Fastly crop reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 62,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1188,
							"name": "dpr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Serves correctly sized images for devices that expose a device pixel ratio.",
								"text": "The value can be any number between 1 and 10.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/dpr | Fastly dpr reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 70,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1189,
							"name": "fit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Controls how the image will be constrained within the provided size (width and height) values to maintain the correct proportions.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/fit | Fastly fit reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 76,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "bounds"
									},
									{
										"type": "literal",
										"value": "cover"
									},
									{
										"type": "literal",
										"value": "crop"
									}
								]
							}
						},
						{
							"id": 1190,
							"name": "format",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Converts the image to the specified encoded format.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/format | Fastly format reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 82,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									},
									{
										"type": "literal",
										"value": "gif"
									},
									{
										"type": "literal",
										"value": "png"
									},
									{
										"type": "literal",
										"value": "png8"
									},
									{
										"type": "literal",
										"value": "jpg"
									},
									{
										"type": "literal",
										"value": "pjpg"
									},
									{
										"type": "literal",
										"value": "bjpg"
									},
									{
										"type": "literal",
										"value": "webpll"
									},
									{
										"type": "literal",
										"value": "webply"
									},
									{
										"type": "literal",
										"value": "mp4"
									}
								]
							}
						},
						{
							"id": 1191,
							"name": "frame",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Extracts the first frame from an animated image sequence.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/frame | Fastly frame reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 88,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									}
								]
							}
						},
						{
							"id": 1192,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Resizes the height of the image based on pixels or percent.",
								"text": "For absolute heights, set an integer number of pixels.\nFor relative heights (percent), set a value between 0 and 1 or a value between 0 and 100 followed by `p` (for example, `0.5` or `50p` for 50 percent).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/height | Fastly height reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 97,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1193,
							"name": "optimize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies optimal quality compression to produce an output image with as much visual fidelity as possible, while minimizing the file size.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/optimize | Fastly optimize reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 103,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "low"
									},
									{
										"type": "literal",
										"value": "medium"
									},
									{
										"type": "literal",
										"value": "high"
									}
								]
							}
						},
						{
							"id": 1194,
							"name": "orient",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Changes the cardinal orientation of the image.",
								"text": "The value can orient the image right or left, flip it horizontally, flip it vertically, or apply a combination of these options.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/orient | Fastly orient reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 111,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									},
									{
										"type": "literal",
										"value": "r"
									},
									{
										"type": "literal",
										"value": "l"
									},
									{
										"type": "literal",
										"value": "h"
									},
									{
										"type": "literal",
										"value": "v"
									},
									{
										"type": "literal",
										"value": "hv"
									},
									{
										"type": "literal",
										"value": "2"
									},
									{
										"type": "literal",
										"value": "3"
									},
									{
										"type": "literal",
										"value": "4"
									},
									{
										"type": "literal",
										"value": "5"
									},
									{
										"type": "literal",
										"value": "6"
									},
									{
										"type": "literal",
										"value": "7"
									},
									{
										"type": "literal",
										"value": "8"
									}
								]
							}
						},
						{
							"id": 1195,
							"name": "pad",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds pixels to the edge of an image.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/pad | Fastly pad reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 117,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1196,
							"name": "precrop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image before any other transformations occur.",
								"text": "The value is specified in the same way as `crop`, except that `precrop` is performed before any other transformations.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/precrop | Fastly precrop reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 125,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1197,
							"name": "quality",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Optimizes the image to the given compression level for lossy file formatted images.",
								"text": "The value can be any integer between 1 and 100, where 1 is a lower quality image and a smaller file and 100 is the highest quality image and larger file.\nAn optional second quality level can be specified for use when auto=webp is enabled and a WebP output format has been selected.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/quality | Fastly quality reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 134,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1198,
							"name": "resize-filter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Controls the filter used to resize an image to a higher or lower number of pixels.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/resize-filter | Fastly resize-filter reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 134,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "nearest"
									},
									{
										"type": "literal",
										"value": "linear"
									},
									{
										"type": "literal",
										"value": "cubic"
									},
									{
										"type": "literal",
										"value": "lanczos2"
									},
									{
										"type": "literal",
										"value": "lanczos3"
									}
								]
							}
						},
						{
							"id": 1199,
							"name": "saturation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sets the intensity of the colors in the image.",
								"text": "The value can be any number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `-100` – Generates a grayscale image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/saturation | Fastly saturation reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 151,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1200,
							"name": "sharpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases the definition of the edges of objects in the image.",
								"text": "The value specifies the amount, radius, and threshold for an unsharp mask (for example, `a5,r2,t0`).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/sharpen | Fastly sharpen reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 159,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1201,
							"name": "trim",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from the edge of the image.",
								"text": "The value can be specified in pixels or percent.\nFor example: `25,50,75,100` trims the top edge 25px, right edge 50px, bottom edge 75px, and left edge 100px.\n`0.25`\ttrims all edges by 25 percent.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/trim | Fastly trim reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 169,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1202,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Resizes the width of the image based on pixels or percent.",
								"text": "For absolute widths, set an integer number of pixels between 1 and 8192.\nFor relative widths (percent), set a value between 0 and 1 or a value between 0 and 100 followed by p (for example, `0.5` or `50p` for 50 percent).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/width | Fastly width reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 178,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1182,
								1183,
								1184,
								1185,
								1186,
								1187,
								1188,
								1189,
								1190,
								1191,
								1192,
								1193,
								1194,
								1195,
								1196,
								1197,
								1198,
								1199,
								1200,
								1201,
								1202
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 5,
							"character": 30
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 879,
							"name": "CaptureImageOptions"
						}
					]
				},
				{
					"id": 1180,
					"name": "IAPToken",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				},
				{
					"id": 1179,
					"name": "UserToken",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1181
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1180,
						1179
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1203,
			"name": "utils/equalsIgnoreOrder",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1204,
					"name": "equalsIgnoreOrder",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/equalsIgnoreOrder.ts",
							"line": 3,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 1205,
							"name": "equalsIgnoreOrder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1206,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 1207,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1204
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/equalsIgnoreOrder.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1208,
			"name": "utils/get",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1209,
					"name": "get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/get.ts",
							"line": 7,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1210,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1211,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GetInput"
									},
									"defaultValue": "..."
								},
								{
									"id": 1212,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1213,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1209
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/get.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 1,
			"children": [
				389,
				1,
				8,
				7,
				29,
				28,
				200,
				275,
				346,
				407,
				421,
				438,
				639,
				450,
				456,
				468,
				566,
				603,
				602,
				685,
				703,
				759,
				811,
				1057,
				824,
				1080,
				1115,
				1148,
				1177,
				1178,
				1203,
				1208
			]
		}
	]
}