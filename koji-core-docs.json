{
	"id": 0,
	"name": "@withkoji/core",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 370,
			"name": "backend",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 371,
					"name": "KojiBackend",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Provides backend methods for your Koji."
					},
					"sources": [
						{
							"fileName": "backend/index.ts",
							"line": 11,
							"character": 24
						},
						{
							"fileName": "index.ts",
							"line": 4,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 372,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 373,
									"name": "Database",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 52,
											"name": "Database"
										}
									}
								},
								{
									"id": 375,
									"name": "Dispatch",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 201,
											"name": "Dispatch"
										}
									}
								},
								{
									"id": 374,
									"name": "IAP",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 276,
											"name": "IAP"
										}
									}
								},
								{
									"id": 376,
									"name": "Identity",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 352,
											"name": "Identity"
										}
									}
								},
								{
									"id": 377,
									"name": "Secret",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 402,
											"name": "Secret"
										}
									}
								},
								{
									"id": 378,
									"name": "middleware",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 379,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 380,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Executes middleware, making koji-specific data available on the res.locals property.",
														"tags": [
															{
																"tag": "example",
																"text": "\n```\napp.use(Koji.middleware(require('koji.json'));\n```\n"
															}
														]
													},
													"parameters": [
														{
															"id": 381,
															"name": "kojiConfig",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Configuration data for the Koji.\n"
															},
															"type": {
																"type": "reference",
																"id": 396,
																"name": "KojiConfig"
															},
															"defaultValue": "..."
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 382,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 383,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 384,
																			"name": "req",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"name": "ParamsDictionary"
																					},
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "reference",
																						"name": "ParsedQs"
																					},
																					{
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							},
																							{
																								"type": "intrinsic",
																								"name": "any"
																							}
																						],
																						"name": "Record"
																					}
																				],
																				"name": "Request"
																			}
																		},
																		{
																			"id": 385,
																			"name": "res",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							},
																							{
																								"type": "intrinsic",
																								"name": "any"
																							}
																						],
																						"name": "Record"
																					}
																				],
																				"name": "Response"
																			}
																		},
																		{
																			"id": 386,
																			"name": "next",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "NextFunction"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										373,
										375,
										374,
										376,
										377,
										378
									]
								}
							]
						}
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						371
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "backend/@decorators/server",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "server",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"decorates": [
						{
							"type": "reference",
							"id": 58,
							"name": "get"
						},
						{
							"type": "reference",
							"id": 63,
							"name": "getCollections"
						},
						{
							"type": "reference",
							"id": 65,
							"name": "search"
						},
						{
							"type": "reference",
							"id": 71,
							"name": "getWhere"
						},
						{
							"type": "reference",
							"id": 78,
							"name": "getAll"
						},
						{
							"type": "reference",
							"id": 83,
							"name": "getAllWhere"
						},
						{
							"type": "reference",
							"id": 90,
							"name": "set"
						},
						{
							"type": "reference",
							"id": 95,
							"name": "update"
						},
						{
							"type": "reference",
							"id": 100,
							"name": "arrayPush"
						},
						{
							"type": "reference",
							"id": 105,
							"name": "arrayRemove"
						},
						{
							"type": "reference",
							"id": 110,
							"name": "delete"
						},
						{
							"type": "reference",
							"id": 117,
							"name": "get"
						},
						{
							"type": "reference",
							"id": 122,
							"name": "getCollections"
						},
						{
							"type": "reference",
							"id": 124,
							"name": "search"
						},
						{
							"type": "reference",
							"id": 130,
							"name": "getWhere"
						},
						{
							"type": "reference",
							"id": 137,
							"name": "getAll"
						},
						{
							"type": "reference",
							"id": 142,
							"name": "getAllWhere"
						},
						{
							"type": "reference",
							"id": 149,
							"name": "set"
						},
						{
							"type": "reference",
							"id": 154,
							"name": "update"
						},
						{
							"type": "reference",
							"id": 159,
							"name": "arrayPush"
						},
						{
							"type": "reference",
							"id": 164,
							"name": "arrayRemove"
						},
						{
							"type": "reference",
							"id": 169,
							"name": "delete"
						},
						{
							"type": "reference",
							"id": 282,
							"name": "resolveReceiptsByIAPToken"
						},
						{
							"type": "reference",
							"id": 285,
							"name": "resolveReceiptById"
						},
						{
							"type": "reference",
							"id": 288,
							"name": "resolveReceiptsBySku"
						},
						{
							"type": "reference",
							"id": 305,
							"name": "resolveReceiptsByIAPToken"
						},
						{
							"type": "reference",
							"id": 308,
							"name": "resolveReceiptById"
						},
						{
							"type": "reference",
							"id": 311,
							"name": "resolveReceiptsBySku"
						},
						{
							"type": "reference",
							"id": 358,
							"name": "pushNotificationToUser"
						},
						{
							"type": "reference",
							"id": 362,
							"name": "pushNotificationToOwner"
						},
						{
							"type": "reference",
							"id": 365,
							"name": "resolveUserFromToken"
						},
						{
							"type": "reference",
							"id": 408,
							"name": "resolveValue"
						},
						{
							"type": "reference",
							"id": 412,
							"name": "generateSignedUrl"
						}
					],
					"sources": [
						{
							"fileName": "backend/@decorators/server.ts",
							"line": 9,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "server",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Verifies that server-side methods are used only in backend services of the Koji.",
								"returns": "Method's behavior or an error, if the method is being invoked in a frontend environment.\n"
							},
							"parameters": [
								{
									"id": 4,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Class to which the method belongs."
									},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								},
								{
									"id": 5,
									"name": "propertyKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6,
									"name": "descriptor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method's behavior (which can be mutated inside this function)."
									},
									"type": {
										"type": "reference",
										"name": "PropertyDescriptor"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/@decorators/server.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 8,
			"name": "backend/base",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 19,
					"name": "Base",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 20,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 21,
									"name": "new Base",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 22,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 19,
										"name": "Base"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								20
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 58,
							"character": 17
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 25,
							"name": "IDatabase"
						},
						{
							"type": "reference",
							"id": 52,
							"name": "Database"
						},
						{
							"type": "reference",
							"id": 201,
							"name": "Dispatch"
						},
						{
							"type": "reference",
							"id": 276,
							"name": "IAP"
						},
						{
							"type": "reference",
							"id": 352,
							"name": "Identity"
						},
						{
							"type": "reference",
							"id": 402,
							"name": "Secret"
						}
					]
				},
				{
					"id": 16,
					"name": "BackendConfiguration",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Environment variables that serve as access credentials for the Koji's backend services."
					},
					"children": [
						{
							"id": 17,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Unique identifier for the Koji."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 20,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 18,
							"name": "projectToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Secret key for the Koji."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 22,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								17,
								18
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 18,
							"character": 37
						}
					]
				},
				{
					"id": 12,
					"name": "BackendConfigurationInput",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration information for the Koji."
					},
					"children": [
						{
							"id": 13,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Unique identifier for the Koji. Will override data passed through `res`."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 8,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 14,
							"name": "projectToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Secret key for the Koji. Will override data passed through `res`."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 10,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 15,
							"name": "res",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Express response object. Used in conjunction with [[middleware]] to scope environment variables for instant remixes of the original Koji."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 12,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record"
											}
										],
										"name": "Response"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								13,
								14,
								15
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 6,
							"character": 42
						}
					]
				},
				{
					"id": 25,
					"name": "IDatabase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 70,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				},
				{
					"id": 9,
					"name": "generateConfig",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 30,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 10,
							"name": "generateConfig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates an extensible configuration for the Koji's backend services."
							},
							"parameters": [
								{
									"id": 11,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Configuration information for the Koji.\n"
									},
									"type": {
										"type": "reference",
										"id": 12,
										"name": "BackendConfigurationInput"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 16,
								"name": "BackendConfiguration"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						19
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						16,
						12,
						25
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						9
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/base/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7,
			"name": "backend/base/index.spec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"sources": [
				{
					"fileName": "backend/base/index.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 29,
			"name": "backend/database",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 30,
					"name": "DatabaseRoutes",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "API routes for database methods."
					},
					"children": [
						{
							"id": 31,
							"name": "ARRAY_PUSH",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 9,
									"character": 12
								}
							],
							"defaultValue": "\"/v1/store/update/push\""
						},
						{
							"id": 32,
							"name": "ARRAY_REMOVE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 10,
									"character": 14
								}
							],
							"defaultValue": "\"/v1/store/update/remove\""
						},
						{
							"id": 33,
							"name": "DELETE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 11,
									"character": 8
								}
							],
							"defaultValue": "\"/v1/store/delete\""
						},
						{
							"id": 34,
							"name": "GET",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 12,
									"character": 5
								}
							],
							"defaultValue": "\"/v1/store/get\""
						},
						{
							"id": 35,
							"name": "GET_ALL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 13,
									"character": 9
								}
							],
							"defaultValue": "\"/v1/store/getAll\""
						},
						{
							"id": 36,
							"name": "GET_ALL_WHERE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 14,
									"character": 15
								}
							],
							"defaultValue": "\"/v1/store/getAllWhere\""
						},
						{
							"id": 37,
							"name": "GET_COLLECTIONS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 15,
									"character": 17
								}
							],
							"defaultValue": "\"/v1/store/getCollections\""
						},
						{
							"id": 38,
							"name": "SEARCH",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 16,
									"character": 8
								}
							],
							"defaultValue": "\"/v1/store/search\""
						},
						{
							"id": 39,
							"name": "SET",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 17,
									"character": 5
								}
							],
							"defaultValue": "\"/v1/store/set\""
						},
						{
							"id": 40,
							"name": "UPDATE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 18,
									"character": 8
								}
							],
							"defaultValue": "\"/v1/store/update\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								31,
								32,
								33,
								34,
								35,
								36,
								37,
								38,
								39,
								40
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 8,
							"character": 26
						}
					]
				},
				{
					"id": 41,
					"name": "PredicateOperator",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Available operator types for database comparisons."
					},
					"children": [
						{
							"id": 48,
							"name": "ARRAY_CONTAINS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 31,
									"character": 16
								}
							],
							"defaultValue": "\"array-contains\""
						},
						{
							"id": 49,
							"name": "ARRAY_CONTAINS_ANY",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 32,
									"character": 20
								}
							],
							"defaultValue": "\"array-contains-any\""
						},
						{
							"id": 44,
							"name": "EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 27,
									"character": 10
								}
							],
							"defaultValue": "\"==\""
						},
						{
							"id": 45,
							"name": "GREATER_THAN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 28,
									"character": 14
								}
							],
							"defaultValue": "\">\""
						},
						{
							"id": 46,
							"name": "GREATER_THAN_OR_EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 29,
									"character": 26
								}
							],
							"defaultValue": "\">=\""
						},
						{
							"id": 50,
							"name": "IN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 33,
									"character": 4
								}
							],
							"defaultValue": "\"in\""
						},
						{
							"id": 42,
							"name": "LESS_THAN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 25,
									"character": 11
								}
							],
							"defaultValue": "\"<\""
						},
						{
							"id": 43,
							"name": "LESS_THAN_OR_EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 26,
									"character": 23
								}
							],
							"defaultValue": "\"<=\""
						},
						{
							"id": 47,
							"name": "NOT_EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 30,
									"character": 14
								}
							],
							"defaultValue": "\"!=\""
						},
						{
							"id": 51,
							"name": "NOT_IN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 34,
									"character": 8
								}
							],
							"defaultValue": "\"not-in\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								48,
								49,
								44,
								45,
								46,
								50,
								42,
								43,
								47,
								51
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 24,
							"character": 29
						}
					]
				},
				{
					"id": 52,
					"name": "Database",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements a Koji database for the backend of your Koji. For more information, see [[https://developer.withkoji.com/docs/develop/koji-database | the Koji database developer guide]]."
					},
					"children": [
						{
							"id": 53,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 54,
									"name": "new Database",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst database = new KojiBackend.Database({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 55,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 52,
										"name": "Database"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 100,
							"name": "arrayPush",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 314,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 101,
									"name": "arrayPush",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Appends contents to an existing document in a collection.",
										"returns": "Updated document.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.arrayPush('myCollection', 'myDocument', 'Contents appended to end of document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 102,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 103,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 104,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Appended contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 105,
							"name": "arrayRemove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 342,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 106,
									"name": "arrayRemove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes part of the contents from an existing document in a collection.",
										"returns": "Updated document.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.arrayPush('myCollection', 'myDocument', 'Contents to be removed from document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 107,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 108,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 109,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Removed contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 110,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 369,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 111,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a document from a collection.",
										"returns": "Deleted document.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.delete('myCollection', 'myDocument');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 112,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 113,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 58,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 79,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 59,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the specified database entry or collection of entries.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.get('myCollection');\nconst myEntry = await database.get('myCollection','myDoc');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 60,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 61,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 62,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 78,
							"name": "getAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 194,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 79,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for the documents whose names are included in an array of document names.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAll<'myClass'>('myCollection', ['doc1', 'doc2']);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 80,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 81,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 82,
											"name": "documentNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of one or more document names"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 83,
							"name": "getAllWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 224,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 84,
									"name": "getAllWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValues.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAllWhere<'myClass'>('myCollection', 'myField', 'myOperator, ['mySearchValue1', mySearchValue2]);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 85,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 86,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 87,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of a field in the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 88,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An operator such as '=', '<>', '>', etc."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 89,
											"name": "predicateValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An array of one or more search values."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 63,
							"name": "getCollections",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 102,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 64,
									"name": "getCollections",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of all collections available in the database.",
										"returns": "List containing the names of the collections.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst collections = await database.getCollections();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 71,
							"name": "getWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 158,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 72,
									"name": "getWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValue.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getWhere<'myClass'>('myCollection', 'myField', 'myOperator, 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 73,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 74,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 75,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of a field in the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 76,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An operator such as '=', '<>', '>', etc."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 77,
											"name": "predicateValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 65,
							"name": "search",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 127,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 66,
									"name": "search",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that match the specified search criteria.\nThe search criteria are the search field and the search value.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.search<'myClass'>('myCollection', 'myField', 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 67,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 68,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 69,
											"name": "queryKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the search field."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 70,
											"name": "queryValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 90,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 258,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 91,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inserts a new document into a collection.",
										"returns": "New document.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.set('myCollection', 'myDocument', 'Some contents for the document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 92,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 93,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 94,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 95,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 286,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 96,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Replaces the contents of an existing document in a collection.",
										"returns": "Updated document.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.set('myCollection', 'myDocument', 'Some contents for the document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 97,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 98,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 99,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "New contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								53
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								100,
								105,
								110,
								58,
								78,
								83,
								63,
								71,
								65,
								90,
								95
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 40,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 116,
							"name": "IDatabase"
						}
					]
				},
				{
					"id": 116,
					"name": "IDatabase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 159,
							"name": "arrayPush",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 314,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 160,
									"name": "arrayPush",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Appends contents to an existing document in a collection.",
										"returns": "Updated document.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.arrayPush('myCollection', 'myDocument', 'Contents appended to end of document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 161,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 162,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 163,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Appended contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 101,
										"name": "Database.arrayPush"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 100,
								"name": "Database.arrayPush"
							}
						},
						{
							"id": 164,
							"name": "arrayRemove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 342,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 165,
									"name": "arrayRemove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes part of the contents from an existing document in a collection.",
										"returns": "Updated document.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.arrayPush('myCollection', 'myDocument', 'Contents to be removed from document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 166,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 167,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 168,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Removed contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 106,
										"name": "Database.arrayRemove"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 105,
								"name": "Database.arrayRemove"
							}
						},
						{
							"id": 169,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 369,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 170,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a document from a collection.",
										"returns": "Deleted document.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.delete('myCollection', 'myDocument');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 171,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 172,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 111,
										"name": "Database.delete"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 110,
								"name": "Database.delete"
							}
						},
						{
							"id": 117,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 79,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 118,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the specified database entry or collection of entries.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.get('myCollection');\nconst myEntry = await database.get('myCollection','myDoc');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 119,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 120,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 121,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 59,
										"name": "Database.get"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 58,
								"name": "Database.get"
							}
						},
						{
							"id": 137,
							"name": "getAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 194,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 138,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for the documents whose names are included in an array of document names.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAll<'myClass'>('myCollection', ['doc1', 'doc2']);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 139,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 140,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 141,
											"name": "documentNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of one or more document names"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 79,
										"name": "Database.getAll"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 78,
								"name": "Database.getAll"
							}
						},
						{
							"id": 142,
							"name": "getAllWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 224,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 143,
									"name": "getAllWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValues.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAllWhere<'myClass'>('myCollection', 'myField', 'myOperator, ['mySearchValue1', mySearchValue2]);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 144,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 145,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 146,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of a field in the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 147,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An operator such as '=', '<>', '>', etc."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 148,
											"name": "predicateValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An array of one or more search values."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 84,
										"name": "Database.getAllWhere"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 83,
								"name": "Database.getAllWhere"
							}
						},
						{
							"id": 122,
							"name": "getCollections",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 102,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 123,
									"name": "getCollections",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of all collections available in the database.",
										"returns": "List containing the names of the collections.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst collections = await database.getCollections();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 64,
										"name": "Database.getCollections"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 63,
								"name": "Database.getCollections"
							}
						},
						{
							"id": 130,
							"name": "getWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 158,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 131,
									"name": "getWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValue.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getWhere<'myClass'>('myCollection', 'myField', 'myOperator, 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 132,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 133,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 134,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of a field in the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 135,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An operator such as '=', '<>', '>', etc."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 136,
											"name": "predicateValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 72,
										"name": "Database.getWhere"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 71,
								"name": "Database.getWhere"
							}
						},
						{
							"id": 124,
							"name": "search",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 127,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 125,
									"name": "search",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that match the specified search criteria.\nThe search criteria are the search field and the search value.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.search<'myClass'>('myCollection', 'myField', 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 126,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 127,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 128,
											"name": "queryKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the search field."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 129,
											"name": "queryValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 66,
										"name": "Database.search"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 65,
								"name": "Database.search"
							}
						},
						{
							"id": 149,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 258,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 150,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inserts a new document into a collection.",
										"returns": "New document.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.set('myCollection', 'myDocument', 'Some contents for the document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 151,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 152,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 153,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 91,
										"name": "Database.set"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 90,
								"name": "Database.set"
							}
						},
						{
							"id": 154,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 286,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 155,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Replaces the contents of an existing document in a collection.",
										"returns": "Updated document.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.set('myCollection', 'myDocument', 'Some contents for the document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 156,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 157,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 158,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "New contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 96,
										"name": "Database.update"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 95,
								"name": "Database.update"
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								159,
								164,
								169,
								117,
								137,
								142,
								122,
								130,
								124,
								149,
								154
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 383,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 52,
							"name": "Database"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						30,
						41
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						52
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						116
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/database/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 28,
			"name": "backend/database/index.spec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"sources": [
				{
					"fileName": "backend/database/index.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 175,
			"name": "backend/dispatch",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 176,
					"name": "PlatformEvents",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Defines constants for Koji platform events."
					},
					"children": [
						{
							"id": 177,
							"name": "CONNECTED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 34,
									"character": 11
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED\""
						},
						{
							"id": 178,
							"name": "CONNECTED_CLIENTS_CHANGED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 35,
									"character": 27
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED_CLIENTS_CHANGED\""
						},
						{
							"id": 179,
							"name": "IDENTIFY",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 36,
									"character": 10
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/IDENTIFY\""
						},
						{
							"id": 180,
							"name": "SET_USER_INFO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 37,
									"character": 15
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/SET_USER_INFO\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								177,
								178,
								179,
								180
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 33,
							"character": 26
						}
					]
				},
				{
					"id": 201,
					"name": "Dispatch",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements a dispatch system for the backend of your Koji. For more information, see [[https://developer.withkoji.com/reference/packages/withkoji-dispatch-package | the Koji dispatch package reference]]."
					},
					"children": [
						{
							"id": 202,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 203,
									"name": "new Dispatch",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst dispatch = new KojiBackend.Dispatch({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 204,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 201,
										"name": "Dispatch"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 252,
							"name": "disconnect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 350,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 253,
									"name": "disconnect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Close connection.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.disconnect();\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 244,
							"name": "emitEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 316,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 245,
									"name": "emitEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.emitEvent('click', [id:1]);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 246,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of event."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 247,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of values to be included in event message."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 248,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 249,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 250,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 251,
											"name": "recipients",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "One or more event recipients.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 241,
							"name": "identify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 298,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 242,
									"name": "identify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit IDENTIFY event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.identify(token);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 243,
											"name": "authToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Authorization token.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 211,
							"name": "info",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 104,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 212,
									"name": "info",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets shard info for the current project.",
										"returns": "Shard info in the form of an array.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myInfo = await dispatch.info('myCollection');\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 195,
													"name": "ShardInfo"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 231,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 260,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 232,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Assigns a callback function to an event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.on('eventName', callbackFunction);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 233,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of event."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 234,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Callback function.\n"
											},
											"type": {
												"type": "reference",
												"id": 185,
												"name": "MessageHandlerCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 235,
							"name": "setUserInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 284,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 236,
									"name": "setUserInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit SET_USER_INFO event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.setUserInfo({['user info']});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 237,
											"name": "userInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing an array of user info.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 238,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 239,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 240,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								202
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								252,
								244,
								241,
								211,
								231,
								235
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 73,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				},
				{
					"id": 198,
					"name": "ConnectionInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a ConnectionInfo interface."
					},
					"children": [
						{
							"id": 199,
							"name": "clientId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 66,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 200,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 67,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								199,
								200
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 65,
							"character": 31
						}
					]
				},
				{
					"id": 181,
					"name": "MessageHandler",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a MessageHandler interface."
					},
					"children": [
						{
							"id": 184,
							"name": "callback",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 46,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 185,
								"name": "MessageHandlerCallback"
							}
						},
						{
							"id": 183,
							"name": "eventName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 45,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 182,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 44,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								184,
								183,
								182
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 43,
							"character": 31
						}
					]
				},
				{
					"id": 195,
					"name": "ShardInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a ShardInfo interface."
					},
					"children": [
						{
							"id": 197,
							"name": "numConnectedClients",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 59,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 196,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 58,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								197,
								196
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 57,
							"character": 26
						}
					]
				},
				{
					"id": 185,
					"name": "MessageHandlerCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Implements the callback function for the MessageHandler interface."
					},
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 52,
							"character": 34
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 186,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 52,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 187,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 188,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 189,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "backend/dispatch/index.ts",
															"line": 52,
															"character": 46
														}
													],
													"indexSignature": {
														"id": 190,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 191,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 192,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 193,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 194,
															"name": "latencyMs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "backend/dispatch/index.ts",
																	"line": 52,
																	"character": 94
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																194
															]
														}
													],
													"sources": [
														{
															"fileName": "backend/dispatch/index.ts",
															"line": 52,
															"character": 82
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						176
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						201
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						198,
						181,
						195
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						185
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/dispatch/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 256,
			"name": "backend/iap",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 257,
					"name": "IapRoutes",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "API routes for iap methods."
					},
					"children": [
						{
							"id": 258,
							"name": "GET_PRODUCT_BY_SKU",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 10,
									"character": 20
								}
							],
							"defaultValue": "\"/v1/iap/provider/getProductBySku\""
						},
						{
							"id": 259,
							"name": "RESOLVE_RECEIPTS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 11,
									"character": 18
								}
							],
							"defaultValue": "\"/v1/iap/consumer/resolveReceipts\""
						},
						{
							"id": 261,
							"name": "RESOLVE_RECEIPTS_BY_SKU",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 13,
									"character": 25
								}
							],
							"defaultValue": "\"/v1/iap/consumer/resolveReceiptsBySku\""
						},
						{
							"id": 260,
							"name": "RESOLVE_RECEIPT_BY_ID",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 12,
									"character": 23
								}
							],
							"defaultValue": "\"/v1/iap/consumer/resolveReceiptById\""
						},
						{
							"id": 262,
							"name": "UPDATE_RECEIPT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 14,
									"character": 16
								}
							],
							"defaultValue": "\"/v1/iap/consumer/updateReceiptAttributes\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								258,
								259,
								261,
								260,
								262
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 9,
							"character": 21
						}
					]
				},
				{
					"id": 276,
					"name": "IAP",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements in-app purchases for the backend of your Koji. For more information, see\n[[https://developer.withkoji.com/reference/packages/withkoji-koji-iap-package | the in-app purchases package reference]]."
					},
					"children": [
						{
							"id": 277,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 278,
									"name": "new IAP",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst iap = new KojiBackend.IAP({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 279,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 276,
										"name": "IAP"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 299,
							"name": "loadProduct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 161,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 300,
									"name": "loadProduct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load product by sku.",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\niap.loadProduct(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 301,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Product sku."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 285,
							"name": "resolveReceiptById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 99,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 286,
									"name": "resolveReceiptById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts by receipt id",
										"returns": "Array of receipts.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipt = iap.resolveReceiptById(id);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 287,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Receipt id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 263,
												"name": "IapReceipt"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 282,
							"name": "resolveReceiptsByIAPToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 72,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 283,
									"name": "resolveReceiptsByIAPToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts by user token",
										"returns": "Array of receipts.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = iap.resolveReceiptsByUserToken(token);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 284,
											"name": "iapToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 263,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 288,
							"name": "resolveReceiptsBySku",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 117,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 289,
									"name": "resolveReceiptsBySku",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts for a product by sku",
										"returns": "Array of receipts that include the product.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = iap.resolveReceiptById(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 290,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Product sku."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 263,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 291,
							"name": "updateReceipt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 136,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 292,
									"name": "updateReceipt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Update receipt",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\niap.updateReceipt(id, ['paid']);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 293,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Receipt id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 294,
											"name": "attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of receipt attributes."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 295,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 296,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 297,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 298,
											"name": "notificationMessage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional notification message."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								277
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								299,
								285,
								282,
								288,
								291
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 36,
							"character": 16
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 304,
							"name": "IIAP"
						}
					]
				},
				{
					"id": 304,
					"name": "IIAP",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 322,
							"name": "loadProduct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 161,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 323,
									"name": "loadProduct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load product by sku.",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\niap.loadProduct(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 324,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Product sku."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 300,
										"name": "IAP.loadProduct"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 299,
								"name": "IAP.loadProduct"
							}
						},
						{
							"id": 308,
							"name": "resolveReceiptById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 99,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 309,
									"name": "resolveReceiptById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts by receipt id",
										"returns": "Array of receipts.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipt = iap.resolveReceiptById(id);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 310,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Receipt id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 263,
												"name": "IapReceipt"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 286,
										"name": "IAP.resolveReceiptById"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 285,
								"name": "IAP.resolveReceiptById"
							}
						},
						{
							"id": 305,
							"name": "resolveReceiptsByIAPToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 72,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 306,
									"name": "resolveReceiptsByIAPToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts by user token",
										"returns": "Array of receipts.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = iap.resolveReceiptsByUserToken(token);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 307,
											"name": "iapToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 263,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 283,
										"name": "IAP.resolveReceiptsByIAPToken"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 282,
								"name": "IAP.resolveReceiptsByIAPToken"
							}
						},
						{
							"id": 311,
							"name": "resolveReceiptsBySku",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 117,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 312,
									"name": "resolveReceiptsBySku",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts for a product by sku",
										"returns": "Array of receipts that include the product.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = iap.resolveReceiptById(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 313,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Product sku."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 263,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 289,
										"name": "IAP.resolveReceiptsBySku"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 288,
								"name": "IAP.resolveReceiptsBySku"
							}
						},
						{
							"id": 314,
							"name": "updateReceipt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 136,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 315,
									"name": "updateReceipt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Update receipt",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\niap.updateReceipt(id, ['paid']);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 316,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Receipt id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 317,
											"name": "attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of receipt attributes."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 318,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 319,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 320,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 321,
											"name": "notificationMessage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional notification message."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 292,
										"name": "IAP.updateReceipt"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 291,
								"name": "IAP.updateReceipt"
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								322,
								308,
								305,
								311,
								314
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 168,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 276,
							"name": "IAP"
						}
					]
				},
				{
					"id": 263,
					"name": "IapReceipt",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines an interface for a receipt."
					},
					"children": [
						{
							"id": 267,
							"name": "attributes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 24,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 268,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 269,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 270,
												"name": "index",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							}
						},
						{
							"id": 275,
							"name": "datePurchased",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 29,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 265,
							"name": "productId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 22,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 266,
							"name": "purchasedPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 23,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 264,
							"name": "receiptId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 271,
							"name": "transactionIds",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 25,
									"character": 16
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 272,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 273,
											"name": "credit",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "backend/iap/index.ts",
													"line": 26,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 274,
											"name": "debit",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "backend/iap/index.ts",
													"line": 27,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												273,
												274
											]
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								267,
								275,
								265,
								266,
								264,
								271
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 20,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						257
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						276
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						304,
						263
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/iap/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 327,
			"name": "backend/identity",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 328,
					"name": "AuthRoutes",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "API routes for auth methods."
					},
					"children": [
						{
							"id": 329,
							"name": "GET_GRANT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 10,
									"character": 11
								}
							],
							"defaultValue": "\"/v1/apps/auth/consumer/getGrantForToken\""
						},
						{
							"id": 330,
							"name": "GET_ROLE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 11,
									"character": 10
								}
							],
							"defaultValue": "\"/v1/apps/auth/consumer/getRoleForToken\""
						},
						{
							"id": 331,
							"name": "PUSH_NOTIFICATION",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 12,
									"character": 19
								}
							],
							"defaultValue": "\"/v1/apps/auth/consumer/pushNotification\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								329,
								330,
								331
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 9,
							"character": 22
						}
					]
				},
				{
					"id": 332,
					"name": "UserRole",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Possible values for a user's role within a Koji."
					},
					"children": [
						{
							"id": 333,
							"name": "ADMIN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 19,
									"character": 7
								}
							],
							"defaultValue": "\"admin\""
						},
						{
							"id": 334,
							"name": "UNKNOWN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 20,
									"character": 9
								}
							],
							"defaultValue": "\"unknown\""
						},
						{
							"id": 335,
							"name": "USER",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 21,
									"character": 6
								}
							],
							"defaultValue": "\"user\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								333,
								334,
								335
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 18,
							"character": 20
						}
					]
				},
				{
					"id": 352,
					"name": "Identity",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements an Identity class for backend authentication of your Koji."
					},
					"children": [
						{
							"id": 353,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 354,
									"name": "new Identity",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst identity = new KojiBackend.Identity({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 355,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 352,
										"name": "Identity"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 362,
							"name": "pushNotificationToOwner",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 116,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 363,
									"name": "pushNotificationToOwner",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a notification to the owner",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nidentity.pushNotificationToUser(id, notification);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 364,
											"name": "notification",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Notification to send to owner."
											},
											"type": {
												"type": "reference",
												"id": 347,
												"name": "PushNotification"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 358,
							"name": "pushNotificationToUser",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 91,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 359,
									"name": "pushNotificationToUser",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a notification to a user",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nidentity.pushNotificationToUser(id, notification);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 360,
											"name": "userId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "User id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 361,
											"name": "notification",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Notification to send to user."
											},
											"type": {
												"type": "reference",
												"id": 347,
												"name": "PushNotification"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 365,
							"name": "resolveUserFromToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 141,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 366,
									"name": "resolveUserFromToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets user by token",
										"returns": "User.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst user = identity.resolveUserFromToken(token);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 367,
											"name": "token",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "User token."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 336,
												"name": "User"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								353
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								362,
								358,
								365
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 54,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				},
				{
					"id": 347,
					"name": "PushNotification",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a notification to send to a user’s Koji account. Send notifications with [[pushNotificationToOwner]], for the user who created the Koji, or [[pushNotificationToUser]], for a user who interacts with the Koji and has granted the appropriate authorization."
					},
					"children": [
						{
							"id": 348,
							"name": "appName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Headline for the message. For example, the name of the Koji that generated the notification."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 42,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 349,
							"name": "icon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Icon to display next to the message, either the URL of an image or an emoji character."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 44,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 350,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Content of the message."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 46,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 351,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Query parameters to append to the Koji URL when the notification is tapped. For example, load the admin experience or a dynamic receipt from the notification."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 48,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								348,
								349,
								350,
								351
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 40,
							"character": 33
						}
					]
				},
				{
					"id": 336,
					"name": "User",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines an interface for a user."
					},
					"children": [
						{
							"id": 338,
							"name": "attributes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 29,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 339,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 340,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 341,
														"name": "index",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								]
							}
						},
						{
							"id": 342,
							"name": "dateCreated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 30,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 343,
							"name": "grants",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 31,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 344,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 345,
													"name": "pushNotificationsEnabled",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "backend/identity/index.ts",
															"line": 32,
															"character": 28
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														345
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 337,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 28,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 346,
							"name": "role",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 34,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"id": 333,
										"name": "ADMIN"
									},
									{
										"type": "reference",
										"id": 334,
										"name": "UNKNOWN"
									},
									{
										"type": "reference",
										"id": 335,
										"name": "USER"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								338,
								342,
								343,
								337,
								346
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 27,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						328,
						332
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						352
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						347,
						336
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/identity/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 387,
			"name": "backend/middleware",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 396,
					"name": "KojiConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 400,
							"name": "@@initialTransform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Placeholder values for new remixes."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 10,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 398,
							"name": "deploy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for deploying the services to production."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 8,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 397,
							"name": "develop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for setting up the services in a development/editor environment."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 6,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 399,
							"name": "remixData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default values for the customizable remix data."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 10,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								400,
								398,
								397,
								399
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/middleware/index.ts",
							"line": 4,
							"character": 27
						}
					]
				},
				{
					"id": 388,
					"name": "middleware",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "backend/middleware/index.ts",
							"line": 25,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 389,
							"name": "middleware",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Executes middleware, making koji-specific data available on the res.locals property.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\napp.use(Koji.middleware(require('koji.json'));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 390,
									"name": "kojiConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Configuration data for the Koji.\n"
									},
									"type": {
										"type": "reference",
										"id": 396,
										"name": "KojiConfig"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 391,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 392,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 393,
													"name": "req",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "ParamsDictionary"
															},
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "reference",
																"name": "ParsedQs"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "Record"
															}
														],
														"name": "Request"
													}
												},
												{
													"id": 394,
													"name": "res",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "Record"
															}
														],
														"name": "Response"
													}
												},
												{
													"id": 395,
													"name": "next",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "NextFunction"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						396
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						388
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/middleware/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 401,
			"name": "backend/secret",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 402,
					"name": "Secret",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements a class for handling secret keys in your Koji."
					},
					"children": [
						{
							"id": 403,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 404,
									"name": "new Secret",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst secret = new KojiBackend.Secret({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 405,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 402,
										"name": "Secret"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 412,
							"name": "generateSignedUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/secret/index.ts",
									"line": 81,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 413,
									"name": "generateSignedUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a signed URL.",
										"returns": "URL for resource.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst secretPath = await secret.generateSignedUrl();\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 414,
											"name": "resource",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Path to resource"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 415,
											"name": "expireSeconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Expiration in seconds"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 408,
							"name": "resolveValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/secret/index.ts",
									"line": 52,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 409,
									"name": "resolveValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the value for a secret key.",
										"returns": "Key value.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst keyValue = await secret.resolveValue<string>(SecretRoutes.KEYSTORE_GET + \"/mySecretKey\");\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 410,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 411,
											"name": "keyPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Path for secret key"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								403
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								412,
								408
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/secret/index.ts",
							"line": 16,
							"character": 19
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						402
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/secret/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 582,
			"name": "frontend",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 595,
					"name": "Koji",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Provides frontend methods for your Koji."
					},
					"children": [
						{
							"id": 596,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 597,
									"name": "new Koji",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 595,
										"name": "Koji"
									}
								}
							]
						},
						{
							"id": 602,
							"name": "analytics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 53,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 425,
								"name": "Analytics"
							},
							"defaultValue": "..."
						},
						{
							"id": 599,
							"name": "configInitialized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Indicates that the Koji.config() call has been made."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 47,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 603,
							"name": "dispatch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 54,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 462,
								"name": "Dispatch"
							},
							"defaultValue": "..."
						},
						{
							"id": 604,
							"name": "iap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 55,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"id": 528,
								"name": "IAP"
							},
							"defaultValue": "..."
						},
						{
							"id": 605,
							"name": "identity",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 56,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 555,
								"name": "Identity"
							},
							"defaultValue": "..."
						},
						{
							"id": 598,
							"name": "isReady",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Indicates that the Koji.ready() call has been made."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 45,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 606,
							"name": "playerState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 57,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"id": 663,
								"name": "PlayerState"
							},
							"defaultValue": "..."
						},
						{
							"id": 601,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The project's id."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 51,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 607,
							"name": "remix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 58,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 691,
								"name": "Remix"
							},
							"defaultValue": "..."
						},
						{
							"id": 600,
							"name": "services",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "The configured service endpoints."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 49,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 588,
								"name": "Services"
							},
							"defaultValue": "..."
						},
						{
							"id": 608,
							"name": "ui",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 59,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 974,
								"name": "UI"
							},
							"defaultValue": "..."
						},
						{
							"id": 609,
							"name": "config",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 75,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 610,
									"name": "config",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Initializes this package for use with configuration data from the `koji.json` file. This method sets up the services, remix values, development environment, and deployment instructions for your Koji. It also performs some basic structural checks.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nKoji.config(require('koji.json'));\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 611,
											"name": "kojiConfig",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Configuration data for the Koji.\n"
											},
											"type": {
												"type": "reference",
												"id": 583,
												"name": "KojiConfig"
											},
											"defaultValue": "..."
										},
										{
											"id": 612,
											"name": "kojiConfigOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 592,
												"name": "KojiConfigOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 625,
							"name": "ready",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 245,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 626,
									"name": "ready",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Indicates that the Koji is ready to start receiving events.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.ready\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								596
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								602,
								599,
								603,
								604,
								605,
								598,
								606,
								601,
								607,
								600,
								608
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								609,
								625
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 43,
							"character": 17
						}
					]
				},
				{
					"id": 583,
					"name": "KojiConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines the configuration data for the Koji."
					},
					"children": [
						{
							"id": 587,
							"name": "@@initialTransform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Placeholder values for new remixes."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 21,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 585,
							"name": "deploy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for deploying the services to production."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 19,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 584,
							"name": "develop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for setting up the services in a development/editor environment."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 17,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 586,
							"name": "remixData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default values for the customizable remix data."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								587,
								585,
								584,
								586
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 15,
							"character": 27
						}
					]
				},
				{
					"id": 592,
					"name": "KojiConfigOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for the Koji."
					},
					"children": [
						{
							"id": 593,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Unique identifier for the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 36,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 594,
							"name": "services",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Defines services for the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 588,
								"name": "Services"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								593,
								594
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 34,
							"character": 34
						}
					]
				},
				{
					"id": 588,
					"name": "Services",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Key-value pairs of services and endpoints."
					},
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 29,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 589,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 29,
									"character": 22
								}
							],
							"indexSignature": {
								"id": 590,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 591,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "undefined"
										}
									]
								}
							}
						}
					}
				},
				{
					"id": 627,
					"name": "default",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 595,
						"name": "Koji"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						595
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						583,
						592
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						588
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						627
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 418,
			"name": "frontend/@decorators/client",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 419,
					"name": "client",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"decorates": [
						{
							"type": "reference",
							"id": 428,
							"name": "track"
						},
						{
							"type": "reference",
							"id": 531,
							"name": "getToken"
						},
						{
							"type": "reference",
							"id": 533,
							"name": "startPurchase"
						},
						{
							"type": "reference",
							"id": 558,
							"name": "getToken"
						},
						{
							"type": "reference",
							"id": 625,
							"name": "ready"
						},
						{
							"type": "reference",
							"id": 668,
							"name": "subscribe"
						},
						{
							"type": "reference",
							"id": 697,
							"name": "init"
						},
						{
							"type": "reference",
							"id": 700,
							"name": "get"
						},
						{
							"type": "reference",
							"id": 705,
							"name": "set"
						},
						{
							"type": "reference",
							"id": 708,
							"name": "overwrite"
						},
						{
							"type": "reference",
							"id": 711,
							"name": "finish"
						},
						{
							"type": "reference",
							"id": 713,
							"name": "encryptValue"
						},
						{
							"type": "reference",
							"id": 716,
							"name": "decryptValue"
						},
						{
							"type": "reference",
							"id": 999,
							"name": "to"
						},
						{
							"type": "reference",
							"id": 1002,
							"name": "presentInModal"
						},
						{
							"type": "reference",
							"id": 1005,
							"name": "createRemix"
						},
						{
							"type": "reference",
							"id": 1008,
							"name": "openShareDialog"
						},
						{
							"type": "reference",
							"id": 1037,
							"name": "confirmation"
						},
						{
							"type": "reference",
							"id": 1040,
							"name": "alert"
						}
					],
					"sources": [
						{
							"fileName": "frontend/@decorators/client.ts",
							"line": 10,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 420,
							"name": "client",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Verifies that client-side methods are used only in frontend services of the Koji.",
								"returns": "Method's behavior or an error, if the method is being invoked in a node/backend environment.\n"
							},
							"parameters": [
								{
									"id": 421,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Class to which the method belongs."
									},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								},
								{
									"id": 422,
									"name": "propertyKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 423,
									"name": "descriptor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method's behavior (which can be mutated inside this function)."
									},
									"type": {
										"type": "reference",
										"name": "PropertyDescriptor"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						419
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/@decorators/client.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 424,
			"name": "frontend/analytics",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 425,
					"name": "Analytics",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Enables you to track custom events in your Koji templates. For example, track `onClick` events for the links and buttons in a Koji.",
						"text": "To view the analytics data for your published Koji, go to **Manage this Koji > Open Creator Dashboard > Open Analytics**. You will see data for your custom events along with a standard set of built-in metrics, which are calculated from the Koji’s access logs.\n\n<p class=\"tip\">Analytics data is processed at frequent intervals throughout the day. If you are testing the custom events in a published template and you don’t see results at first, wait 10 minutes to account for data processing latency, and then check again.</p>\n"
					},
					"children": [
						{
							"id": 426,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 427,
									"name": "new Analytics",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 425,
										"name": "Analytics"
									}
								}
							]
						},
						{
							"id": 428,
							"name": "track",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/analytics/index.ts",
									"line": 28,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 429,
									"name": "track",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates an analytics event with the specified name and data payload, if applicable.",
										"returns": "Indicates whether the event was generated.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```javascript\nconst event = Koji.analytics.track('My Custom Event');\n\n// with optional payload\nconst event = Koji.analytics.track('Won game', { score: 120 });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 430,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the custom event."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 431,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "List of custom key-value pairs to save with the event."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 432,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 433,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 434,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								426
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								428
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/analytics/index.ts",
							"line": 10,
							"character": 22
						}
					]
				},
				{
					"id": 435,
					"name": "analytics",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/analytics/index.ts",
							"line": 42,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"id": 425,
						"name": "Analytics"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						425
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						435
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/analytics/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 436,
			"name": "frontend/dispatch",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 437,
					"name": "PlatformEvents",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 438,
							"name": "CONNECTED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 23,
									"character": 11
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED\""
						},
						{
							"id": 439,
							"name": "CONNECTED_CLIENTS_CHANGED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 24,
									"character": 27
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED_CLIENTS_CHANGED\""
						},
						{
							"id": 440,
							"name": "IDENTIFY",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 25,
									"character": 10
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/IDENTIFY\""
						},
						{
							"id": 441,
							"name": "SET_USER_INFO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 26,
									"character": 15
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/SET_USER_INFO\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								438,
								439,
								440,
								441
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 22,
							"character": 26
						}
					]
				},
				{
					"id": 462,
					"name": "Dispatch",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 463,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 464,
									"name": "new Dispatch",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 462,
										"name": "Dispatch"
									}
								}
							]
						},
						{
							"id": 477,
							"name": "connect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 66,
									"character": 22
								}
							],
							"signatures": [
								{
									"id": 478,
									"name": "connect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 479,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DispatchConfigurationInput"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 459,
												"name": "ConnectionInfo"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 517,
							"name": "disconnect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 195,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 518,
									"name": "disconnect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 509,
							"name": "emitEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 169,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 510,
									"name": "emitEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 511,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 512,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 513,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 514,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 515,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 516,
											"name": "recipients",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 506,
							"name": "identify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 163,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 507,
									"name": "identify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 508,
											"name": "authToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 472,
							"name": "info",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 57,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 473,
									"name": "info",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 456,
													"name": "ShardInfo"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 496,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 145,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 497,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 498,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 499,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 446,
												"name": "MessageHandlerCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 474,
							"name": "setProjectId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 62,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 475,
									"name": "setProjectId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 476,
											"name": "projectId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 500,
							"name": "setUserInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 159,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 501,
									"name": "setUserInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 502,
											"name": "userInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 503,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 504,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 505,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								463
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								477,
								517,
								509,
								506,
								472,
								496,
								474,
								500
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 47,
							"character": 21
						}
					]
				},
				{
					"id": 459,
					"name": "ConnectionInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 460,
							"name": "clientId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 43,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 461,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 44,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								460,
								461
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 42,
							"character": 31
						}
					]
				},
				{
					"id": 442,
					"name": "MessageHandler",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 445,
							"name": "callback",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 32,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 446,
								"name": "MessageHandlerCallback"
							}
						},
						{
							"id": 444,
							"name": "eventName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 31,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 443,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 30,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								445,
								444,
								443
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 29,
							"character": 31
						}
					]
				},
				{
					"id": 456,
					"name": "ShardInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 458,
							"name": "numConnectedClients",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 39,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 457,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 38,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								458,
								457
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 37,
							"character": 26
						}
					]
				},
				{
					"id": 446,
					"name": "MessageHandlerCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 35,
							"character": 34
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 447,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 35,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 448,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 449,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 450,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "frontend/dispatch/index.ts",
															"line": 35,
															"character": 46
														}
													],
													"indexSignature": {
														"id": 451,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 452,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 453,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 454,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 455,
															"name": "latencyMs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "frontend/dispatch/index.ts",
																	"line": 35,
																	"character": 94
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																455
															]
														}
													],
													"sources": [
														{
															"fileName": "frontend/dispatch/index.ts",
															"line": 35,
															"character": 82
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 519,
					"name": "dispatch",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 201,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"id": 462,
						"name": "Dispatch"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						437
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						462
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						459,
						442,
						456
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						446
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						519
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/dispatch/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 520,
			"name": "frontend/iap",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 528,
					"name": "IAP",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages in-app purchase transactions on the frontend of your Koji."
					},
					"children": [
						{
							"id": 529,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 530,
									"name": "new IAP",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 528,
										"name": "IAP"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 631,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 630,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 531,
							"name": "getToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 35,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 532,
									"name": "getToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates an IAP Token (used to resolve receipts in the backend)",
										"tags": [
											{
												"tag": "example",
												"text": "\n``` javascript\nconst IAPToken = await Koji.iap.getToken();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 533,
							"name": "startPurchase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 58,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 534,
									"name": "startPurchase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to purchase a product from the Koji. Products are defined in the entitlements file and registered or updated when the Koji is published.",
										"tags": [
											{
												"tag": "example",
												"text": "\n``` javascript\nKoji.iap.startPurchase(sku, purchaseOptions);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 535,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Identifier for the product to purchase.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 536,
											"name": "purchaseOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 521,
												"name": "PurchaseOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 524,
												"name": "Purchase"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								529
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								531,
								533
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 25,
							"character": 16
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 629,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 524,
					"name": "Purchase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Results of an in-app purchase transaction."
					},
					"children": [
						{
							"id": 526,
							"name": "iapToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Temporary token for the current user’s session. See [[getToken]]."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 18,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 527,
							"name": "receiptId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Unique identifier for the receipt, if the purchase was successful, or `undefined`, if not."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 20,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 525,
							"name": "success",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates whether the purchase was successful."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 16,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								526,
								527,
								525
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 14,
							"character": 25
						}
					]
				},
				{
					"id": 521,
					"name": "PurchaseOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Custom information to add to a [[IapReceipt | transaction receipt]] for a given in-app purchase."
					},
					"children": [
						{
							"id": 522,
							"name": "amount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Amount of the purchase."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 8,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 523,
							"name": "customMessage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Custom message associated with the purchase. This value is stored as a custom attribute on the [[IapReceipt | transaction receipt]]."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 10,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								522,
								523
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 6,
							"character": 32
						}
					]
				},
				{
					"id": 551,
					"name": "iap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 78,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 528,
						"name": "IAP"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						528
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						524,
						521
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						551
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/iap/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 553,
			"name": "frontend/identity",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 555,
					"name": "Identity",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages authentication and authorization on the frontend of your Koji."
					},
					"children": [
						{
							"id": 556,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 557,
									"name": "new Identity",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 555,
										"name": "Identity"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 631,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 630,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 560,
							"name": "checkGrants",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 50,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 561,
									"name": "checkGrants",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks whether the user has granted authorizations to the Koji. Use this method to determine whether to request authorization for certain capabilities.",
										"returns": "Indicates whether the user has already granted authorization for the capabilities.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst hasGrant = await Koji.identity.checkGrants(['username', 'push_notifications']);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 562,
											"name": "grants",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "List of authorization grants to check for the user."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 554,
													"name": "AuthGrantCapability"
												}
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 558,
							"name": "getToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 27,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 559,
									"name": "getToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a token identifying the current user.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst token = await Koji.identity.getToken();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 563,
							"name": "requestGrants",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 73,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 564,
									"name": "requestGrants",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Requests the specified authorization grants from the user for the Koji.",
										"returns": "\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst hasGrant = await Koji.identity.requestGrants(['username', 'push_notifications']);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 565,
											"name": "grants",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "List of authorization grants to request from the user."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 554,
													"name": "AuthGrantCapability"
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 566,
											"name": "usageDescription",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Custom message to display when requesting the grant."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								556
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								560,
								558,
								563
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 17,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 629,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 554,
					"name": "AuthGrantCapability",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Capabilities that a user can grant the current Koji authorization to use."
					},
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 8,
							"character": 31
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "push_notifications"
							},
							{
								"type": "literal",
								"value": "username"
							}
						]
					}
				},
				{
					"id": 581,
					"name": "identity",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 86,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"id": 555,
						"name": "Identity"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						555
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						554
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						581
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/identity/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 552,
			"name": "frontend/identity/index.spec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"sources": [
				{
					"fileName": "frontend/identity/index.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 628,
			"name": "frontend/kojiBridge",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 629,
					"name": "KojiBridge",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Enables communication between the platform and the Koji."
					},
					"children": [
						{
							"id": 630,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 631,
									"name": "new KojiBridge",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 629,
										"name": "KojiBridge"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								630
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/kojiBridge/index.ts",
							"line": 20,
							"character": 23
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 528,
							"name": "IAP"
						},
						{
							"type": "reference",
							"id": 555,
							"name": "Identity"
						},
						{
							"type": "reference",
							"id": 663,
							"name": "PlayerState"
						},
						{
							"type": "reference",
							"id": 691,
							"name": "Remix"
						},
						{
							"type": "reference",
							"id": 846,
							"name": "Capture"
						},
						{
							"type": "reference",
							"id": 974,
							"name": "UI"
						},
						{
							"type": "reference",
							"id": 996,
							"name": "Navigate"
						},
						{
							"type": "reference",
							"id": 1034,
							"name": "Present"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						629
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/kojiBridge/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 646,
			"name": "frontend/playerState",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 663,
					"name": "PlayerState",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages the context of the Koji to enable distinct experiences for different users and views."
					},
					"children": [
						{
							"id": 664,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 665,
									"name": "new PlayerState",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 663,
										"name": "PlayerState"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 631,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 630,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 666,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "The initial context of the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 60,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"id": 647,
								"name": "PlayerStateContext"
							},
							"defaultValue": "'default'"
						},
						{
							"id": 667,
							"name": "receiptType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The type of receipt."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 62,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "buyer"
									},
									{
										"type": "literal",
										"value": "seller"
									}
								]
							}
						},
						{
							"id": 668,
							"name": "subscribe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 96,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 669,
									"name": "subscribe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens to changes in remix state and invokes a callback function to enable different experiences during remix, preview, or use.",
										"returns": "Function to unsubscribe from remix state listener.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst unsubscribe = Koji.playerState.subscribe((remixing, { type, mode }) => {\n // Change Koji experience\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 670,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 658,
												"name": "IsRemixingCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								664
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								666,
								667
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								668
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 58,
							"character": 24
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 629,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 654,
					"name": "EditorAttributes",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Describes the remixer's editor."
					},
					"children": [
						{
							"id": 656,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 38,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "edit"
									},
									{
										"type": "literal",
										"value": "new"
									}
								]
							}
						},
						{
							"id": 655,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "[[EditorType]]"
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 37,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "instant"
									},
									{
										"type": "literal",
										"value": "full"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								656,
								655
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 35,
							"character": 33
						}
					]
				},
				{
					"id": 649,
					"name": "ExpectedQueryParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {},
					"children": [
						{
							"id": 650,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 19,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "about"
									},
									{
										"type": "literal",
										"value": "admin"
									},
									{
										"type": "literal",
										"value": "remix"
									},
									{
										"type": "literal",
										"value": "sticker"
									},
									{
										"type": "literal",
										"value": "receipt"
									},
									{
										"type": "literal",
										"value": "screenshot"
									},
									{
										"type": "literal",
										"value": "default"
									}
								]
							}
						},
						{
							"id": 651,
							"name": "dynamic-receipt",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 19,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "buyer"
									},
									{
										"type": "literal",
										"value": "seller"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								650,
								651
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 18,
							"character": 40
						}
					]
				},
				{
					"id": 653,
					"name": "EditorMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Distinguishes between a `new` remix and an `edit` to the user’s existing Koji."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 30,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "edit"
							},
							{
								"type": "literal",
								"value": "new"
							}
						]
					}
				},
				{
					"id": 652,
					"name": "EditorType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Type of editor, either `instant` for an instant remix or `full` for the code editor."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 26,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "instant"
							},
							{
								"type": "literal",
								"value": "full"
							}
						]
					}
				},
				{
					"id": 658,
					"name": "IsRemixingCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 46,
							"character": 30
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 659,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"comment": {
								"shortText": "Function to handle changes in remix state. Receives the `isRemixing` and `editorAttributes` properties as inputs."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 46,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 660,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Function to handle changes in remix state. Receives the `isRemixing` and `editorAttributes` properties as inputs."
									},
									"parameters": [
										{
											"id": 661,
											"name": "isRemixing",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether the Koji is in remixing mode."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 662,
											"name": "editorAttributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 654,
												"name": "EditorAttributes"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 647,
					"name": "PlayerStateContext",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Context in which the Koji is being viewed. A Koji can provide a distinct experience for each context."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 8,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "about"
							},
							{
								"type": "literal",
								"value": "admin"
							},
							{
								"type": "literal",
								"value": "remix"
							},
							{
								"type": "literal",
								"value": "sticker"
							},
							{
								"type": "literal",
								"value": "receipt"
							},
							{
								"type": "literal",
								"value": "screenshot"
							},
							{
								"type": "literal",
								"value": "default"
							}
						]
					}
				},
				{
					"id": 648,
					"name": "PlayerStateReceiptType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Who is viewing the receipt for a transaction, either `buyer` or `seller`."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 13,
							"character": 34
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "buyer"
							},
							{
								"type": "literal",
								"value": "seller"
							}
						]
					}
				},
				{
					"id": 657,
					"name": "ReceiptType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Who is viewing the receipt for a transaction, either `buyer` or `seller`."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 44,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "seller"
							},
							{
								"type": "literal",
								"value": "buyer"
							}
						]
					}
				},
				{
					"id": 685,
					"name": "playerState",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 106,
							"character": 24
						}
					],
					"type": {
						"type": "reference",
						"id": 663,
						"name": "PlayerState"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						663
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						654,
						649
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						653,
						652,
						658,
						647,
						648,
						657
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						685
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/playerState/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 686,
			"name": "frontend/remix",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 691,
					"name": "Remix",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages the remixing experience for your Koji."
					},
					"children": [
						{
							"id": 692,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 693,
									"name": "new Remix",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 691,
										"name": "Remix"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 631,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 630,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 716,
							"name": "decryptValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 197,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 717,
									"name": "decryptValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves sensitive data that was [[encryptValue | stored as an encrypted value]].",
										"text": "<p class=\"note\">Only the creator of the Koji can access the decrypted value with this method. For example, to check that the value was entered correctly. To retrieve the value for other users, use [[resolveValue]] on the backend.</p>\n",
										"returns": "Decrypted value.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst value = await Koji.remix.decryptValue(encryptPath);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 718,
											"name": "encryptedValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Path where the encrypted value is stored."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 713,
							"name": "encryptValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 169,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 714,
									"name": "encryptValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stores sensitive data as an encrypted value. The sensitive data can only be accessed programmatically and is not available when the Koji is remixed.",
										"returns": "Path where the encrypted value is stored. Use this value to [[decryptValue | decrypt the value]] on the frontend, for the creator, or to [[resolveValue | resolve the value]] on the backend, for other users.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst encryptPath = await Koji.remix.encryptValue(text);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 715,
											"name": "rawValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value to encrypt."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 711,
							"name": "finish",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 149,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 712,
									"name": "finish",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Advances the Koji from remix to preview.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\n<button onClick={() => Koji.remix.finish()}>Next</button>\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 700,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 94,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 701,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the remix data for the Koji.",
										"returns": "Object containing the current remix data.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\n\n// Return the entire `remixData` object\nconst values = Koji.remix.get();\n\n// Return a particular value\nconst backgroundColor = Koji.remix.get(['colors', 'background']);\n\n// Return a particular value with a default if the value is not defined\nconst textColor = Koji.remix.get(['colors', 'text'], '#000000');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 702,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 703,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An array of keys to target a specific value in the object."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 704,
											"name": "defaultValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "A value to return if no value exists at the targeted path."
											},
											"type": {
												"type": "reference",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 697,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 54,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 698,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Initializes the remix data for the Koji with default values.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.remix.init(require('../../../koji.json'));\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 699,
											"name": "remixData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 708,
							"name": "overwrite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 135,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 709,
									"name": "overwrite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Replaces all remix data with the specified object.",
										"text": "<p class=\"note\">This method overwrites all existing values in the remix data. To update specific values only, use [[set]].</p>\n",
										"returns": "Indicates whether the remix data was successfully replaced.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nawait Koji.remix.overwrite({'myColor': color, 'myText': text});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 710,
											"name": "newValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing the new remix data for the Koji."
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 705,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 114,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 706,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the specified values in the remix data.",
										"text": "<p class=\"note\">This method updates only the values that are specified in `newValue`. If other values exist, they not changed. To replace all remix data, use [[overwrite]].</p>\n",
										"returns": "Indicates whether the values were successfully updated.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nawait Koji.remix.set({'myColor': color});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 707,
											"name": "newValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Key-value pairs to update in the remix data."
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								692
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								716,
								713,
								711,
								700,
								697,
								708,
								705
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/remix/index.ts",
							"line": 25,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 629,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 687,
					"name": "ValueChanged",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Communicates changes to remix data."
					},
					"children": [
						{
							"id": 689,
							"name": "newValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "New value."
							},
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 17,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 688,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Path of the changed value."
							},
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 15,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 690,
							"name": "savedValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Previous value."
							},
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 19,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								689,
								688,
								690
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/remix/index.ts",
							"line": 13,
							"character": 29
						}
					]
				},
				{
					"id": 735,
					"name": "remix",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/remix/index.ts",
							"line": 233,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"id": 691,
						"name": "Remix"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						691
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						687
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						735
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/remix/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 736,
			"name": "frontend/serviceMap",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 741,
					"name": "ServiceMap",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages endpoints for the services running in your Koji."
					},
					"children": [
						{
							"id": 742,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 743,
									"name": "new ServiceMap",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 741,
										"name": "ServiceMap"
									}
								}
							]
						},
						{
							"id": 744,
							"name": "services",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Key-value pairs of services and endpoints."
							},
							"sources": [
								{
									"fileName": "frontend/serviceMap/index.ts",
									"line": 8,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 737,
								"name": "Services"
							},
							"defaultValue": "..."
						},
						{
							"id": 745,
							"name": "config",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/serviceMap/index.ts",
									"line": 22,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 746,
									"name": "config",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the environment variables for the available services in the Koji. This method automatically scopes the variables for instant remixes of the original Koji.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.serviceMap.config({\n frontend: process.env.KOJI_SERVICE_URL_frontend\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 747,
											"name": "envMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Key-value pairs of services and endpoints in the original Koji.\n"
											},
											"type": {
												"type": "reference",
												"id": 737,
												"name": "Services"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								742
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								744
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								745
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/serviceMap/index.ts",
							"line": 6,
							"character": 23
						}
					]
				},
				{
					"id": 737,
					"name": "Services",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/serviceMap/index.ts",
							"line": 1,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 738,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/serviceMap/index.ts",
									"line": 1,
									"character": 22
								}
							],
							"indexSignature": {
								"id": 739,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 740,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					}
				},
				{
					"id": 748,
					"name": "serviceMap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/serviceMap/index.ts",
							"line": 42,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"id": 741,
						"name": "ServiceMap"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						741
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						737
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						748
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/serviceMap/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 973,
			"name": "frontend/ui",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 974,
					"name": "UI",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 975,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 976,
									"name": "new UI",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 974,
										"name": "UI"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 631,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 630,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 977,
							"name": "capture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/index.ts",
									"line": 7,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 846,
								"name": "Capture"
							},
							"defaultValue": "..."
						},
						{
							"id": 978,
							"name": "navigate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/index.ts",
									"line": 8,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 996,
								"name": "Navigate"
							},
							"defaultValue": "..."
						},
						{
							"id": 979,
							"name": "present",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/index.ts",
									"line": 9,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 1034,
								"name": "Present"
							},
							"defaultValue": "..."
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								975
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								977,
								978,
								979
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/index.ts",
							"line": 6,
							"character": 15
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 629,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 994,
					"name": "ui",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/index.ts",
							"line": 12,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"id": 974,
						"name": "UI"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						974
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						994
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 749,
			"name": "frontend/ui/capture",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 763,
					"name": "CaptureStatus",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Whether the user completed the selection (`succeeded`) or exited the control without selecting a value (`cancelled`)."
					},
					"children": [
						{
							"id": 765,
							"name": "CANCELLED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 31,
									"character": 11
								}
							],
							"defaultValue": "\"cancelled\""
						},
						{
							"id": 764,
							"name": "SUCCEEDED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 30,
									"character": 11
								}
							],
							"defaultValue": "\"succeeded\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								765,
								764
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 29,
							"character": 25
						}
					]
				},
				{
					"id": 766,
					"name": "CaptureType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Capture method types."
					},
					"children": [
						{
							"id": 767,
							"name": "COLOR",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 36,
									"character": 7
								}
							],
							"defaultValue": "\"color\""
						},
						{
							"id": 768,
							"name": "FILE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 37,
									"character": 6
								}
							],
							"defaultValue": "\"file\""
						},
						{
							"id": 769,
							"name": "IMAGE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 38,
									"character": 7
								}
							],
							"defaultValue": "\"image\""
						},
						{
							"id": 770,
							"name": "KOJI",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 39,
									"character": 6
								}
							],
							"defaultValue": "\"koji\""
						},
						{
							"id": 771,
							"name": "MEDIA",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 40,
									"character": 7
								}
							],
							"defaultValue": "\"media\""
						},
						{
							"id": 772,
							"name": "RANGE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 41,
									"character": 7
								}
							],
							"defaultValue": "\"range\""
						},
						{
							"id": 773,
							"name": "SELECT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 42,
									"character": 8
								}
							],
							"defaultValue": "\"select\""
						},
						{
							"id": 774,
							"name": "SOUND",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 43,
									"character": 7
								}
							],
							"defaultValue": "\"sound\""
						},
						{
							"id": 775,
							"name": "VIDEO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 44,
									"character": 7
								}
							],
							"defaultValue": "\"video\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								767,
								768,
								769,
								770,
								771,
								772,
								773,
								774,
								775
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 35,
							"character": 23
						}
					]
				},
				{
					"id": 846,
					"name": "Capture",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Captures user input on the frontend of your Koji."
					},
					"children": [
						{
							"id": 847,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 848,
									"name": "new Capture",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 846,
										"name": "Capture"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 631,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 630,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 858,
							"name": "color",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 261,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 859,
									"name": "color",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a color, either from a swatch or by entering a color code. Supports HEX, RGB, or HSL by default. Supports RBGA or HSLA, if transparency is enabled in the capture options.",
										"returns": "Color code as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst color = await Koji.ui.capture.color();\n\n// Enable transparency and return an object\nconst color = await Koji.ui.capture.color({ allowAlpha: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 860,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 794,
												"name": "CaptureColorOptions"
											}
										},
										{
											"id": 861,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the color code as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 751,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 862,
									"name": "color",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 863,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 794,
												"name": "CaptureColorOptions"
											}
										},
										{
											"id": 864,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 865,
									"name": "color",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 866,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 794,
												"name": "CaptureColorOptions"
											}
										},
										{
											"id": 867,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 750,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 868,
							"name": "custom",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 296,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 869,
									"name": "custom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a value from a Custom VCC.",
										"returns": "Color code as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst music = await Koji.ui.capture.custom({ name: 'scloud' });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 870,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 790,
												"name": "CaptureCustomOptions"
											}
										},
										{
											"id": 871,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the value captured by the Custom VCC."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 751,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 872,
									"name": "custom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 873,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 790,
												"name": "CaptureCustomOptions"
											}
										},
										{
											"id": 874,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 875,
									"name": "custom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 876,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 790,
												"name": "CaptureCustomOptions"
											}
										},
										{
											"id": 877,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 878,
							"name": "file",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 338,
									"character": 6
								}
							],
							"signatures": [
								{
									"id": 879,
									"name": "file",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to upload a file of any type. Use this method to allow the user to upload raw files in their original format. For example, to capture high-resolution images for download rather than for display in a browser.",
										"text": "To apply automatic transcoding and transformations for specific file types, use the associated method. See [[image]], [[video]], [[sound]], or [[media]].\n",
										"returns": "URL to the file as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst file = await Koji.ui.capture.file();\n\n// Return an object\nconst file = await Koji.ui.capture.file({}, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 880,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 820,
												"name": "CaptureFileOptions"
											}
										},
										{
											"id": 881,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the file as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 751,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 882,
									"name": "file",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 883,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 820,
												"name": "CaptureFileOptions"
											}
										},
										{
											"id": 884,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 885,
									"name": "file",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 886,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 820,
												"name": "CaptureFileOptions"
											}
										},
										{
											"id": 887,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 750,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 888,
							"name": "image",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 376,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 889,
									"name": "image",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select an image by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method when you want to limit the user to selecting an image.",
										"text": "To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n",
										"returns": "URL to the image asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst image = await Koji.ui.capture.image();\n\n// Hide asset packs and return an object\nconst image = await Koji.ui.capture.image({ hideExtensions: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 890,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 797,
												"name": "CaptureImageOptions"
											}
										},
										{
											"id": 891,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the image asset as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 751,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 892,
									"name": "image",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 893,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 797,
												"name": "CaptureImageOptions"
											}
										},
										{
											"id": 894,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 895,
									"name": "image",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 896,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 797,
												"name": "CaptureImageOptions"
											}
										},
										{
											"id": 897,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 750,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 898,
							"name": "koji",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 412,
									"character": 6
								}
							],
							"signatures": [
								{
									"id": 899,
									"name": "koji",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to create a new Koji or select an existing Koji, either from the user’s profile or from a URL.",
										"returns": "URL to the Koji as a string or the [[VerboseCapture]] object, if `verbose` is `true`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst koji = await Koji.ui.capture.koji();\n\n// Return an object\nconst koji = await Koji.ui.capture.koji({}, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 900,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 821,
												"name": "CaptureKojiOptions"
											}
										},
										{
											"id": 901,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the Koji as a string.\n"
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 751,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 902,
									"name": "koji",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 903,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 821,
												"name": "CaptureKojiOptions"
											}
										},
										{
											"id": 904,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 905,
									"name": "koji",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 906,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 821,
												"name": "CaptureKojiOptions"
											}
										},
										{
											"id": 907,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 750,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 908,
							"name": "media",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 448,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 909,
									"name": "media",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select an image, file, sound, or video by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method to allow the user to select from more than one type of media with a single control. For example, allow the user to select an image or a video. You can limit the types of media to allow and configure options for each allowed type.",
										"returns": "\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst media = await Koji.ui.capture.media();\n\n// Limit to image or video, hide asset packs, return an object with extended metadata, transcode videos for HLS\nconst media = await Koji.ui.capture.media({ acceptOnly: [image,video], hideExtensions: true, returnType: 'extended', videoOptions: { hls: true } }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 910,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 841,
												"name": "CaptureMediaOptions"
											}
										},
										{
											"id": 911,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns only the value of the media capture, which is either the URL to the media as a string or an object with the URL and additional metadata."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 751,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 912,
									"name": "media",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 913,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 841,
												"name": "CaptureMediaOptions"
											}
										},
										{
											"id": 914,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 915,
									"name": "media",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 916,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 841,
												"name": "CaptureMediaOptions"
											}
										},
										{
											"id": 917,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 750,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 918,
							"name": "range",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 503,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 919,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a numeric value within a certain range. You can configure the minimum value, maximum value, and default increment.",
										"returns": "Numeric value as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst size = await Koji.ui.capture.range();\n\n// Return an object\nconst size = await Koji.ui.capture.range({ min: 0, max: 60, step: 3 }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 920,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 822,
												"name": "CaptureRangeOptions"
											}
										},
										{
											"id": 921,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the numeric value as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 751,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 922,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 923,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 822,
												"name": "CaptureRangeOptions"
											}
										},
										{
											"id": 924,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 925,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 926,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 822,
												"name": "CaptureRangeOptions"
											}
										},
										{
											"id": 927,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 750,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 928,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 546,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 929,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select from a predefined list of options.",
										"returns": "Value of the predefined option as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst option = await Koji.ui.capture.select();\n\n// Select from three options\nconst option = await Koji.ui.capture.select(\n { options: [\n   { value: \"one\", label: \"Option one\" },\n   { value: \"two\", label: \"Option two\" },\n   { value: \"three\", label: \"Option three\" }],\n   placeholder: \"Choose an option\"});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 930,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 830,
												"name": "CaptureSelectOptions"
											}
										},
										{
											"id": 931,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the option as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 751,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 932,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 933,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 830,
												"name": "CaptureSelectOptions"
											}
										},
										{
											"id": 934,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 935,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 936,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 830,
												"name": "CaptureSelectOptions"
											}
										},
										{
											"id": 937,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 750,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 938,
							"name": "sound",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 586,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 939,
									"name": "sound",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a sound by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method when you want to limit the user to selecting a sound.",
										"text": "To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n",
										"returns": "URL to the audio asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst sound = await Koji.ui.capture.sound();\n\n// Hide asset packs and return an object\nconst sound = await Koji.ui.capture.sound({ hideExtensions: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 940,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 839,
												"name": "CaptureSoundOptions"
											}
										},
										{
											"id": 941,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the audio asset as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 751,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 942,
									"name": "sound",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 943,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 839,
												"name": "CaptureSoundOptions"
											}
										},
										{
											"id": 944,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 945,
									"name": "sound",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 946,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 839,
												"name": "CaptureSoundOptions"
											}
										},
										{
											"id": 947,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 750,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 948,
							"name": "video",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 624,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 949,
									"name": "video",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to upload a video. Use this method when you want to limit the user to uploading a video file.",
										"text": "To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n",
										"returns": "URL to the video asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst video = await Koji.ui.capture.video();\n\n// Transcode for HLS and return an object\nconst video = await Koji.ui.capture.video({ hls: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 950,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 835,
												"name": "CaptureVideoOptions"
											}
										},
										{
											"id": 951,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the video asset as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 751,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 952,
									"name": "video",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 953,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 835,
												"name": "CaptureVideoOptions"
											}
										},
										{
											"id": 954,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 955,
									"name": "video",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 956,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 835,
												"name": "CaptureVideoOptions"
											}
										},
										{
											"id": 957,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 750,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								847
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								858,
								868,
								878,
								888,
								898,
								908,
								918,
								928,
								938,
								948
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 185,
							"character": 20
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 629,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 794,
					"name": "CaptureColorOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[color]] capture."
					},
					"children": [
						{
							"id": 795,
							"name": "allowAlpha",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates whether to support transparency (`false`, by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 93,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 796,
							"name": "initialValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "A default value to provide to the color capture tool"
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 95,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								795,
								796
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 91,
							"character": 36
						}
					]
				},
				{
					"id": 790,
					"name": "CaptureCustomOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[custom-vcc]] capture."
					},
					"children": [
						{
							"id": 791,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The short name for the custom vcc"
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 81,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 793,
							"name": "typeOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Type options specific to the custom vcc"
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 85,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 792,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "A url where the custom vcc is being hosted"
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 83,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								791,
								793,
								792
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 79,
							"character": 37
						}
					]
				},
				{
					"id": 820,
					"name": "CaptureFileOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[file]] capture."
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 109,
							"character": 35
						}
					]
				},
				{
					"id": 797,
					"name": "CaptureImageOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for an [[image]] capture."
					},
					"children": [
						{
							"id": 799,
							"name": "auto",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Enables optimizations based on content negotiation.",
								"text": "Allowed values: 'webp'\n\nNotes:\n\nAlthough the WebP format produces images at a higher compression ratio with a lower loss of quality, it is not supported in all browsers.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 15,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1063,
								"name": "FastlyOptions.auto"
							}
						},
						{
							"id": 800,
							"name": "bg-color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The bg-color parameter sets the background color of an image to use when applying padding or when replacing transparent pixels.",
								"text": "Value may be one of:\n\nHex RGB value: Both 3- and 6-digit values are acceptable (e.g. a22 or cf23a5).\n\nDecimal RGB: RGB values between 0 and 255. Comma-delimited (e.g. 255,0,0).\n\nDecimal RGB with alpha| RGBA colors include an additional value for alpha (transparency), which ranges from 0 for fully transparent to 1 for fully opaque.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 15,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1064,
								"name": "FastlyOptions.bg-color"
							}
						},
						{
							"id": 801,
							"name": "blur",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a Gaussian blur filter to the image.",
								"text": "Value is a number of pixels between 0.5 and 1000 or a percentage (of the dimensions of the image) suffixed with p (e.g., 1p for 1%).\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 33,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1065,
								"name": "FastlyOptions.blur"
							}
						},
						{
							"id": 802,
							"name": "brightness",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The brightness parameter increases or decreases the amount of perceived light an image radiates or reflects.",
								"text": "Value may be any number between -100 and 100.\n\nNotes:\n\nThe default value is 0. This leaves the image unchanged.\n\nA value of 100 will result in a fully white image.\n\nA value of -100 will result in a fully black image.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 47,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1066,
								"name": "FastlyOptions.brightness"
							}
						},
						{
							"id": 803,
							"name": "contrast",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The contrast parameter increases or decreases the difference between the darkest and lightest tones in an image.",
								"text": "Value may be any number between -100 and 100.\n\nNotes:\n\nThe default value is 0. This leaves the image unchanged.\n\nA value of -100 will result in a fully grey image.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 59,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1067,
								"name": "FastlyOptions.contrast"
							}
						},
						{
							"id": 804,
							"name": "crop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image.",
								"text": "When specifying a crop parameter, the value starts with the desired width and height, either as measurements of pixels, separated with a comma, or as a ratio, separated with a colon (for example, crop=4:3 or crop=640,480 or crop=0.8,0.4).\n\nThe remaining parameters determine the position of the cropped region. On each dimension, placement can be made either with a position coordinate (x or y, which are relative to the top left of the uncropped image) or as a percentage offset from the center of the image using offset-x and offset-y. These can be mixed and matched, but only one method can be used for each dimension (i.e., x can be combined with offset-y but x cannot be combined with offset-x).\n\nOffset positioning acts to distribute the remaining space according to the specified offset proportions. If an image is 2000 pixels wide and is being cropped to 1000 pixels wide, offset-x10 would crop 10% (100 pixels) from the left of the image and 90% (900 pixels) from the right. An offset of 50 centers the crop in the middle of the image.\n\nAppending ,smart to the parameter value enables content-aware algorithms to attempt to crop the image to the desired aspect ratio while intelligently focusing on the most important visual content, including the detection of faces.\n\nIf the specified cropped region is outside the bounds of the image, the transformation will fail with the error \"Invalid transformation for requested image: Invalid crop, region out of bounds\". Append ,safe to the parameter value to override this. In safe mode, the image gets delivered as an intersection of the origin image and the specified cropped region. This avoids the error, but the resulting image may not be of the specified dimensions.\n\nNotes:\n\nx and y can be set as a value in pixels (e.g., 40 is 40 pixels) or as a percentage suffixed with p (e.g., 50p is 50%).\n\noffset-x and offset-y are always interpreted as percentages of the image size (e.g., 25 is 25%).\n\nWhen using aspect ratio cropping, crop must be used in conjunction with a width or height parameter (or both) to return the correct output image size. If no width or height are supplied, the largest area of the requested aspect ratio will be returned based on the dimensions of the source image.\n\nIf any dimension ends up at a fraction of a pixel, it is rounded to the nearest whole pixel.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 83,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1068,
								"name": "FastlyOptions.crop"
							}
						},
						{
							"id": 805,
							"name": "dpr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Device pixel ratio.",
								"text": "The dpr parameter provides a means to multiply image dimensions in order to translate logical pixels (also 'CSS pixels') into physical pixels. The device pixel ratio is therefore the ratio between physical pixels and logical pixels.\n\nIt is usually possible for client-side software to query the host system to determine the DPR of the display the user is viewing. In web browsers, this is available as the Window.devicePixelRatio variable in JavaScript. The iPhone 5 reports a device pixel ratio of 2, because the physical linear resolution is double the logical resolution.\n\nPhysical Resolution: 960 x 640\n\nLogical Resolution: 480 x 320\n\nOther devices report varying device pixel ratios, including non-integer ones. For example, the Nokia Lumia 1020 reports 1.6667, whereas the Samsung Galaxy S4 reports 3.\n\nValue may be any number between 1 and 10.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 99,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "bounds"
									},
									{
										"type": "literal",
										"value": "cover"
									},
									{
										"type": "literal",
										"value": "crop"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1069,
								"name": "FastlyOptions.dpr"
							}
						},
						{
							"id": 806,
							"name": "fit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The fit parameter controls how the image will be constrained within the provided size (width and height) values, in order to maintain the correct proportions."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 103,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1070,
								"name": "FastlyOptions.fit"
							}
						},
						{
							"id": 807,
							"name": "format",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the desired output encoding for the image.",
								"text": "The format parameter enables the source image to be converted (a.k.a., \"transcoded\") from one encoded format to another. This is useful when the source image has been saved in a sub-optimal file format that hinders performance.\n\nNotes:\n\nAutomatic delivery of WebP format images via content negotiation can be enabled using the auto=webp parameter. This will override the format parameter in browsers that support WebP. Although the WebP format produces images at a higher compression ratio with a lower loss of quality, it is not supported in all browsers.\n\nThe source image can be any of the following image formats: JPEG, PNG, GIF, WEBP.\n\nJPEG, progressive JPEG, WebP (Lossy), and PNG8 have a sliding quality scale that supports the quality parameter.\n\nGIF and PNG do not have a sliding quality scale. They do not support the quality parameter.\n\nA progressive JPEG pjpg is an image created using the JPEG suite of compression algorithms that will \"fade in\" successive waves of lines until the entire image has completely arrived. For this reason, progressive JPEGs typically appear to load quicker than the Baseline JPEG jpg format.\n\nWebP support is available in Google Chrome, Mozilla Firefox 65 and later, Safari 14 and later, Opera, and Android Browser.\n\nLossless compression is currently supported for WebP only.\n\nGIF to WebP conversion is currently not supported.\n\nMP4 conversion is only available for animated GIF source images.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 129,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									},
									{
										"type": "literal",
										"value": "gif"
									},
									{
										"type": "literal",
										"value": "png"
									},
									{
										"type": "literal",
										"value": "png8"
									},
									{
										"type": "literal",
										"value": "jpg"
									},
									{
										"type": "literal",
										"value": "pjpg"
									},
									{
										"type": "literal",
										"value": "bjpg"
									},
									{
										"type": "literal",
										"value": "webpll"
									},
									{
										"type": "literal",
										"value": "webply"
									},
									{
										"type": "literal",
										"value": "mp4"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1071,
								"name": "FastlyOptions.format"
							}
						},
						{
							"id": 808,
							"name": "frame",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Extracts the first frame from an animated image sequence."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1072,
								"name": "FastlyOptions.frame"
							}
						},
						{
							"id": 809,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The desired height of the output image.",
								"text": "The height parameter enables dynamic height resizing based on pixels and percent values.\n\nThe value can be either a positive integer or a positive number less than 1. If the value is an integer greater than or equal to 1, the value is interpreted as a pixel height. If the height parameter is less than 1, the value is interpreted as a percentage height.\n\nUnless a width parameter is present, the height value will cause the width of the image to be scaled in proportion to the requested height. If both width and height are omitted, the input image dimensions are used.\n\nNotes:\n\nThe maximum output dimensions are 8,192 x 8,192 pixels.\n\nBecause we use a positive number between 0 and 0.99 to return a percentage-based scaled image, in order to return an image that is 100% or more, a p suffix can be appended to the value. For example, height=250p would return an image that is 250% the height of the original. We use p as a simple way to represent percentages.\n\nIf the requested height is not a whole number of pixels (e.g., as a result of applying a percentage value for height), it is rounded to the nearest integer.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 151,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1073,
								"name": "FastlyOptions.height"
							}
						},
						{
							"id": 798,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium images)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 103,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 810,
							"name": "optimize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The optimize parameter automatically applies optimal quality compression to produce an output image with as much visual fidelity as possible, while minimizing the file size.\nNotes:",
								"text": "Optimize is currently supported by the following output formats: JPEG, WebP.\n\nIf the quality parameter is also provided, quality overrides optimize because it is more precise.\n\nBecause optimize attempts to produce an output image with as much visual quality as possible while minimizing the file size, the operations applied are subject to change.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 162,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "low"
									},
									{
										"type": "literal",
										"value": "medium"
									},
									{
										"type": "literal",
										"value": "high"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1074,
								"name": "FastlyOptions.optimize"
							}
						},
						{
							"id": 811,
							"name": "orient",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "How the image will be orientated.",
								"text": "The orient parameter controls the cardinal orientation of the image.\n\nNotes:\n\nBy default, if the source image contains orientation information stored within its metadata, that orientation will be applied to the image data and the orientation override removed from metadata.\n\nThe numerical values are the same as EXIF rotation numbers.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 174,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									},
									{
										"type": "literal",
										"value": "r"
									},
									{
										"type": "literal",
										"value": "l"
									},
									{
										"type": "literal",
										"value": "h"
									},
									{
										"type": "literal",
										"value": "v"
									},
									{
										"type": "literal",
										"value": "hv"
									},
									{
										"type": "literal",
										"value": "2"
									},
									{
										"type": "literal",
										"value": "3"
									},
									{
										"type": "literal",
										"value": "4"
									},
									{
										"type": "literal",
										"value": "5"
									},
									{
										"type": "literal",
										"value": "6"
									},
									{
										"type": "literal",
										"value": "7"
									},
									{
										"type": "literal",
										"value": "8"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1075,
								"name": "FastlyOptions.orient"
							}
						},
						{
							"id": 812,
							"name": "pad",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Add pixels to the edge of an image.",
								"text": "Notes:\n\nSyntax is very similar to css padding; see examples below.\n\npad={all-sides}\npad={top-and-bottom},{left-and-right}\npad={top},{left-and-right},{bottom}\npad={top},{right},{bottom},{left}\n\nBy default padding applies a background color of white. See bg-color to change that.\n\nIf the source image contains a transparent background and the output image also contains transparency, the padding will be made up of transparent pixels.\n\nWhen using pad and canvas at the same time, pad will be ignored.\n\nValues can be specified using CSS style shorthand values. (see CSS Margin or CSS Padding for more examples).\n\nCSS shorthand allows for all edges to be specified in one property.\n\nAny fractional pixel measurements will be rounded to the nearest whole pixel.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 199,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1076,
								"name": "FastlyOptions.pad"
							}
						},
						{
							"id": 813,
							"name": "precrop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image before any other transformations occur.",
								"text": "Identical to crop except that precrop is performed before any other transformations.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 205,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1077,
								"name": "FastlyOptions.precrop"
							}
						},
						{
							"id": 814,
							"name": "quality",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Output image quality for lossy file formats.",
								"text": "The quality parameter enables control over the compression level for lossy file-formatted images.\n\nValue may be any integer between 1 and 100, where 1 is a lower quality image and a smaller file and 100 is the highest quality image and larger file. If desired, a second quality level can be specified for use when auto=webp is enabled and a WebP output format has been selected.\n\nNotes:\nThe quality parameter can be applied to the following output formats: png8, jpg, pjpg, webp, and webply.\n\nIf no quality parameter is present for jpg, pjpg, or webp, the output image will be returned at the default value set in the Image Optimizer user interface.\n\nIf auto=webp is enabled by the URL or the service settings, the second value will be used as the quality value if the requestor sends the accept: image/webp request header.\n\nWhen only specifying quality, if the output image file size is larger than the input image, the original image will be delivered.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 222,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1078,
								"name": "FastlyOptions.quality"
							}
						},
						{
							"id": 815,
							"name": "resize-filter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The resize-filter parameter enables control over the resizing filter used to generate a new image with a higher or lower number of pixels.",
								"text": "Notes:\n\nWhen making an image smaller, use bicubic, which has a natural sharpening effect.\n\nWhen making an image larger, use bilinear, which has a natural smoothing effect.\n\nWhen resizing pixel art, use nearest, which has a natural pixelation effect.\n\nWhen quality is the main concern, use lanczos, which typically renders the best results.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 222,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "nearest"
									},
									{
										"type": "literal",
										"value": "linear"
									},
									{
										"type": "literal",
										"value": "cubic"
									},
									{
										"type": "literal",
										"value": "lanczos2"
									},
									{
										"type": "literal",
										"value": "lanczos3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1079,
								"name": "FastlyOptions.resize-filter"
							}
						},
						{
							"id": 816,
							"name": "saturation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Saturation of the output image.",
								"text": "The saturation parameter increases or decreases the intensity of the colors in an image.\n\nValue may be any number between -100 and 100.\n\nNotes:\n\nThe default value is 0. This leaves the image unchanged.\n\nValid values range from -100 to 100\n\nA value of -100 will generate a grayscale image.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 252,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1080,
								"name": "FastlyOptions.saturation"
							}
						},
						{
							"id": 817,
							"name": "sharpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sharpness of the output image.",
								"text": "The sharpen parameter increases the definition of the edges of objects in an image.\n\nSyntax: sharpen=a{a},r{r},t{t} (e.g., sharpen: 'a5,r2,t0')\n\nNotes:\n\nThe sharpen parameter is an implementation of an unsharp mask.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 264,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1081,
								"name": "FastlyOptions.sharpen"
							}
						},
						{
							"id": 818,
							"name": "trim",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Remove pixels from the edge of an image.",
								"text": "The trim parameter removes pixels from the edge of an image by pixel or percentage value. This can be useful for removing whitespace and borders that appear on a source image.\n\nSyntax: trim={top},{right},{bottom},{left}\n\nNotes:\n\nValues can be specified using CSS style shorthand values. (See CSS Margin or CSS Padding for more examples).\n\nCSS shorthand allows for all edges to be specified in one property.\n\nAny fractional pixel measurements will be rounded to the nearest whole pixel.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 280,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1082,
								"name": "FastlyOptions.trim"
							}
						},
						{
							"id": 819,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The desired width of the output image.",
								"text": "The width parameter enables dynamic width resizing based on pixels and percent values.\n\nThe {value} can be either a positive integer or a number less than 1. If the value is an integer greater than or equal to 1, the value is interpreted as a pixel width. If the width parameter is less than 1, the value is interpreted as a percentage width.\n\nUnless a height parameter is present, the width value will cause the height of the image to be scaled in proportion to the requested width. If both width and height are omitted, the input image dimensions are used.\n\nValue may be one of:\n\nAbsolute width: An integer between 1 and 8192.\n\nRelative width: A fraction between 0 and 0.99 (e.g. ,0.5) or a percentage between 0 and 100 followed by the letter p (e.g., 50p). In either case the value indicates the desired width relative to the image's natural width.\n\nNotes:\n\nThe maximum output dimensions are 8,192 x 8,192 pixels.\n\nIf the image is animated, the maximum output dimensions apply to the sum of the area of all the frames of the image. For example, a 1024x1024px GIF could have 64 frames before it would exceed the size limit.\n\nBecause we use a positive number less than 1 to return a percentage-based scaled image, in order to return an image that is 100% or more, a p suffix can be appended to the value. For example, width=250p would return an image that is 250% the width of the original. We use p as a simple way to represent percent.\n\nIf the requested width is a fraction of a pixel (e.g., as a result of applying a percentage value for width), it is rounded to the nearest integer.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 306,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1083,
								"name": "FastlyOptions.width"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								799,
								800,
								801,
								802,
								803,
								804,
								805,
								806,
								807,
								808,
								809,
								798,
								810,
								811,
								812,
								813,
								814,
								815,
								816,
								817,
								818,
								819
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 101,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 1062,
							"name": "FastlyOptions"
						}
					]
				},
				{
					"id": 821,
					"name": "CaptureKojiOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[koji]] capture."
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 114,
							"character": 35
						}
					]
				},
				{
					"id": 841,
					"name": "CaptureMediaOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 842,
							"name": "acceptOnly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the types of media files to allow. If empty or not specified, any type of file is allowed."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 173,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 834,
											"name": "CaptureMediaAcceptOnly"
										}
									}
								]
							}
						},
						{
							"id": 843,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium media files)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 175,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 845,
							"name": "imageOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the configuration options for image files."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 179,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"id": 797,
										"name": "CaptureImageOptions"
									}
								]
							}
						},
						{
							"id": 844,
							"name": "videoOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the configuration options for video files."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 177,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"id": 835,
										"name": "CaptureVideoOptions"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								842,
								843,
								845,
								844
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 171,
							"character": 36
						}
					]
				},
				{
					"id": 756,
					"name": "CaptureMessage",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 757,
							"name": "_idempotencyKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 21,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 758,
							"name": "event",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 22,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 759,
							"name": "result",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 23,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "T"
							}
						},
						{
							"id": 760,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 24,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 763,
								"name": "CaptureStatus"
							}
						},
						{
							"id": 761,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 25,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"id": 766,
								"name": "CaptureType"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								757,
								758,
								759,
								760,
								761
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 20,
							"character": 31
						}
					],
					"typeParameter": [
						{
							"id": 762,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					]
				},
				{
					"id": 822,
					"name": "CaptureRangeOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[range]] capture."
					},
					"children": [
						{
							"id": 826,
							"name": "initialValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "A default value to provide to the range capture tool"
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 127,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 824,
							"name": "max",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Maximum value. Default is `100`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 123,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 823,
							"name": "min",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Minimum value. Default is `0`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 121,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 825,
							"name": "step",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default increment/step size. Default is `1`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 125,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								826,
								824,
								823,
								825
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 119,
							"character": 36
						}
					]
				},
				{
					"id": 830,
					"name": "CaptureSelectOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[select]] capture."
					},
					"children": [
						{
							"id": 833,
							"name": "initialValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "A default value to provide to the range capture tool"
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 149,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 832,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "List of predefined options."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 147,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 827,
											"name": "SelectOption"
										}
									}
								]
							}
						},
						{
							"id": 831,
							"name": "placeholder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Description of the selection for users."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 145,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								833,
								832,
								831
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 143,
							"character": 37
						}
					]
				},
				{
					"id": 839,
					"name": "CaptureSoundOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 840,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium sounds)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 168,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								840
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 166,
							"character": 36
						}
					]
				},
				{
					"id": 835,
					"name": "CaptureVideoOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 837,
							"name": "estimatePoses",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Generates pose detection data. When enabled, pose data is available after upload by appending `.poses` to the returned file URL. For example, `https://objects.koji-cdn.com/project-id/my-video.mp4.poses`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 161,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 838,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium videos)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 163,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 836,
							"name": "hls",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Enables HTTP Live Streaming (HLS) for delivery of longer content. When enabled, uploaded videos are transcoded for HLS and return an m3u8 playlist. Use this feature in conjunction with [[https://github.com/video-dev/hls.js/ | hls.js]] for controlling playback."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 159,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								837,
								838,
								836
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 157,
							"character": 36
						}
					]
				},
				{
					"id": 776,
					"name": "ExtendedMediaResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Metadata when the capture option for the return type is set to `extended`."
					},
					"children": [
						{
							"id": 783,
							"name": "audioMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata for an audio file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 63,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 784,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 785,
													"name": "durationSeconds",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Duration in seconds for an audio file."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 65,
															"character": 19
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														785
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 786,
							"name": "imageMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata for an image file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 68,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 787,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 789,
													"name": "naturalHeight",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Natural height of the image in pixels."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 72,
															"character": 17
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 788,
													"name": "naturalWidth",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Natural width of the image in pixels."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 70,
															"character": 16
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														789,
														788
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 779,
							"name": "sizeBytes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Size in bytes of the media file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 56,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 778,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Type of media: `image`, `video`, `audio`, or `file`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 54,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 777,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "URL of the selected media file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 52,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 780,
							"name": "videoMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata for a video file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 58,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 781,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 782,
													"name": "thumbnailUrl",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "URL for the video thumbnail."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 60,
															"character": 16
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														782
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								783,
								786,
								779,
								778,
								777,
								780
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 50,
							"character": 36
						}
					]
				},
				{
					"id": 827,
					"name": "SelectOption",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "One of the predefined options for a [[select]] capture."
					},
					"children": [
						{
							"id": 829,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Description of the option for users."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 137,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 828,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Value to return if the option is selected."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 135,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								829,
								828
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 133,
							"character": 29
						}
					]
				},
				{
					"id": 751,
					"name": "VerboseCapture",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Extended result of a user input capture."
					},
					"children": [
						{
							"id": 752,
							"name": "captureStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether the user completed the selection (`succeeded`) or exited the control without selecting a value (`cancelled`)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 11,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"id": 763,
								"name": "CaptureStatus"
							}
						},
						{
							"id": 753,
							"name": "captureType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Capture method type (for example, `color` or `file`)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 13,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"id": 766,
								"name": "CaptureType"
							}
						},
						{
							"id": 754,
							"name": "result",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Value captured from the user."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 15,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "reference",
										"id": 751,
										"name": "VerboseCapture"
									}
								]
							}
						},
						{
							"id": 755,
							"name": "resultMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata associated with the captured result"
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 17,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"id": 776,
										"name": "ExtendedMediaResult"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								752,
								753,
								754,
								755
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 9,
							"character": 31
						}
					]
				},
				{
					"id": 834,
					"name": "CaptureMediaAcceptOnly",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Types of files to allow for a [[media]] capture. The [[CaptureMediaOptions | configuration options]] vary by media file type."
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 155,
							"character": 34
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "image"
							},
							{
								"type": "literal",
								"value": "video"
							},
							{
								"type": "literal",
								"value": "audio"
							},
							{
								"type": "literal",
								"value": "file"
							}
						]
					}
				},
				{
					"id": 750,
					"name": "CaptureResult",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 5,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"id": 751,
								"name": "VerboseCapture"
							}
						]
					}
				},
				{
					"id": 972,
					"name": "capture",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 664,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"id": 846,
						"name": "Capture"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						763,
						766
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						846
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						794,
						790,
						820,
						797,
						821,
						841,
						756,
						822,
						830,
						839,
						835,
						776,
						827,
						751
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						834,
						750
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						972
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/capture/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 995,
			"name": "frontend/ui/navigate",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 996,
					"name": "Navigate",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Allow for navigation within a koji."
					},
					"children": [
						{
							"id": 997,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 998,
									"name": "new Navigate",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 996,
										"name": "Navigate"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 631,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 630,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 1005,
							"name": "createRemix",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 48,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 1006,
									"name": "createRemix",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Programmatically create a new remix."
									},
									"parameters": [
										{
											"id": 1007,
											"name": "appId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "An optional app id; if this parameter is omitted, the current Koji will be remixed\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1008,
							"name": "openShareDialog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 63,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 1009,
									"name": "openShareDialog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Programmatically open the Koji's share sheet/dialog."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1002,
							"name": "presentInModal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 32,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 1003,
									"name": "presentInModal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Presents the currently loaded Koji in a sheet that animates from\nthe bottom of the screen. If the parent Koji is already presented in a\nmodal, presenting a new Koji will navigate within the sheet instead of\npresenting another sheet."
									},
									"parameters": [
										{
											"id": 1004,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The url to present in the modal\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 999,
							"name": "to",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 14,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 1000,
									"name": "to",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigate replaces the currently loaded Koji with the content of `url`"
									},
									"parameters": [
										{
											"id": 1001,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The url to navigate to\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								997
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1005,
								1008,
								1002,
								999
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/navigate/index.ts",
							"line": 7,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 629,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 1024,
					"name": "navigate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/navigate/index.ts",
							"line": 71,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"id": 996,
						"name": "Navigate"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						996
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1024
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/navigate/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1025,
			"name": "frontend/ui/present",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1034,
					"name": "Present",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Presents dialog boxes to users on the frontend of your Koji."
					},
					"children": [
						{
							"id": 1035,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1036,
									"name": "new Present",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1034,
										"name": "Present"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 631,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 630,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 1040,
							"name": "alert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 79,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 1041,
									"name": "alert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Presents an alert dialog box to the user. Use this method for messages that do not require any response from the user, other than an acknowledgement. For messages that require a decision, use [[confirmation]].",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.ui.present.alert({\n title: 'Image Posted',\n message: 'Your new image is available on your fan wall!'\n});\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1042,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 1026,
												"name": "PresentConfirmationOptions"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1037,
							"name": "confirmation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 419,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 49,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 1038,
									"name": "confirmation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Presents a confirmation dialog box to a user. Use this method for messages that require a decision from the user, such as to ask whether to proceed with an action. For messages that do not require a decision, use [[alert]].",
										"returns": "Whether the user confirmed (`true`) or cancelled (`false`) the action.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst confirmed = await Koji.ui.present.confirmation({\n title: 'Delete File',\n message: 'Are you sure you want to delete this file?',\n confirmButtonLabel: 'Delete',\n cancelButtonLabel: 'Cancel'\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1039,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1026,
												"name": "PresentConfirmationOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1035
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1040,
								1037
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 31,
							"character": 20
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 629,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 1031,
					"name": "PresentAlertOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines an alert dialog box to show a user."
					},
					"children": [
						{
							"id": 1033,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Information to display to the user."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1032,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Title for the dialog box."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 23,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1033,
								1032
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 21,
							"character": 36
						}
					]
				},
				{
					"id": 1026,
					"name": "PresentConfirmationOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a confirmation dialog box to show a user."
					},
					"children": [
						{
							"id": 1030,
							"name": "cancelButtonLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Label for the cancel action (`Cancel` by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 15,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1029,
							"name": "confirmButtonLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Label for the confirm action (`Confirm` by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1028,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Question to ask the user (empty by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1027,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Title for the dialog box (`Confirm` by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 9,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1030,
								1029,
								1028,
								1027
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 7,
							"character": 43
						}
					]
				},
				{
					"id": 1057,
					"name": "present",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 94,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"id": 1034,
						"name": "Present"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1034
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1031,
						1026
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1057
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/present/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1058,
			"name": "index",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1095,
					"name": "KojiBackend",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 371
				},
				{
					"id": 1096,
					"name": "default",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 627
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						1095,
						1096
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1059,
			"name": "types",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1062,
					"name": "FastlyOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1063,
							"name": "auto",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Enables optimizations based on content negotiation.",
								"text": "Allowed values: 'webp'\n\nNotes:\n\nAlthough the WebP format produces images at a higher compression ratio with a lower loss of quality, it is not supported in all browsers.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 15,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									}
								]
							}
						},
						{
							"id": 1064,
							"name": "bg-color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The bg-color parameter sets the background color of an image to use when applying padding or when replacing transparent pixels.",
								"text": "Value may be one of:\n\nHex RGB value: Both 3- and 6-digit values are acceptable (e.g. a22 or cf23a5).\n\nDecimal RGB: RGB values between 0 and 255. Comma-delimited (e.g. 255,0,0).\n\nDecimal RGB with alpha| RGBA colors include an additional value for alpha (transparency), which ranges from 0 for fully transparent to 1 for fully opaque.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 15,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1065,
							"name": "blur",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a Gaussian blur filter to the image.",
								"text": "Value is a number of pixels between 0.5 and 1000 or a percentage (of the dimensions of the image) suffixed with p (e.g., 1p for 1%).\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 33,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1066,
							"name": "brightness",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The brightness parameter increases or decreases the amount of perceived light an image radiates or reflects.",
								"text": "Value may be any number between -100 and 100.\n\nNotes:\n\nThe default value is 0. This leaves the image unchanged.\n\nA value of 100 will result in a fully white image.\n\nA value of -100 will result in a fully black image.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 47,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1067,
							"name": "contrast",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The contrast parameter increases or decreases the difference between the darkest and lightest tones in an image.",
								"text": "Value may be any number between -100 and 100.\n\nNotes:\n\nThe default value is 0. This leaves the image unchanged.\n\nA value of -100 will result in a fully grey image.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 59,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1068,
							"name": "crop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image.",
								"text": "When specifying a crop parameter, the value starts with the desired width and height, either as measurements of pixels, separated with a comma, or as a ratio, separated with a colon (for example, crop=4:3 or crop=640,480 or crop=0.8,0.4).\n\nThe remaining parameters determine the position of the cropped region. On each dimension, placement can be made either with a position coordinate (x or y, which are relative to the top left of the uncropped image) or as a percentage offset from the center of the image using offset-x and offset-y. These can be mixed and matched, but only one method can be used for each dimension (i.e., x can be combined with offset-y but x cannot be combined with offset-x).\n\nOffset positioning acts to distribute the remaining space according to the specified offset proportions. If an image is 2000 pixels wide and is being cropped to 1000 pixels wide, offset-x10 would crop 10% (100 pixels) from the left of the image and 90% (900 pixels) from the right. An offset of 50 centers the crop in the middle of the image.\n\nAppending ,smart to the parameter value enables content-aware algorithms to attempt to crop the image to the desired aspect ratio while intelligently focusing on the most important visual content, including the detection of faces.\n\nIf the specified cropped region is outside the bounds of the image, the transformation will fail with the error \"Invalid transformation for requested image: Invalid crop, region out of bounds\". Append ,safe to the parameter value to override this. In safe mode, the image gets delivered as an intersection of the origin image and the specified cropped region. This avoids the error, but the resulting image may not be of the specified dimensions.\n\nNotes:\n\nx and y can be set as a value in pixels (e.g., 40 is 40 pixels) or as a percentage suffixed with p (e.g., 50p is 50%).\n\noffset-x and offset-y are always interpreted as percentages of the image size (e.g., 25 is 25%).\n\nWhen using aspect ratio cropping, crop must be used in conjunction with a width or height parameter (or both) to return the correct output image size. If no width or height are supplied, the largest area of the requested aspect ratio will be returned based on the dimensions of the source image.\n\nIf any dimension ends up at a fraction of a pixel, it is rounded to the nearest whole pixel.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 83,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1069,
							"name": "dpr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Device pixel ratio.",
								"text": "The dpr parameter provides a means to multiply image dimensions in order to translate logical pixels (also 'CSS pixels') into physical pixels. The device pixel ratio is therefore the ratio between physical pixels and logical pixels.\n\nIt is usually possible for client-side software to query the host system to determine the DPR of the display the user is viewing. In web browsers, this is available as the Window.devicePixelRatio variable in JavaScript. The iPhone 5 reports a device pixel ratio of 2, because the physical linear resolution is double the logical resolution.\n\nPhysical Resolution: 960 x 640\n\nLogical Resolution: 480 x 320\n\nOther devices report varying device pixel ratios, including non-integer ones. For example, the Nokia Lumia 1020 reports 1.6667, whereas the Samsung Galaxy S4 reports 3.\n\nValue may be any number between 1 and 10.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 99,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "bounds"
									},
									{
										"type": "literal",
										"value": "cover"
									},
									{
										"type": "literal",
										"value": "crop"
									}
								]
							}
						},
						{
							"id": 1070,
							"name": "fit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The fit parameter controls how the image will be constrained within the provided size (width and height) values, in order to maintain the correct proportions."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 103,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1071,
							"name": "format",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the desired output encoding for the image.",
								"text": "The format parameter enables the source image to be converted (a.k.a., \"transcoded\") from one encoded format to another. This is useful when the source image has been saved in a sub-optimal file format that hinders performance.\n\nNotes:\n\nAutomatic delivery of WebP format images via content negotiation can be enabled using the auto=webp parameter. This will override the format parameter in browsers that support WebP. Although the WebP format produces images at a higher compression ratio with a lower loss of quality, it is not supported in all browsers.\n\nThe source image can be any of the following image formats: JPEG, PNG, GIF, WEBP.\n\nJPEG, progressive JPEG, WebP (Lossy), and PNG8 have a sliding quality scale that supports the quality parameter.\n\nGIF and PNG do not have a sliding quality scale. They do not support the quality parameter.\n\nA progressive JPEG pjpg is an image created using the JPEG suite of compression algorithms that will \"fade in\" successive waves of lines until the entire image has completely arrived. For this reason, progressive JPEGs typically appear to load quicker than the Baseline JPEG jpg format.\n\nWebP support is available in Google Chrome, Mozilla Firefox 65 and later, Safari 14 and later, Opera, and Android Browser.\n\nLossless compression is currently supported for WebP only.\n\nGIF to WebP conversion is currently not supported.\n\nMP4 conversion is only available for animated GIF source images.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 129,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									},
									{
										"type": "literal",
										"value": "gif"
									},
									{
										"type": "literal",
										"value": "png"
									},
									{
										"type": "literal",
										"value": "png8"
									},
									{
										"type": "literal",
										"value": "jpg"
									},
									{
										"type": "literal",
										"value": "pjpg"
									},
									{
										"type": "literal",
										"value": "bjpg"
									},
									{
										"type": "literal",
										"value": "webpll"
									},
									{
										"type": "literal",
										"value": "webply"
									},
									{
										"type": "literal",
										"value": "mp4"
									}
								]
							}
						},
						{
							"id": 1072,
							"name": "frame",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Extracts the first frame from an animated image sequence."
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 133,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									}
								]
							}
						},
						{
							"id": 1073,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The desired height of the output image.",
								"text": "The height parameter enables dynamic height resizing based on pixels and percent values.\n\nThe value can be either a positive integer or a positive number less than 1. If the value is an integer greater than or equal to 1, the value is interpreted as a pixel height. If the height parameter is less than 1, the value is interpreted as a percentage height.\n\nUnless a width parameter is present, the height value will cause the width of the image to be scaled in proportion to the requested height. If both width and height are omitted, the input image dimensions are used.\n\nNotes:\n\nThe maximum output dimensions are 8,192 x 8,192 pixels.\n\nBecause we use a positive number between 0 and 0.99 to return a percentage-based scaled image, in order to return an image that is 100% or more, a p suffix can be appended to the value. For example, height=250p would return an image that is 250% the height of the original. We use p as a simple way to represent percentages.\n\nIf the requested height is not a whole number of pixels (e.g., as a result of applying a percentage value for height), it is rounded to the nearest integer.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 151,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1074,
							"name": "optimize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The optimize parameter automatically applies optimal quality compression to produce an output image with as much visual fidelity as possible, while minimizing the file size.\nNotes:",
								"text": "Optimize is currently supported by the following output formats: JPEG, WebP.\n\nIf the quality parameter is also provided, quality overrides optimize because it is more precise.\n\nBecause optimize attempts to produce an output image with as much visual quality as possible while minimizing the file size, the operations applied are subject to change.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 162,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "low"
									},
									{
										"type": "literal",
										"value": "medium"
									},
									{
										"type": "literal",
										"value": "high"
									}
								]
							}
						},
						{
							"id": 1075,
							"name": "orient",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "How the image will be orientated.",
								"text": "The orient parameter controls the cardinal orientation of the image.\n\nNotes:\n\nBy default, if the source image contains orientation information stored within its metadata, that orientation will be applied to the image data and the orientation override removed from metadata.\n\nThe numerical values are the same as EXIF rotation numbers.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 174,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									},
									{
										"type": "literal",
										"value": "r"
									},
									{
										"type": "literal",
										"value": "l"
									},
									{
										"type": "literal",
										"value": "h"
									},
									{
										"type": "literal",
										"value": "v"
									},
									{
										"type": "literal",
										"value": "hv"
									},
									{
										"type": "literal",
										"value": "2"
									},
									{
										"type": "literal",
										"value": "3"
									},
									{
										"type": "literal",
										"value": "4"
									},
									{
										"type": "literal",
										"value": "5"
									},
									{
										"type": "literal",
										"value": "6"
									},
									{
										"type": "literal",
										"value": "7"
									},
									{
										"type": "literal",
										"value": "8"
									}
								]
							}
						},
						{
							"id": 1076,
							"name": "pad",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Add pixels to the edge of an image.",
								"text": "Notes:\n\nSyntax is very similar to css padding; see examples below.\n\npad={all-sides}\npad={top-and-bottom},{left-and-right}\npad={top},{left-and-right},{bottom}\npad={top},{right},{bottom},{left}\n\nBy default padding applies a background color of white. See bg-color to change that.\n\nIf the source image contains a transparent background and the output image also contains transparency, the padding will be made up of transparent pixels.\n\nWhen using pad and canvas at the same time, pad will be ignored.\n\nValues can be specified using CSS style shorthand values. (see CSS Margin or CSS Padding for more examples).\n\nCSS shorthand allows for all edges to be specified in one property.\n\nAny fractional pixel measurements will be rounded to the nearest whole pixel.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 199,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1077,
							"name": "precrop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image before any other transformations occur.",
								"text": "Identical to crop except that precrop is performed before any other transformations.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 205,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1078,
							"name": "quality",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Output image quality for lossy file formats.",
								"text": "The quality parameter enables control over the compression level for lossy file-formatted images.\n\nValue may be any integer between 1 and 100, where 1 is a lower quality image and a smaller file and 100 is the highest quality image and larger file. If desired, a second quality level can be specified for use when auto=webp is enabled and a WebP output format has been selected.\n\nNotes:\nThe quality parameter can be applied to the following output formats: png8, jpg, pjpg, webp, and webply.\n\nIf no quality parameter is present for jpg, pjpg, or webp, the output image will be returned at the default value set in the Image Optimizer user interface.\n\nIf auto=webp is enabled by the URL or the service settings, the second value will be used as the quality value if the requestor sends the accept: image/webp request header.\n\nWhen only specifying quality, if the output image file size is larger than the input image, the original image will be delivered.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 222,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1079,
							"name": "resize-filter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The resize-filter parameter enables control over the resizing filter used to generate a new image with a higher or lower number of pixels.",
								"text": "Notes:\n\nWhen making an image smaller, use bicubic, which has a natural sharpening effect.\n\nWhen making an image larger, use bilinear, which has a natural smoothing effect.\n\nWhen resizing pixel art, use nearest, which has a natural pixelation effect.\n\nWhen quality is the main concern, use lanczos, which typically renders the best results.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 222,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "nearest"
									},
									{
										"type": "literal",
										"value": "linear"
									},
									{
										"type": "literal",
										"value": "cubic"
									},
									{
										"type": "literal",
										"value": "lanczos2"
									},
									{
										"type": "literal",
										"value": "lanczos3"
									}
								]
							}
						},
						{
							"id": 1080,
							"name": "saturation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Saturation of the output image.",
								"text": "The saturation parameter increases or decreases the intensity of the colors in an image.\n\nValue may be any number between -100 and 100.\n\nNotes:\n\nThe default value is 0. This leaves the image unchanged.\n\nValid values range from -100 to 100\n\nA value of -100 will generate a grayscale image.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 252,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1081,
							"name": "sharpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sharpness of the output image.",
								"text": "The sharpen parameter increases the definition of the edges of objects in an image.\n\nSyntax: sharpen=a{a},r{r},t{t} (e.g., sharpen: 'a5,r2,t0')\n\nNotes:\n\nThe sharpen parameter is an implementation of an unsharp mask.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 264,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1082,
							"name": "trim",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Remove pixels from the edge of an image.",
								"text": "The trim parameter removes pixels from the edge of an image by pixel or percentage value. This can be useful for removing whitespace and borders that appear on a source image.\n\nSyntax: trim={top},{right},{bottom},{left}\n\nNotes:\n\nValues can be specified using CSS style shorthand values. (See CSS Margin or CSS Padding for more examples).\n\nCSS shorthand allows for all edges to be specified in one property.\n\nAny fractional pixel measurements will be rounded to the nearest whole pixel.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 280,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1083,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "The desired width of the output image.",
								"text": "The width parameter enables dynamic width resizing based on pixels and percent values.\n\nThe {value} can be either a positive integer or a number less than 1. If the value is an integer greater than or equal to 1, the value is interpreted as a pixel width. If the width parameter is less than 1, the value is interpreted as a percentage width.\n\nUnless a height parameter is present, the width value will cause the height of the image to be scaled in proportion to the requested width. If both width and height are omitted, the input image dimensions are used.\n\nValue may be one of:\n\nAbsolute width: An integer between 1 and 8192.\n\nRelative width: A fraction between 0 and 0.99 (e.g. ,0.5) or a percentage between 0 and 100 followed by the letter p (e.g., 50p). In either case the value indicates the desired width relative to the image's natural width.\n\nNotes:\n\nThe maximum output dimensions are 8,192 x 8,192 pixels.\n\nIf the image is animated, the maximum output dimensions apply to the sum of the area of all the frames of the image. For example, a 1024x1024px GIF could have 64 frames before it would exceed the size limit.\n\nBecause we use a positive number less than 1 to return a percentage-based scaled image, in order to return an image that is 100% or more, a p suffix can be appended to the value. For example, width=250p would return an image that is 250% the width of the original. We use p as a simple way to represent percent.\n\nIf the requested width is a fraction of a pixel (e.g., as a result of applying a percentage value for width), it is rounded to the nearest integer.\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 306,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1063,
								1064,
								1065,
								1066,
								1067,
								1068,
								1069,
								1070,
								1071,
								1072,
								1073,
								1074,
								1075,
								1076,
								1077,
								1078,
								1079,
								1080,
								1081,
								1082,
								1083
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 5,
							"character": 30
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 797,
							"name": "CaptureImageOptions"
						}
					]
				},
				{
					"id": 1061,
					"name": "IAPToken",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				},
				{
					"id": 1060,
					"name": "UserToken",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1062
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1061,
						1060
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1084,
			"name": "utils/equalsIgnoreOrder",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1085,
					"name": "equalsIgnoreOrder",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/equalsIgnoreOrder.ts",
							"line": 3,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 1086,
							"name": "equalsIgnoreOrder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1087,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 1088,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1085
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/equalsIgnoreOrder.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1089,
			"name": "utils/get",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1090,
					"name": "get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/get.ts",
							"line": 7,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1091,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1092,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GetInput"
									},
									"defaultValue": "..."
								},
								{
									"id": 1093,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1094,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1090
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/get.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 1,
			"children": [
				370,
				1,
				8,
				7,
				29,
				28,
				175,
				256,
				327,
				387,
				401,
				582,
				418,
				424,
				436,
				520,
				553,
				552,
				628,
				646,
				686,
				736,
				973,
				749,
				995,
				1025,
				1058,
				1059,
				1084,
				1089
			]
		}
	]
}