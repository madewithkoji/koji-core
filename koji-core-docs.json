{
	"id": 0,
	"name": "@withkoji/core",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 386,
			"name": "backend",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 387,
					"name": "KojiBackend",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"comment": {
						"shortText": "Provides backend methods for your Koji."
					},
					"sources": [
						{
							"fileName": "backend/index.ts",
							"line": 11,
							"character": 24
						},
						{
							"fileName": "index.ts",
							"line": 4,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 388,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 389,
									"name": "Database",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 60,
											"name": "Database"
										}
									}
								},
								{
									"id": 391,
									"name": "Dispatch",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 217,
											"name": "Dispatch"
										}
									}
								},
								{
									"id": 390,
									"name": "IAP",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 292,
											"name": "IAP"
										}
									}
								},
								{
									"id": 392,
									"name": "Identity",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 368,
											"name": "Identity"
										}
									}
								},
								{
									"id": 393,
									"name": "Secret",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "query",
										"queryType": {
											"type": "reference",
											"id": 418,
											"name": "Secret"
										}
									}
								},
								{
									"id": 394,
									"name": "middleware",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 395,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 396,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Executes middleware, making koji-specific data available on the res.locals property.",
														"tags": [
															{
																"tag": "example",
																"text": "\n```\napp.use(Koji.middleware(require('koji.json'));\n```\n"
															}
														]
													},
													"parameters": [
														{
															"id": 397,
															"name": "kojiConfig",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"text": "Configuration data for the Koji.\n"
															},
															"type": {
																"type": "reference",
																"id": 412,
																"name": "KojiConfig"
															},
															"defaultValue": "..."
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 398,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 399,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 400,
																			"name": "req",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "reference",
																						"name": "ParamsDictionary"
																					},
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "reference",
																						"name": "ParsedQs"
																					},
																					{
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							},
																							{
																								"type": "intrinsic",
																								"name": "any"
																							}
																						],
																						"name": "Record"
																					}
																				],
																				"name": "Request"
																			}
																		},
																		{
																			"id": 401,
																			"name": "res",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					},
																					{
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							},
																							{
																								"type": "intrinsic",
																								"name": "any"
																							}
																						],
																						"name": "Record"
																					}
																				],
																				"name": "Response"
																			}
																		},
																		{
																			"id": 402,
																			"name": "next",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "NextFunction"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										389,
										391,
										390,
										392,
										393,
										394
									]
								}
							]
						}
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						387
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "backend/@decorators/server",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "server",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"decorates": [
						{
							"type": "reference",
							"id": 66,
							"name": "get"
						},
						{
							"type": "reference",
							"id": 71,
							"name": "getCollections"
						},
						{
							"type": "reference",
							"id": 73,
							"name": "search"
						},
						{
							"type": "reference",
							"id": 79,
							"name": "getWhere"
						},
						{
							"type": "reference",
							"id": 86,
							"name": "getAll"
						},
						{
							"type": "reference",
							"id": 91,
							"name": "getAllWhere"
						},
						{
							"type": "reference",
							"id": 98,
							"name": "set"
						},
						{
							"type": "reference",
							"id": 104,
							"name": "update"
						},
						{
							"type": "reference",
							"id": 110,
							"name": "arrayPush"
						},
						{
							"type": "reference",
							"id": 116,
							"name": "arrayRemove"
						},
						{
							"type": "reference",
							"id": 122,
							"name": "delete"
						},
						{
							"type": "reference",
							"id": 129,
							"name": "get"
						},
						{
							"type": "reference",
							"id": 134,
							"name": "getCollections"
						},
						{
							"type": "reference",
							"id": 136,
							"name": "search"
						},
						{
							"type": "reference",
							"id": 142,
							"name": "getWhere"
						},
						{
							"type": "reference",
							"id": 149,
							"name": "getAll"
						},
						{
							"type": "reference",
							"id": 154,
							"name": "getAllWhere"
						},
						{
							"type": "reference",
							"id": 161,
							"name": "set"
						},
						{
							"type": "reference",
							"id": 167,
							"name": "update"
						},
						{
							"type": "reference",
							"id": 173,
							"name": "arrayPush"
						},
						{
							"type": "reference",
							"id": 179,
							"name": "arrayRemove"
						},
						{
							"type": "reference",
							"id": 185,
							"name": "delete"
						},
						{
							"type": "reference",
							"id": 298,
							"name": "resolveReceiptsByIAPToken"
						},
						{
							"type": "reference",
							"id": 301,
							"name": "resolveReceiptById"
						},
						{
							"type": "reference",
							"id": 304,
							"name": "resolveReceiptsBySku"
						},
						{
							"type": "reference",
							"id": 321,
							"name": "resolveReceiptsByIAPToken"
						},
						{
							"type": "reference",
							"id": 324,
							"name": "resolveReceiptById"
						},
						{
							"type": "reference",
							"id": 327,
							"name": "resolveReceiptsBySku"
						},
						{
							"type": "reference",
							"id": 374,
							"name": "pushNotificationToUser"
						},
						{
							"type": "reference",
							"id": 378,
							"name": "pushNotificationToOwner"
						},
						{
							"type": "reference",
							"id": 381,
							"name": "resolveUserFromToken"
						},
						{
							"type": "reference",
							"id": 424,
							"name": "resolveValue"
						},
						{
							"type": "reference",
							"id": 428,
							"name": "generateSignedUrl"
						}
					],
					"sources": [
						{
							"fileName": "backend/@decorators/server.ts",
							"line": 10,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "server",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Verifies that server-side methods are used only in backend services of the Koji.",
								"returns": "Method's behavior or an error, if the method is being invoked in a frontend environment.\n"
							},
							"parameters": [
								{
									"id": 4,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Class to which the method belongs."
									},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								},
								{
									"id": 5,
									"name": "propertyKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 6,
									"name": "descriptor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method's behavior (which can be mutated inside this function)."
									},
									"type": {
										"type": "reference",
										"name": "PropertyDescriptor"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/@decorators/server.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 8,
			"name": "backend/base",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 19,
					"name": "Base",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"children": [
						{
							"id": 20,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 21,
									"name": "new Base",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 22,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 19,
										"name": "Base"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								20
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 58,
							"character": 17
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 25,
							"name": "IDatabase"
						},
						{
							"type": "reference",
							"id": 60,
							"name": "Database"
						},
						{
							"type": "reference",
							"id": 217,
							"name": "Dispatch"
						},
						{
							"type": "reference",
							"id": 292,
							"name": "IAP"
						},
						{
							"type": "reference",
							"id": 368,
							"name": "Identity"
						},
						{
							"type": "reference",
							"id": 418,
							"name": "Secret"
						}
					]
				},
				{
					"id": 16,
					"name": "BackendConfiguration",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Environment variables that serve as access credentials for the Koji's backend services."
					},
					"children": [
						{
							"id": 17,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Unique identifier for the Koji."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 20,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 18,
							"name": "projectToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Secret key for the Koji."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 22,
									"character": 14
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								17,
								18
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 18,
							"character": 37
						}
					]
				},
				{
					"id": 12,
					"name": "BackendConfigurationInput",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration information for the Koji."
					},
					"children": [
						{
							"id": 13,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Unique identifier for the Koji. Will override data passed through `res`."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 8,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 14,
							"name": "projectToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Secret key for the Koji. Will override data passed through `res`."
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 10,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 15,
							"name": "res",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Express response object. Used in conjunction with middleware to scope environment variables for instant remixes of the original Koji. For the original definition see [[https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/express/index.d.ts#L127 | @types/express]]"
							},
							"sources": [
								{
									"fileName": "backend/base/index.ts",
									"line": 12,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record"
											}
										],
										"name": "Response"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								13,
								14,
								15
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 6,
							"character": 42
						}
					]
				},
				{
					"id": 25,
					"name": "IDatabase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 70,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				},
				{
					"id": 9,
					"name": "generateConfig",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "backend/base/index.ts",
							"line": 30,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 10,
							"name": "generateConfig",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates an extensible configuration for the Koji's backend services."
							},
							"parameters": [
								{
									"id": 11,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Configuration information for the Koji.\n"
									},
									"type": {
										"type": "reference",
										"id": 12,
										"name": "BackendConfigurationInput"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 16,
								"name": "BackendConfiguration"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						19
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						16,
						12,
						25
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						9
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/base/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 7,
			"name": "backend/base/index.spec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"sources": [
				{
					"fileName": "backend/base/index.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 29,
			"name": "backend/database",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 52,
					"name": "DatabaseHttpStatusCode",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Possible response values when interacting with the database API."
					},
					"children": [
						{
							"id": 54,
							"name": "BAD_REQUEST",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "The server cannot or will not process the request due to an apparent client error",
								"text": "One of the following error conditions:\nUnable to parse data.\nMissing data.\nThe request attempts data that is too large.\nThe data contains invalid child names as part of the path.\nThe data path is too long.\nThe request contains an unrecognized server value.\nThe request does not support one of the query parameters that is specified.\nThe request mixes query parameters with a shallow request.\n"
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 59,
									"character": 13
								}
							],
							"defaultValue": "400"
						},
						{
							"id": 58,
							"name": "INTERNAL_SERVER_ERROR",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "A server error occurred."
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 84,
									"character": 23
								}
							],
							"defaultValue": "500"
						},
						{
							"id": 56,
							"name": "NOT_FOUND",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "The specified Database was not found."
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 74,
									"character": 11
								}
							],
							"defaultValue": "404"
						},
						{
							"id": 53,
							"name": "OK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "Standard response for successful HTTP requests."
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 44,
									"character": 4
								}
							],
							"defaultValue": "200"
						},
						{
							"id": 57,
							"name": "PRECONDITION_FAILED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "The request's specified ETag value in the if-match header did not match the server's value."
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 79,
									"character": 21
								}
							],
							"defaultValue": "412"
						},
						{
							"id": 59,
							"name": "SERVICE_UNAVAILABLE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "The specified Database is temporarily unavailable, which means the request was not attempted."
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 89,
									"character": 21
								}
							],
							"defaultValue": "503"
						},
						{
							"id": 55,
							"name": "UNAUTHORIZED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"comment": {
								"shortText": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\nbeen provided.",
								"text": "One of the following error conditions:\nThe auth token has expired or missing.\nThe auth token used in the request is invalid.\n"
							},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 69,
									"character": 14
								}
							],
							"defaultValue": "401"
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								54,
								58,
								56,
								53,
								57,
								59,
								55
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 40,
							"character": 34
						}
					]
				},
				{
					"id": 30,
					"name": "DatabaseRoutes",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "API routes for database methods."
					},
					"children": [
						{
							"id": 31,
							"name": "ARRAY_PUSH",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 9,
									"character": 12
								}
							],
							"defaultValue": "\"/v1/store/update/push\""
						},
						{
							"id": 32,
							"name": "ARRAY_REMOVE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 10,
									"character": 14
								}
							],
							"defaultValue": "\"/v1/store/update/remove\""
						},
						{
							"id": 33,
							"name": "DELETE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 11,
									"character": 8
								}
							],
							"defaultValue": "\"/v1/store/delete\""
						},
						{
							"id": 34,
							"name": "GET",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 12,
									"character": 5
								}
							],
							"defaultValue": "\"/v1/store/get\""
						},
						{
							"id": 35,
							"name": "GET_ALL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 13,
									"character": 9
								}
							],
							"defaultValue": "\"/v1/store/getAll\""
						},
						{
							"id": 36,
							"name": "GET_ALL_WHERE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 14,
									"character": 15
								}
							],
							"defaultValue": "\"/v1/store/getAllWhere\""
						},
						{
							"id": 37,
							"name": "GET_COLLECTIONS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 15,
									"character": 17
								}
							],
							"defaultValue": "\"/v1/store/getCollections\""
						},
						{
							"id": 38,
							"name": "SEARCH",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 16,
									"character": 8
								}
							],
							"defaultValue": "\"/v1/store/search\""
						},
						{
							"id": 39,
							"name": "SET",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 17,
									"character": 5
								}
							],
							"defaultValue": "\"/v1/store/set\""
						},
						{
							"id": 40,
							"name": "UPDATE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 18,
									"character": 8
								}
							],
							"defaultValue": "\"/v1/store/update\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								31,
								32,
								33,
								34,
								35,
								36,
								37,
								38,
								39,
								40
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 8,
							"character": 26
						}
					]
				},
				{
					"id": 41,
					"name": "PredicateOperator",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Available operator types for database comparisons."
					},
					"children": [
						{
							"id": 48,
							"name": "ARRAY_CONTAINS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 31,
									"character": 16
								}
							],
							"defaultValue": "\"array-contains\""
						},
						{
							"id": 49,
							"name": "ARRAY_CONTAINS_ANY",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 32,
									"character": 20
								}
							],
							"defaultValue": "\"array-contains-any\""
						},
						{
							"id": 44,
							"name": "EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 27,
									"character": 10
								}
							],
							"defaultValue": "\"==\""
						},
						{
							"id": 45,
							"name": "GREATER_THAN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 28,
									"character": 14
								}
							],
							"defaultValue": "\">\""
						},
						{
							"id": 46,
							"name": "GREATER_THAN_OR_EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 29,
									"character": 26
								}
							],
							"defaultValue": "\">=\""
						},
						{
							"id": 50,
							"name": "IN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 33,
									"character": 4
								}
							],
							"defaultValue": "\"in\""
						},
						{
							"id": 42,
							"name": "LESS_THAN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 25,
									"character": 11
								}
							],
							"defaultValue": "\"<\""
						},
						{
							"id": 43,
							"name": "LESS_THAN_OR_EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 26,
									"character": 23
								}
							],
							"defaultValue": "\"<=\""
						},
						{
							"id": 47,
							"name": "NOT_EQUAL_TO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 30,
									"character": 14
								}
							],
							"defaultValue": "\"!=\""
						},
						{
							"id": 51,
							"name": "NOT_IN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 34,
									"character": 8
								}
							],
							"defaultValue": "\"not-in\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								48,
								49,
								44,
								45,
								46,
								50,
								42,
								43,
								47,
								51
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 24,
							"character": 29
						}
					]
				},
				{
					"id": 60,
					"name": "Database",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements a Koji database for the backend of your Koji."
					},
					"children": [
						{
							"id": 61,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 62,
									"name": "new Database",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst database = new KojiBackend.Database({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 63,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 60,
										"name": "Database"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 110,
							"name": "arrayPush",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 364,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 111,
									"name": "arrayPush",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Appends contents to an existing document in a collection.",
										"returns": "An http status code (e.g., OK), or the updated document if returnDoc was specified as true.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.arrayPush('myCollection', 'myDocument', 'Contents appended to end of document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 112,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 113,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 114,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Appended contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 115,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Return the updated doc as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 116,
							"name": "arrayRemove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 394,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 117,
									"name": "arrayRemove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes part of the contents from an existing document in a collection.",
										"returns": "An http status code (e.g., OK), or the updated document if returnDoc was specified as true.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.arrayPush('myCollection', 'myDocument', 'Contents to be removed from document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 118,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 119,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 120,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Removed contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 121,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Return the updated doc as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 122,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 422,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 123,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a document from a collection.",
										"returns": "An http status code (e.g., OK).\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.delete('myCollection', 'myDocument');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 124,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 125,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 52,
												"name": "DatabaseHttpStatusCode"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 66,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 134,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 67,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the specified database entry or collection of entries.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.get('myCollection');\nconst myEntry = await database.get('myCollection','myDoc');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 68,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 69,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 70,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 86,
							"name": "getAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 244,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 87,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for the documents whose names are included in an array of document names.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAll<'myClass'>('myCollection', ['doc1', 'doc2']);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 88,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 89,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 90,
											"name": "documentNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of one or more document names"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 91,
							"name": "getAllWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 274,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 92,
									"name": "getAllWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValues.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAllWhere<'myClass'>('myCollection', 'myField', 'myOperator, ['mySearchValue1', mySearchValue2]);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 93,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 94,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 95,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of a field in the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 96,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An operator such as '=', '<>', '>', etc."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 97,
											"name": "predicateValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An array of one or more search values."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 71,
							"name": "getCollections",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 157,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 72,
									"name": "getCollections",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of all collections available in the database.",
										"returns": "List containing the names of the collections.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst collections = await database.getCollections();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 79,
							"name": "getWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 213,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 80,
									"name": "getWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValue.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getWhere<'myClass'>('myCollection', 'myField', 'myOperator, 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 81,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 82,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 83,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of a field in the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 84,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An operator such as '=', '<>', '>', etc."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 85,
											"name": "predicateValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 73,
							"name": "search",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 182,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 74,
									"name": "search",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that match the specified search criteria.\nThe search criteria are the search field and the search value.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.search<'myClass'>('myCollection', 'myField', 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 75,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 76,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 77,
											"name": "queryKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the search field."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 78,
											"name": "queryValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 98,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 304,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 99,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inserts a new document into a collection.",
										"returns": "An http status code (e.g., OK), or the updated document if returnDoc was specified as true.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.set('myCollection', 'myDocument', 'Some contents for the document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 100,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 101,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 102,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 103,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Return the updated doc as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 104,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 334,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 105,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Replaces the contents of an existing document in a collection.",
										"returns": "An http status code (e.g., OK), or the updated document if returnDoc was specified as true.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.set('myCollection', 'myDocument', 'Some contents for the document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 106,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 107,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 108,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "New contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 109,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Return the updated doc as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								61
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								110,
								116,
								122,
								66,
								86,
								91,
								71,
								79,
								73,
								98,
								104
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 95,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 128,
							"name": "IDatabase"
						}
					]
				},
				{
					"id": 128,
					"name": "IDatabase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 173,
							"name": "arrayPush",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 364,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 174,
									"name": "arrayPush",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Appends contents to an existing document in a collection.",
										"returns": "An http status code (e.g., OK), or the updated document if returnDoc was specified as true.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.arrayPush('myCollection', 'myDocument', 'Contents appended to end of document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 175,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 176,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 177,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Appended contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 178,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Return the updated doc as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 111,
										"name": "Database.arrayPush"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 110,
								"name": "Database.arrayPush"
							}
						},
						{
							"id": 179,
							"name": "arrayRemove",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 394,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 180,
									"name": "arrayRemove",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes part of the contents from an existing document in a collection.",
										"returns": "An http status code (e.g., OK), or the updated document if returnDoc was specified as true.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.arrayPush('myCollection', 'myDocument', 'Contents to be removed from document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 181,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 182,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 183,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Removed contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 184,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Return the updated doc as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 117,
										"name": "Database.arrayRemove"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 116,
								"name": "Database.arrayRemove"
							}
						},
						{
							"id": 185,
							"name": "delete",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 422,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 186,
									"name": "delete",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Deletes a document from a collection.",
										"returns": "An http status code (e.g., OK).\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.delete('myCollection', 'myDocument');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 187,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 188,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 52,
												"name": "DatabaseHttpStatusCode"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 123,
										"name": "Database.delete"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 122,
								"name": "Database.delete"
							}
						},
						{
							"id": 129,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 134,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 130,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the specified database entry or collection of entries.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.get('myCollection');\nconst myEntry = await database.get('myCollection','myDoc');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 131,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 132,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 133,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Name of the entry."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 67,
										"name": "Database.get"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 66,
								"name": "Database.get"
							}
						},
						{
							"id": 149,
							"name": "getAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 244,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 150,
									"name": "getAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for the documents whose names are included in an array of document names.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAll<'myClass'>('myCollection', ['doc1', 'doc2']);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 151,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 152,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 153,
											"name": "documentNames",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array of one or more document names"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 87,
										"name": "Database.getAll"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 86,
								"name": "Database.getAll"
							}
						},
						{
							"id": 154,
							"name": "getAllWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 274,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 155,
									"name": "getAllWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValues.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getAllWhere<'myClass'>('myCollection', 'myField', 'myOperator, ['mySearchValue1', mySearchValue2]);\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 156,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 157,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 158,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of a field in the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 159,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An operator such as '=', '<>', '>', etc."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 160,
											"name": "predicateValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An array of one or more search values."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 92,
										"name": "Database.getAllWhere"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 91,
								"name": "Database.getAllWhere"
							}
						},
						{
							"id": 134,
							"name": "getCollections",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 157,
									"character": 29
								}
							],
							"signatures": [
								{
									"id": 135,
									"name": "getCollections",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a list of all collections available in the database.",
										"returns": "List containing the names of the collections.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst collections = await database.getCollections();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 72,
										"name": "Database.getCollections"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 71,
								"name": "Database.getCollections"
							}
						},
						{
							"id": 142,
							"name": "getWhere",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 213,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 143,
									"name": "getWhere",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that satisfy the specified predicate.\nThe predicate is specified using predicateKey, predicateOperator, and predicateValue.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.getWhere<'myClass'>('myCollection', 'myField', 'myOperator, 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 144,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 145,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 146,
											"name": "predicateKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of a field in the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 147,
											"name": "predicateOperation",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "An operator such as '=', '<>', '>', etc."
											},
											"type": {
												"type": "reference",
												"id": 41,
												"name": "PredicateOperator"
											}
										},
										{
											"id": 148,
											"name": "predicateValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 80,
										"name": "Database.getWhere"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 79,
								"name": "Database.getWhere"
							}
						},
						{
							"id": 136,
							"name": "search",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 182,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 137,
									"name": "search",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Searches a collection for records that match the specified search criteria.\nThe search criteria are the search field and the search value.",
										"returns": "Data requested from the collection.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.search<'myClass'>('myCollection', 'myField', 'mySearchValue');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 138,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Data from a Koji database collection."
											}
										}
									],
									"parameters": [
										{
											"id": 139,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 140,
											"name": "queryKey",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the search field."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 141,
											"name": "queryValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Search value."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"name": "T"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 74,
										"name": "Database.search"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 73,
								"name": "Database.search"
							}
						},
						{
							"id": 161,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 304,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 162,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Inserts a new document into a collection.",
										"returns": "An http status code (e.g., OK), or the updated document if returnDoc was specified as true.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.set('myCollection', 'myDocument', 'Some contents for the document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 163,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 164,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 165,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 166,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Return the updated doc as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 99,
										"name": "Database.set"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 98,
								"name": "Database.set"
							}
						},
						{
							"id": 167,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/database/index.ts",
									"line": 334,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 168,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Replaces the contents of an existing document in a collection.",
										"returns": "An http status code (e.g., OK), or the updated document if returnDoc was specified as true.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myData = await database.set('myCollection', 'myDocument', 'Some contents for the document');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 169,
											"name": "collection",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the collection."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 170,
											"name": "documentName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Document name."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 171,
											"name": "documentBody",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "New contents."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 172,
											"name": "returnDoc",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Return the updated doc as a response."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 105,
										"name": "Database.update"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 104,
								"name": "Database.update"
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								173,
								179,
								185,
								129,
								149,
								154,
								134,
								142,
								136,
								161,
								167
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/database/index.ts",
							"line": 436,
							"character": 26
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 60,
							"name": "Database"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						52,
						30,
						41
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						60
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						128
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/database/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 28,
			"name": "backend/database/index.spec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"sources": [
				{
					"fileName": "backend/database/index.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 191,
			"name": "backend/dispatch",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 192,
					"name": "PlatformEvents",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Defines constants for Koji platform events."
					},
					"children": [
						{
							"id": 193,
							"name": "CONNECTED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 34,
									"character": 11
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED\""
						},
						{
							"id": 194,
							"name": "CONNECTED_CLIENTS_CHANGED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 35,
									"character": 27
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED_CLIENTS_CHANGED\""
						},
						{
							"id": 195,
							"name": "IDENTIFY",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 36,
									"character": 10
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/IDENTIFY\""
						},
						{
							"id": 196,
							"name": "SET_USER_INFO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 37,
									"character": 15
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/SET_USER_INFO\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								193,
								194,
								195,
								196
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 33,
							"character": 26
						}
					]
				},
				{
					"id": 217,
					"name": "Dispatch",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements a real-time messaging dispatch system for the backend of your Koji."
					},
					"children": [
						{
							"id": 218,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 219,
									"name": "new Dispatch",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst dispatch = new KojiBackend.Dispatch({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 220,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 217,
										"name": "Dispatch"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 229,
							"name": "connect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 123,
									"character": 22
								}
							],
							"signatures": [
								{
									"id": 230,
									"name": "connect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a shard connection.",
										"returns": "ConnectionInfo object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myInfo = await dispatch.connect('myShard', 100, authorization);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 231,
											"name": "__namedParameters",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "DispatchConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 214,
												"name": "ConnectionInfo"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 268,
							"name": "disconnect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 350,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 269,
									"name": "disconnect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Close connection.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.disconnect();\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 260,
							"name": "emitEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 316,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 261,
									"name": "emitEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.emitEvent('click', [id:1]);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 262,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of event."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 263,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object of key-value paired data to send as a message payload."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 264,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 265,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 266,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 267,
											"name": "recipients",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "One or more event recipients.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 257,
							"name": "identify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 298,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 258,
									"name": "identify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit IDENTIFY event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.identify(token);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 259,
											"name": "authToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Authorization token.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 227,
							"name": "info",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 104,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 228,
									"name": "info",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets shard info for the current project.",
										"returns": "Shard info in the form of an array.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myInfo = await dispatch.info('myCollection');\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 211,
													"name": "ShardInfo"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 247,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 260,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 248,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Assigns a callback function to an event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.on('eventName', callbackFunction);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 249,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of event."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 250,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Callback function.\n"
											},
											"type": {
												"type": "reference",
												"id": 201,
												"name": "MessageHandlerCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 251,
							"name": "setUserInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 284,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 252,
									"name": "setUserInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emit SET_USER_INFO event.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\ndispatch.setUserInfo({['user info']});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 253,
											"name": "userInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing an array of user info.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 254,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 255,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 256,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								218
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								229,
								268,
								260,
								257,
								227,
								247,
								251
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 73,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				},
				{
					"id": 214,
					"name": "ConnectionInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a ConnectionInfo interface."
					},
					"children": [
						{
							"id": 215,
							"name": "clientId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 66,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 216,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 67,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								215,
								216
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 65,
							"character": 31
						}
					]
				},
				{
					"id": 197,
					"name": "MessageHandler",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a MessageHandler interface."
					},
					"children": [
						{
							"id": 200,
							"name": "callback",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 46,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 201,
								"name": "MessageHandlerCallback"
							}
						},
						{
							"id": 199,
							"name": "eventName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 45,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 198,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 44,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								200,
								199,
								198
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 43,
							"character": 31
						}
					]
				},
				{
					"id": 211,
					"name": "ShardInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a ShardInfo interface."
					},
					"children": [
						{
							"id": 213,
							"name": "numConnectedClients",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 59,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 212,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 58,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								213,
								212
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 57,
							"character": 26
						}
					]
				},
				{
					"id": 201,
					"name": "MessageHandlerCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Implements the callback function for the MessageHandler interface."
					},
					"sources": [
						{
							"fileName": "backend/dispatch/index.ts",
							"line": 52,
							"character": 34
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 202,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/dispatch/index.ts",
									"line": 52,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 203,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 204,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 205,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "backend/dispatch/index.ts",
															"line": 52,
															"character": 46
														}
													],
													"indexSignature": {
														"id": 206,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 207,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 208,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 209,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 210,
															"name": "latencyMs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "backend/dispatch/index.ts",
																	"line": 52,
																	"character": 94
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																210
															]
														}
													],
													"sources": [
														{
															"fileName": "backend/dispatch/index.ts",
															"line": 52,
															"character": 82
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						192
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						217
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						214,
						197,
						211
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						201
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/dispatch/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 272,
			"name": "backend/iap",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 273,
					"name": "IapRoutes",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "API routes for iap methods."
					},
					"children": [
						{
							"id": 274,
							"name": "GET_PRODUCT_BY_SKU",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 10,
									"character": 20
								}
							],
							"defaultValue": "\"/v1/iap/provider/getProductBySku\""
						},
						{
							"id": 275,
							"name": "RESOLVE_RECEIPTS",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 11,
									"character": 18
								}
							],
							"defaultValue": "\"/v1/iap/consumer/resolveReceipts\""
						},
						{
							"id": 277,
							"name": "RESOLVE_RECEIPTS_BY_SKU",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 13,
									"character": 25
								}
							],
							"defaultValue": "\"/v1/iap/consumer/resolveReceiptsBySku\""
						},
						{
							"id": 276,
							"name": "RESOLVE_RECEIPT_BY_ID",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 12,
									"character": 23
								}
							],
							"defaultValue": "\"/v1/iap/consumer/resolveReceiptById\""
						},
						{
							"id": 278,
							"name": "UPDATE_RECEIPT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 14,
									"character": 16
								}
							],
							"defaultValue": "\"/v1/iap/consumer/updateReceiptAttributes\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								274,
								275,
								277,
								276,
								278
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 9,
							"character": 21
						}
					]
				},
				{
					"id": 292,
					"name": "IAP",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements in-app purchases for the backend of your Koji."
					},
					"children": [
						{
							"id": 293,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 294,
									"name": "new IAP",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst iap = new KojiBackend.IAP({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 295,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 292,
										"name": "IAP"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 315,
							"name": "loadProduct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 160,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 316,
									"name": "loadProduct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load product by sku.",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\niap.loadProduct(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 317,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Product sku."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 301,
							"name": "resolveReceiptById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 98,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 302,
									"name": "resolveReceiptById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts by receipt id",
										"returns": "Array of receipts.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipt = iap.resolveReceiptById(id);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 303,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Receipt id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 279,
												"name": "IapReceipt"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 298,
							"name": "resolveReceiptsByIAPToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 71,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 299,
									"name": "resolveReceiptsByIAPToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts by user token",
										"returns": "Array of receipts.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = iap.resolveReceiptsByUserToken(token);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 300,
											"name": "iapToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 279,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 304,
							"name": "resolveReceiptsBySku",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 116,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 305,
									"name": "resolveReceiptsBySku",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts for a product by sku",
										"returns": "Array of receipts that include the product.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = iap.resolveReceiptById(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 306,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Product sku."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 279,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 307,
							"name": "updateReceipt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 135,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 308,
									"name": "updateReceipt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Update receipt",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\niap.updateReceipt(id, { consumed: true }, 'You have successfully redeemed your purchase.');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 309,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Receipt id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 310,
											"name": "attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object of key-value paired attributes to store with the receipt."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 311,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 312,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 313,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 314,
											"name": "notificationMessage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional notification message."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								293
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								315,
								301,
								298,
								304,
								307
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 35,
							"character": 16
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 320,
							"name": "IIAP"
						}
					]
				},
				{
					"id": 320,
					"name": "IIAP",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 338,
							"name": "loadProduct",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 160,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 339,
									"name": "loadProduct",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Load product by sku.",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\niap.loadProduct(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 340,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Product sku."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 316,
										"name": "IAP.loadProduct"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 315,
								"name": "IAP.loadProduct"
							}
						},
						{
							"id": 324,
							"name": "resolveReceiptById",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 98,
									"character": 33
								}
							],
							"signatures": [
								{
									"id": 325,
									"name": "resolveReceiptById",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts by receipt id",
										"returns": "Array of receipts.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipt = iap.resolveReceiptById(id);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 326,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Receipt id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 279,
												"name": "IapReceipt"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 302,
										"name": "IAP.resolveReceiptById"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 301,
								"name": "IAP.resolveReceiptById"
							}
						},
						{
							"id": 321,
							"name": "resolveReceiptsByIAPToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 71,
									"character": 40
								}
							],
							"signatures": [
								{
									"id": 322,
									"name": "resolveReceiptsByIAPToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts by user token",
										"returns": "Array of receipts.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = iap.resolveReceiptsByUserToken(token);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 323,
											"name": "iapToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 279,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 299,
										"name": "IAP.resolveReceiptsByIAPToken"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 298,
								"name": "IAP.resolveReceiptsByIAPToken"
							}
						},
						{
							"id": 327,
							"name": "resolveReceiptsBySku",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 116,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 328,
									"name": "resolveReceiptsBySku",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Get receipts for a product by sku",
										"returns": "Array of receipts that include the product.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst receipts = iap.resolveReceiptById(sku);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 329,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Product sku."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 279,
													"name": "IapReceipt"
												}
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 305,
										"name": "IAP.resolveReceiptsBySku"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 304,
								"name": "IAP.resolveReceiptsBySku"
							}
						},
						{
							"id": 330,
							"name": "updateReceipt",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 135,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 331,
									"name": "updateReceipt",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Update receipt",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\niap.updateReceipt(id, { consumed: true }, 'You have successfully redeemed your purchase.');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 332,
											"name": "receiptId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Receipt id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 333,
											"name": "attributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object of key-value paired attributes to store with the receipt."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 334,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 335,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 336,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 337,
											"name": "notificationMessage",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Optional notification message."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 308,
										"name": "IAP.updateReceipt"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 307,
								"name": "IAP.updateReceipt"
							}
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								338,
								324,
								321,
								327,
								330
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 167,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 292,
							"name": "IAP"
						}
					]
				},
				{
					"id": 279,
					"name": "IapReceipt",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines an interface for a receipt."
					},
					"children": [
						{
							"id": 283,
							"name": "attributes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 24,
									"character": 12
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 284,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": {
										"id": 285,
										"name": "__index",
										"kind": 8192,
										"kindString": "Index signature",
										"flags": {},
										"parameters": [
											{
												"id": 286,
												"name": "index",
												"kind": 32768,
												"flags": {},
												"type": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										],
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							}
						},
						{
							"id": 291,
							"name": "datePurchased",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 29,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "Date"
							}
						},
						{
							"id": 281,
							"name": "productId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 22,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 282,
							"name": "purchasedPrice",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 23,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 280,
							"name": "receiptId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 287,
							"name": "transactionIds",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/iap/index.ts",
									"line": 25,
									"character": 16
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 288,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 289,
											"name": "credit",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "backend/iap/index.ts",
													"line": 26,
													"character": 10
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 290,
											"name": "debit",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "backend/iap/index.ts",
													"line": 27,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												289,
												290
											]
										}
									]
								}
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								283,
								291,
								281,
								282,
								280,
								287
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/iap/index.ts",
							"line": 20,
							"character": 27
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						273
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						292
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						320,
						279
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/iap/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 343,
			"name": "backend/identity",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 344,
					"name": "AuthRoutes",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "API routes for auth methods."
					},
					"children": [
						{
							"id": 345,
							"name": "GET_GRANT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 10,
									"character": 11
								}
							],
							"defaultValue": "\"/v1/apps/auth/consumer/getGrantForToken\""
						},
						{
							"id": 346,
							"name": "GET_ROLE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 11,
									"character": 10
								}
							],
							"defaultValue": "\"/v1/apps/auth/consumer/getRoleForToken\""
						},
						{
							"id": 347,
							"name": "PUSH_NOTIFICATION",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 12,
									"character": 19
								}
							],
							"defaultValue": "\"/v1/apps/auth/consumer/pushNotification\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								345,
								346,
								347
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 9,
							"character": 22
						}
					]
				},
				{
					"id": 348,
					"name": "UserRole",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Possible values for a user's role within a Koji."
					},
					"children": [
						{
							"id": 349,
							"name": "ADMIN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 19,
									"character": 7
								}
							],
							"defaultValue": "\"admin\""
						},
						{
							"id": 350,
							"name": "UNKNOWN",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 20,
									"character": 9
								}
							],
							"defaultValue": "\"unknown\""
						},
						{
							"id": 351,
							"name": "USER",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 21,
									"character": 6
								}
							],
							"defaultValue": "\"user\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								349,
								350,
								351
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 18,
							"character": 20
						}
					]
				},
				{
					"id": 368,
					"name": "Identity",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements an Identity class for backend authentication of your Koji."
					},
					"children": [
						{
							"id": 369,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 370,
									"name": "new Identity",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst identity = new KojiBackend.Identity({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 371,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 368,
										"name": "Identity"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 378,
							"name": "pushNotificationToOwner",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 116,
									"character": 38
								}
							],
							"signatures": [
								{
									"id": 379,
									"name": "pushNotificationToOwner",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a notification to the owner",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nidentity.pushNotificationToUser(id, notification);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 380,
											"name": "notification",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Notification to send to owner."
											},
											"type": {
												"type": "reference",
												"id": 363,
												"name": "PushNotification"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 374,
							"name": "pushNotificationToUser",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 91,
									"character": 37
								}
							],
							"signatures": [
								{
									"id": 375,
									"name": "pushNotificationToUser",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends a notification to a user",
										"returns": "Data object.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nidentity.pushNotificationToUser(id, notification);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 376,
											"name": "userId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "User id."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 377,
											"name": "notification",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Notification to send to user."
											},
											"type": {
												"type": "reference",
												"id": 363,
												"name": "PushNotification"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 381,
							"name": "resolveUserFromToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 141,
									"character": 35
								}
							],
							"signatures": [
								{
									"id": 382,
									"name": "resolveUserFromToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets user by token",
										"returns": "User.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst user = identity.resolveUserFromToken(token);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 383,
											"name": "token",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "User token."
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 352,
												"name": "User"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								369
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								378,
								374,
								381
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 54,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				},
				{
					"id": 363,
					"name": "PushNotification",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a notification to send to a user’s Koji account. Send notifications with [[pushNotificationToOwner]], for the user who created the Koji, or [[pushNotificationToUser]], for a user who interacts with the Koji and has granted the appropriate authorization."
					},
					"children": [
						{
							"id": 364,
							"name": "appName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Headline for the message. For example, the name of the Koji that generated the notification."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 42,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 365,
							"name": "icon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Icon to display next to the message, either the URL of an image or an emoji character."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 44,
									"character": 6
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 366,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Content of the message."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 46,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 367,
							"name": "ref",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Query parameters to append to the Koji URL when the notification is tapped. For example, load the admin experience or a dynamic receipt from the notification."
							},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 48,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								364,
								365,
								366,
								367
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 40,
							"character": 33
						}
					]
				},
				{
					"id": 352,
					"name": "User",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines an interface for a user."
					},
					"children": [
						{
							"id": 354,
							"name": "attributes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 29,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 355,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 356,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 357,
														"name": "index",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								]
							}
						},
						{
							"id": 358,
							"name": "dateCreated",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 30,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 359,
							"name": "grants",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 31,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 360,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 361,
													"name": "pushNotificationsEnabled",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "backend/identity/index.ts",
															"line": 32,
															"character": 28
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														361
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 353,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 28,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 362,
							"name": "role",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "backend/identity/index.ts",
									"line": 34,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"id": 349,
										"name": "ADMIN"
									},
									{
										"type": "reference",
										"id": 350,
										"name": "UNKNOWN"
									},
									{
										"type": "reference",
										"id": 351,
										"name": "USER"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								354,
								358,
								359,
								353,
								362
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/identity/index.ts",
							"line": 27,
							"character": 21
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						344,
						348
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						368
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						363,
						352
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/identity/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 403,
			"name": "backend/middleware",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 412,
					"name": "KojiConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 416,
							"name": "@@initialTransform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Placeholder values for new remixes."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 10,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 414,
							"name": "deploy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for deploying the services to production."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 8,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 413,
							"name": "develop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for setting up the services in a development/editor environment."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 6,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 415,
							"name": "remixData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default values for the customizable remix data."
							},
							"sources": [
								{
									"fileName": "backend/middleware/index.ts",
									"line": 10,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								416,
								414,
								413,
								415
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/middleware/index.ts",
							"line": 4,
							"character": 27
						}
					]
				},
				{
					"id": 404,
					"name": "middleware",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "backend/middleware/index.ts",
							"line": 37,
							"character": 26
						}
					],
					"signatures": [
						{
							"id": 405,
							"name": "middleware",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Executes middleware, making koji-specific data available on the res.locals property.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```\napp.use(Koji.middleware(require('koji.json'));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 406,
									"name": "kojiConfig",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Configuration data for the Koji.\n"
									},
									"type": {
										"type": "reference",
										"id": 412,
										"name": "KojiConfig"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 407,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 408,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 409,
													"name": "req",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "ParamsDictionary"
															},
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "reference",
																"name": "ParsedQs"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "Record"
															}
														],
														"name": "Request"
													}
												},
												{
													"id": 410,
													"name": "res",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "any"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "Record"
															}
														],
														"name": "Response"
													}
												},
												{
													"id": 411,
													"name": "next",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "NextFunction"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						412
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						404
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/middleware/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 417,
			"name": "backend/secret",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 418,
					"name": "Secret",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements a class for handling secret values in your Koji."
					},
					"children": [
						{
							"id": 419,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 420,
									"name": "new Secret",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst secret = new KojiBackend.Secret({ res });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 421,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 12,
												"name": "BackendConfigurationInput"
											}
										}
									],
									"type": {
										"type": "reference",
										"id": 418,
										"name": "Secret"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 21,
										"name": "Base.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 20,
								"name": "Base.constructor"
							}
						},
						{
							"id": 428,
							"name": "generateSignedUrl",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/secret/index.ts",
									"line": 84,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 429,
									"name": "generateSignedUrl",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a signed URL.",
										"returns": "URL for resource.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst temporaryImagePath = await secret.generateSignedUrl('https://images.koji-cdn.com/e83eaff0-279f-4403-951b-e56507af923d/userData/emfga-icon.png');\n\n// Blur the image\nconst temporaryBlurredImagePath = await secret.generateSignedUrl('https://images.koji-cdn.com/e83eaff0-279f-4403-951b-e56507af923d/userData/emfga-icon.png?blur=10');\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 430,
											"name": "resource",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Path to resource. If the resource is a Koji CDN-hosted image, you can also pass in transforms via query parameters."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 431,
											"name": "expireSeconds",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Expiration in seconds"
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 424,
							"name": "resolveValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "server",
									"type": {
										"type": "reference",
										"id": 2,
										"name": "server"
									}
								}
							],
							"sources": [
								{
									"fileName": "backend/secret/index.ts",
									"line": 52,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 425,
									"name": "resolveValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the value for a secret key.",
										"returns": "Key value.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst keyValue = await secret.resolveValue<string>(SecretRoutes.KEYSTORE_GET + \"/mySecretKey\");\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 426,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 427,
											"name": "keyPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Path for secret key"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "T"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								419
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								428,
								424
							]
						}
					],
					"sources": [
						{
							"fileName": "backend/secret/index.ts",
							"line": 16,
							"character": 19
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 19,
							"name": "Base"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						418
					]
				}
			],
			"sources": [
				{
					"fileName": "backend/secret/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 612,
			"name": "frontend",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 625,
					"name": "Koji",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Provides frontend methods for your Koji."
					},
					"children": [
						{
							"id": 626,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 627,
									"name": "new Koji",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 625,
										"name": "Koji"
									}
								}
							]
						},
						{
							"id": 632,
							"name": "analytics",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 53,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"id": 441,
								"name": "Analytics"
							},
							"defaultValue": "..."
						},
						{
							"id": 629,
							"name": "configInitialized",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Indicates that the Koji.config() call has been made."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 47,
									"character": 26
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 633,
							"name": "dispatch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 54,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 489,
								"name": "Dispatch"
							},
							"defaultValue": "..."
						},
						{
							"id": 634,
							"name": "iap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 55,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"id": 555,
								"name": "IAP"
							},
							"defaultValue": "..."
						},
						{
							"id": 635,
							"name": "identity",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 56,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 585,
								"name": "Identity"
							},
							"defaultValue": "..."
						},
						{
							"id": 628,
							"name": "isReady",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Indicates that the Koji.ready() call has been made."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 45,
									"character": 16
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 636,
							"name": "playerState",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 57,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"id": 701,
								"name": "PlayerState"
							},
							"defaultValue": "..."
						},
						{
							"id": 631,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The project's id."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 51,
									"character": 18
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 637,
							"name": "remix",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 58,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"id": 737,
								"name": "Remix"
							},
							"defaultValue": "..."
						},
						{
							"id": 630,
							"name": "services",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "The configured service endpoints."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 49,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 618,
								"name": "Services"
							},
							"defaultValue": "..."
						},
						{
							"id": 638,
							"name": "ui",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 59,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"id": 1030,
								"name": "UI"
							},
							"defaultValue": "..."
						},
						{
							"id": 639,
							"name": "config",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 77,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 640,
									"name": "config",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Initializes this package for use with configuration data from the `koji.json` file. This method sets up the services, remix values, development environment, and deployment instructions for your Koji template. It also performs some basic structural checks.",
										"text": "<p class=\"note\"> A template should initialize the package one time, before any data in the application is rendered.</p>\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```\nKoji.config(require('koji.json'));\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 641,
											"name": "kojiConfig",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Configuration data for the Koji.\n"
											},
											"type": {
												"type": "reference",
												"id": 613,
												"name": "KojiConfig"
											},
											"defaultValue": "..."
										},
										{
											"id": 642,
											"name": "kojiConfigOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 622,
												"name": "KojiConfigOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 655,
							"name": "ready",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 249,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 656,
									"name": "ready",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Indicates that the Koji is ready to start receiving events.",
										"text": "<p class=\"note\">You must call this function after initializing the package and subscribing to remix state changes, but before advancing to the preview with `Koji.remix.finish`.</p>\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.ready();\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								626
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								632,
								629,
								633,
								634,
								635,
								628,
								636,
								631,
								637,
								630,
								638
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								639,
								655
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 43,
							"character": 17
						}
					]
				},
				{
					"id": 613,
					"name": "KojiConfig",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration data for the Koji."
					},
					"children": [
						{
							"id": 617,
							"name": "@@initialTransform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Placeholder values for new remixes."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 21,
									"character": 18
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 615,
							"name": "deploy",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for deploying the services to production."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 19,
									"character": 8
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 614,
							"name": "develop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Instructions for setting up the services in a development/editor environment."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 17,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 616,
							"name": "remixData",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default values for the customizable remix data."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 21,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								617,
								615,
								614,
								616
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 15,
							"character": 27
						}
					]
				},
				{
					"id": 622,
					"name": "KojiConfigOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for the Koji."
					},
					"children": [
						{
							"id": 623,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Unique identifier for the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 36,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 624,
							"name": "services",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Defines services for the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 38,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 618,
								"name": "Services"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								623,
								624
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 34,
							"character": 34
						}
					]
				},
				{
					"id": 618,
					"name": "Services",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Key-value pairs of services and endpoints."
					},
					"sources": [
						{
							"fileName": "frontend/index.ts",
							"line": 29,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 619,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/index.ts",
									"line": 29,
									"character": 22
								}
							],
							"indexSignature": {
								"id": 620,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 621,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "intrinsic",
											"name": "undefined"
										}
									]
								}
							}
						}
					}
				},
				{
					"id": 657,
					"name": "default",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 625,
						"name": "Koji"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						625
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						613,
						622
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						618
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						657
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 434,
			"name": "frontend/@decorators/client",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 435,
					"name": "client",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"decorates": [
						{
							"type": "reference",
							"id": 444,
							"name": "track"
						},
						{
							"type": "reference",
							"id": 558,
							"name": "getToken"
						},
						{
							"type": "reference",
							"id": 560,
							"name": "startPurchase"
						},
						{
							"type": "reference",
							"id": 588,
							"name": "getToken"
						},
						{
							"type": "reference",
							"id": 655,
							"name": "ready"
						},
						{
							"type": "reference",
							"id": 708,
							"name": "onFocus"
						},
						{
							"type": "reference",
							"id": 711,
							"name": "onBlur"
						},
						{
							"type": "reference",
							"id": 714,
							"name": "subscribe"
						},
						{
							"type": "reference",
							"id": 743,
							"name": "init"
						},
						{
							"type": "reference",
							"id": 746,
							"name": "get"
						},
						{
							"type": "reference",
							"id": 751,
							"name": "set"
						},
						{
							"type": "reference",
							"id": 754,
							"name": "overwrite"
						},
						{
							"type": "reference",
							"id": 757,
							"name": "finish"
						},
						{
							"type": "reference",
							"id": 759,
							"name": "cancel"
						},
						{
							"type": "reference",
							"id": 761,
							"name": "encryptValue"
						},
						{
							"type": "reference",
							"id": 764,
							"name": "decryptValue"
						},
						{
							"type": "reference",
							"id": 1055,
							"name": "to"
						},
						{
							"type": "reference",
							"id": 1058,
							"name": "presentInModal"
						},
						{
							"type": "reference",
							"id": 1061,
							"name": "createRemix"
						},
						{
							"type": "reference",
							"id": 1064,
							"name": "edit"
						},
						{
							"type": "reference",
							"id": 1066,
							"name": "dismiss"
						},
						{
							"type": "reference",
							"id": 1068,
							"name": "openShareDialog"
						},
						{
							"type": "reference",
							"id": 1097,
							"name": "confirmation"
						},
						{
							"type": "reference",
							"id": 1100,
							"name": "alert"
						}
					],
					"sources": [
						{
							"fileName": "frontend/@decorators/client.ts",
							"line": 10,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 436,
							"name": "client",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Verifies that client-side methods are used only in frontend services of the Koji.",
								"returns": "Method's behavior or an error, if the method is being invoked in a node/backend environment.\n"
							},
							"parameters": [
								{
									"id": 437,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Class to which the method belongs."
									},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								},
								{
									"id": 438,
									"name": "propertyKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 439,
									"name": "descriptor",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method's behavior (which can be mutated inside this function)."
									},
									"type": {
										"type": "reference",
										"name": "PropertyDescriptor"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						435
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/@decorators/client.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 440,
			"name": "frontend/analytics",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 441,
					"name": "Analytics",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Enables you to track custom events in your Koji templates.\nFor example, track `onClick` events for the links and buttons in a Koji.",
						"text": "To view the analytics data for a published Koji, click the **Koji** button and click **Analytics**.\nYou will see data for the custom events along with a standard set of built-in metrics, which are calculated from the Koji’s access logs.\n\n<p class=\"tip\">Analytics data is processed at frequent intervals throughout the day. If you are testing the custom events in a published template and you don’t see results at first, wait 10 minutes to account for data processing latency, and then check again.</p>\n"
					},
					"children": [
						{
							"id": 442,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 443,
									"name": "new Analytics",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 441,
										"name": "Analytics"
									}
								}
							]
						},
						{
							"id": 444,
							"name": "track",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/analytics/index.ts",
									"line": 30,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 445,
									"name": "track",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates an analytics event with the specified name and data payload, if applicable.",
										"returns": "Indicates whether the event was generated.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n\n```javascript\nconst event = Koji.analytics.track('My Custom Event');\n\n// with optional payload\nconst event = Koji.analytics.track('Won game', { score: 120 });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 446,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the custom event."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 447,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "List of custom key-value pairs to save with the event."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 448,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 449,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 450,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								442
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								444
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/analytics/index.ts",
							"line": 12,
							"character": 22
						}
					]
				},
				{
					"id": 451,
					"name": "analytics",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/analytics/index.ts",
							"line": 44,
							"character": 22
						}
					],
					"type": {
						"type": "reference",
						"id": 441,
						"name": "Analytics"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						441
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						451
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/analytics/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 452,
			"name": "frontend/dispatch",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 464,
					"name": "PlatformEvents",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Defines constants for Koji platform events."
					},
					"children": [
						{
							"id": 465,
							"name": "CONNECTED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 35,
									"character": 11
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED\""
						},
						{
							"id": 466,
							"name": "CONNECTED_CLIENTS_CHANGED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 36,
									"character": 27
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/CONNECTED_CLIENTS_CHANGED\""
						},
						{
							"id": 467,
							"name": "IDENTIFY",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 37,
									"character": 10
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/IDENTIFY\""
						},
						{
							"id": 468,
							"name": "SET_USER_INFO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 38,
									"character": 15
								}
							],
							"defaultValue": "\"@@KOJI_DISPATCH/SET_USER_INFO\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								465,
								466,
								467,
								468
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 34,
							"character": 26
						}
					]
				},
				{
					"id": 489,
					"name": "Dispatch",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Implements a dispatch system for real-time communication on the frontend of your Koji template."
					},
					"children": [
						{
							"id": 490,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 491,
									"name": "new Dispatch",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 489,
										"name": "Dispatch"
									}
								}
							]
						},
						{
							"id": 504,
							"name": "connect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 137,
									"character": 22
								}
							],
							"signatures": [
								{
									"id": 505,
									"name": "connect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Connects a client to a dispatch shard.",
										"returns": "Connection details, including the client ID and shard name.\n\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst myInfo = await Koji.dispatch.connect({\n maxConnectionsPerShard: '25',\n authorization: token\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 506,
											"name": "config",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 453,
												"name": "DispatchConfigurationInput"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 486,
												"name": "ConnectionInfo"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 544,
							"name": "disconnect",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 367,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 545,
									"name": "disconnect",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Disconnects the dispatch client from the shard.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.dispatch.disconnect();\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 536,
							"name": "emitEvent",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 333,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 537,
									"name": "emitEvent",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Emits the named event to the specified recipients or to all clients.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.dispatch.emitEvent('myEvent', myDataPayload);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 538,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of event."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 539,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object of key-value paired data to send as a message payload."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 540,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 541,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 542,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 543,
											"name": "recipients",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "List of clients to receive the event. If this parameter is not included, the event is sent to all clients on the current shard.\n"
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 533,
							"name": "identify",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 315,
									"character": 17
								}
							],
							"signatures": [
								{
									"id": 534,
									"name": "identify",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Identifies a connected client, which enables the server and other connected clients to send it secure messages.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst tokenInfo = await Koji.identity.getToken();\nKoji.dispatch.identify(tokenInfo.token);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 535,
											"name": "authToken",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Short-lived token for the connected client. To get a token, use [[Identity.getToken]].\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 499,
							"name": "info",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 102,
									"character": 19
								}
							],
							"signatures": [
								{
									"id": 500,
									"name": "info",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets information about the active dispatch shards.",
										"returns": "Array of objects containing information about the dispatch shards.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst shardInfo = await Koji.dispatch.info();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 483,
													"name": "ShardInfo"
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 523,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 276,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 524,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets a listener for a specific event, and invokes a callback function when the event is dispatched over the shard.",
										"returns": "Function to unsubscribe from the event listener.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nunsubscribeEvent = Koji.dispatch.on('eventName', callbackFunction);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 525,
											"name": "eventName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the event to subscribe to."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 526,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to invoke when the event is fired.\n"
											},
											"type": {
												"type": "reference",
												"id": 473,
												"name": "MessageHandlerCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 501,
							"name": "setProjectId",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 117,
									"character": 21
								}
							],
							"signatures": [
								{
									"id": 502,
									"name": "setProjectId",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the project ID for the dispatch service.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.dispatch.setProjectId(myProject);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 503,
											"name": "projectId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Unique identifier for the Koji project.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 527,
							"name": "setUserInfo",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 300,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 528,
									"name": "setUserInfo",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Broadcasts user information for the client in the shard.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.dispatch.setUserInfo({ avatar: userAvatar });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 529,
											"name": "userInfo",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Data for the user information to set.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 530,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 531,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 532,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								490
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								504,
								544,
								536,
								533,
								499,
								523,
								501,
								527
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 82,
							"character": 21
						}
					]
				},
				{
					"id": 486,
					"name": "ConnectionInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Connection details for a client. Returned when the client [[Dispatch.connect | connects to a dispatch shard]]."
					},
					"children": [
						{
							"id": 487,
							"name": "clientId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "ID of the connected client."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 74,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 488,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Name of the dispatch shard that the client is connected to."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 76,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								487,
								488
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 72,
							"character": 31
						}
					]
				},
				{
					"id": 453,
					"name": "DispatchConfigurationInput",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a new connection."
					},
					"children": [
						{
							"id": 456,
							"name": "authorization",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Short-lived token that identifies the client, so the server and other connected clients can send it secure messages. If the token is not included, you can [[identify | identify the client]] after it is connected."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 17,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 455,
							"name": "maxConnectionsPerShard",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Total clients to allow on a shard before it is full. When a shard is full, new clients are added to a new shard unless a different shard is explicitly set."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 15,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 454,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Name of the dispatch shard to use. If not specified, the client is added to a shard automatically."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 13,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								456,
								455,
								454
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 11,
							"character": 43
						}
					]
				},
				{
					"id": 457,
					"name": "DispatchOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a DispatchOptions interface."
					},
					"children": [
						{
							"id": 461,
							"name": "authorization",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 27,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 460,
							"name": "maxConnectionsPerShard",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 26,
									"character": 24
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 458,
							"name": "projectId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 24,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 459,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 25,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								461,
								460,
								458,
								459
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 23,
							"character": 32
						}
					],
					"indexSignature": {
						"id": 462,
						"name": "__index",
						"kind": 8192,
						"kindString": "Index signature",
						"flags": {},
						"comment": {
							"shortText": "Defines a DispatchOptions interface."
						},
						"parameters": [
							{
								"id": 463,
								"name": "index",
								"kind": 32768,
								"flags": {},
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						],
						"type": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 469,
					"name": "MessageHandler",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a MessageHandler interface."
					},
					"children": [
						{
							"id": 472,
							"name": "callback",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 47,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 473,
								"name": "MessageHandlerCallback"
							}
						},
						{
							"id": 471,
							"name": "eventName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 46,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 470,
							"name": "id",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 45,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								472,
								471,
								470
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 44,
							"character": 31
						}
					]
				},
				{
					"id": 483,
					"name": "ShardInfo",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Information about a dispatch shard."
					},
					"children": [
						{
							"id": 485,
							"name": "numConnectedClients",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Number of clients currently connected to the dispatch shard."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 66,
									"character": 21
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 484,
							"name": "shardName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Name of the dispatch shard."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 64,
									"character": 11
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								485,
								484
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 62,
							"character": 26
						}
					]
				},
				{
					"id": 473,
					"name": "MessageHandlerCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 50,
							"character": 34
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 474,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"comment": {
								"shortText": "Function to handle a dispatch event. Invoked by the [[Dispatch.on | on]] listener."
							},
							"sources": [
								{
									"fileName": "frontend/dispatch/index.ts",
									"line": 50,
									"character": 36
								}
							],
							"signatures": [
								{
									"id": 475,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Function to handle a dispatch event. Invoked by the [[Dispatch.on | on]] listener."
									},
									"parameters": [
										{
											"id": 476,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Data payload sent with the fired event."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 477,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"sources": [
														{
															"fileName": "frontend/dispatch/index.ts",
															"line": 57,
															"character": 9
														}
													],
													"indexSignature": {
														"id": 478,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 479,
																"name": "index",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										},
										{
											"id": 480,
											"name": "metadata",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing additional information about the event, including the message latency in milliseconds.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 481,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 482,
															"name": "latencyMs",
															"kind": 1024,
															"kindString": "Property",
															"flags": {
																"isOptional": true
															},
															"sources": [
																{
																	"fileName": "frontend/dispatch/index.ts",
																	"line": 57,
																	"character": 57
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																482
															]
														}
													],
													"sources": [
														{
															"fileName": "frontend/dispatch/index.ts",
															"line": 57,
															"character": 45
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 546,
					"name": "dispatch",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/dispatch/index.ts",
							"line": 373,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"id": 489,
						"name": "Dispatch"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						464
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						489
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						486,
						453,
						457,
						469,
						483
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						473
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						546
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/dispatch/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 547,
			"name": "frontend/iap",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 555,
					"name": "IAP",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages in-app purchase transactions on the frontend of your Koji."
					},
					"children": [
						{
							"id": 556,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 557,
									"name": "new IAP",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 555,
										"name": "IAP"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 661,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 660,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 558,
							"name": "getToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 42,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 559,
									"name": "getToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Generates an IAP token for the current user that can be used to resolve receipts on the backend.",
										"returns": "Short-lived IAP token for the current user.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n``` javascript\nconst IAPToken = await Koji.iap.getToken();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 560,
							"name": "startPurchase",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 68,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 561,
									"name": "startPurchase",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to purchase a product from the Koji. Products are defined in the entitlements file and registered or updated when the Koji is published.",
										"returns": "Results of the in-app purchase transaction.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n``` javascript\nconst purchase = await Koji.iap.startPurchase(sku, purchaseOptions);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 562,
											"name": "sku",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Identifier for the product to purchase."
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 563,
											"name": "purchaseOptions",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 548,
												"name": "PurchaseOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 551,
												"name": "Purchase"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								556
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								558,
								560
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 30,
							"character": 16
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 659,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 551,
					"name": "Purchase",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Results of an in-app purchase transaction."
					},
					"children": [
						{
							"id": 553,
							"name": "iapToken",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Short-lived IAP token for the current user. See [[getToken]]."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 22,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 554,
							"name": "receiptId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Unique identifier for the receipt, if the purchase was successful, or `undefined`, if not."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 24,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 552,
							"name": "success",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Indicates whether the purchase was successful."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 20,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								553,
								554,
								552
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 18,
							"character": 25
						}
					]
				},
				{
					"id": 548,
					"name": "PurchaseOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Custom information to add to a [[IapReceipt | transaction receipt]] for a given in-app purchase."
					},
					"children": [
						{
							"id": 549,
							"name": "amount",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Amount of the purchase."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 10,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 550,
							"name": "customMessage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Custom message associated with the purchase. This value is stored as a custom attribute on the [[IapReceipt | transaction receipt]]."
							},
							"sources": [
								{
									"fileName": "frontend/iap/index.ts",
									"line": 12,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								549,
								550
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 8,
							"character": 32
						}
					]
				},
				{
					"id": 578,
					"name": "iap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/iap/index.ts",
							"line": 88,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 555,
						"name": "IAP"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						555
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						551,
						548
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						578
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/iap/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 580,
			"name": "frontend/identity",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 585,
					"name": "Identity",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages authentication and authorization on the frontend of your Koji."
					},
					"children": [
						{
							"id": 586,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 587,
									"name": "new Identity",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 585,
										"name": "Identity"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 661,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 660,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 590,
							"name": "checkGrants",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 67,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 591,
									"name": "checkGrants",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks whether the user has granted authorizations to the Koji. Use this method to determine whether to request authorization for certain capabilities.",
										"returns": "Indicates whether the user has already granted authorization for the capabilities.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst hasGrant = await Koji.identity.checkGrants(['username', 'push_notifications']);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 592,
											"name": "grants",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "List of authorization grants to check for the user."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 581,
													"name": "AuthGrantCapability"
												}
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 588,
							"name": "getToken",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 41,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 589,
									"name": "getToken",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets a token identifying the current user.",
										"returns": "Identity information for the current user of the Koji.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst tokenInfo = await Koji.identity.getToken();\n```\n"
											}
										]
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 582,
												"name": "IdentityResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 593,
							"name": "requestGrants",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 91,
									"character": 28
								}
							],
							"signatures": [
								{
									"id": 594,
									"name": "requestGrants",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Requests the specified authorization grants from the user for the Koji.",
										"returns": "Indicates whether authorization for the capabilities was successfully obtained from the user.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst hasGrant = await Koji.identity.requestGrants(['username', 'push_notifications']);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 595,
											"name": "grants",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "List of authorization grants to request from the user."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"id": 581,
													"name": "AuthGrantCapability"
												}
											},
											"defaultValue": "..."
										},
										{
											"id": 596,
											"name": "usageDescription",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Custom message to display when requesting the grant.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								586
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								590,
								588,
								593
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 29,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 659,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 582,
					"name": "IdentityResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Identity information for the current user of the Koji."
					},
					"children": [
						{
							"id": 584,
							"name": "presumedRole",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Presumed role of the current user as the owner/creator (`admin`), not the owner (`user`), or not logged in (`unknown`).\nAdmin actions must still be secured on the backend by resolving the user’s role."
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 23,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": "admin"
									},
									{
										"type": "literal",
										"value": "user"
									},
									{
										"type": "literal",
										"value": "unknown"
									}
								]
							}
						},
						{
							"id": 583,
							"name": "token",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Short-lived token to identify the user."
							},
							"sources": [
								{
									"fileName": "frontend/identity/index.ts",
									"line": 19,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								584,
								583
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 17,
							"character": 31
						}
					]
				},
				{
					"id": 581,
					"name": "AuthGrantCapability",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Capabilities that a user can grant the current Koji authorization to use."
					},
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 8,
							"character": 31
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "push_notifications"
							},
							{
								"type": "literal",
								"value": "username"
							}
						]
					}
				},
				{
					"id": 611,
					"name": "identity",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/identity/index.ts",
							"line": 104,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"id": 585,
						"name": "Identity"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						585
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						582
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						581
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						611
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/identity/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 579,
			"name": "frontend/identity/index.spec",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"sources": [
				{
					"fileName": "frontend/identity/index.spec.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 658,
			"name": "frontend/kojiBridge",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 659,
					"name": "KojiBridge",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Enables communication between the platform and the Koji."
					},
					"children": [
						{
							"id": 660,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 661,
									"name": "new KojiBridge",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 659,
										"name": "KojiBridge"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								660
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/kojiBridge/index.ts",
							"line": 20,
							"character": 23
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 555,
							"name": "IAP"
						},
						{
							"type": "reference",
							"id": 585,
							"name": "Identity"
						},
						{
							"type": "reference",
							"id": 701,
							"name": "PlayerState"
						},
						{
							"type": "reference",
							"id": 737,
							"name": "Remix"
						},
						{
							"type": "reference",
							"id": 902,
							"name": "Capture"
						},
						{
							"type": "reference",
							"id": 1030,
							"name": "UI"
						},
						{
							"type": "reference",
							"id": 1052,
							"name": "Navigate"
						},
						{
							"type": "reference",
							"id": 1094,
							"name": "Present"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						659
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/kojiBridge/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 676,
			"name": "frontend/playerState",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 701,
					"name": "PlayerState",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages the state of the Koji player to enable distinct experiences for different users and views."
					},
					"children": [
						{
							"id": 702,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 703,
									"name": "new PlayerState",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 701,
										"name": "PlayerState"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 661,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 660,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 704,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Context of the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 75,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"id": 677,
								"name": "PlayerStateContext"
							},
							"defaultValue": "'default'"
						},
						{
							"id": 706,
							"name": "hasFocus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Focus state of the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 79,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "false"
						},
						{
							"id": 707,
							"name": "presentationStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Presentation style of the Koji."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 81,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"id": 679,
								"name": "PlayerPresentationStyle"
							},
							"defaultValue": "'fullscreen'"
						},
						{
							"id": 705,
							"name": "receiptType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Type of receipt."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 77,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "buyer"
									},
									{
										"type": "literal",
										"value": "seller"
									}
								]
							}
						},
						{
							"id": 711,
							"name": "onBlur",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 151,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 712,
									"name": "onBlur",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens for when a Koji leaves focus and invokes a callback function to respond to the focus state change.",
										"returns": "Function to unsubscribe from the onBlur listener.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst unsubscribeBlur = Koji.playerState.onBlur((blur) => {\n // Change Koji experience\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 713,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to handle when the Koji leaves focus.\n"
											},
											"type": {
												"type": "reference",
												"id": 695,
												"name": "BlurCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 708,
							"name": "onFocus",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 128,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 709,
									"name": "onFocus",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens for when a Koji enters focus and invokes a callback function to respond to the focus state change.",
										"returns": "Function to unsubscribe from the onFocus listener.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst unsubscribeFocus = Koji.playerState.onFocus((focus) => {\n // Change Koji experience\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 710,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to handle when the Koji enters focus.\n"
											},
											"type": {
												"type": "reference",
												"id": 698,
												"name": "FocusCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						},
						{
							"id": 714,
							"name": "subscribe",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 174,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 715,
									"name": "subscribe",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens to changes in remix state and invokes a callback function to enable different experiences during remix, preview, or use.",
										"returns": "Function to unsubscribe from the remix state listener.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst unsubscribe = Koji.playerState.subscribe((remixing, { type, mode }) => {\n // Change Koji experience\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 716,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to handle changes in remix state.\n"
											},
											"type": {
												"type": "reference",
												"id": 690,
												"name": "IsRemixingCallback"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Function"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								702
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								704,
								706,
								707,
								705
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								711,
								708,
								714
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 73,
							"character": 24
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 659,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 686,
					"name": "EditorAttributes",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Describes the remixer's editor."
					},
					"children": [
						{
							"id": 688,
							"name": "mode",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 45,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "edit"
									},
									{
										"type": "literal",
										"value": "new"
									}
								]
							}
						},
						{
							"id": 687,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "[[EditorType]]"
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 44,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "instant"
									},
									{
										"type": "literal",
										"value": "full"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								688,
								687
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 42,
							"character": 33
						}
					]
				},
				{
					"id": 680,
					"name": "ExpectedQueryParameters",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "URL query parameters that describe the current state of the Koji player."
					},
					"children": [
						{
							"id": 681,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "admin"
									},
									{
										"type": "literal",
										"value": "about"
									},
									{
										"type": "literal",
										"value": "remix"
									},
									{
										"type": "literal",
										"value": "sticker"
									},
									{
										"type": "literal",
										"value": "receipt"
									},
									{
										"type": "literal",
										"value": "screenshot"
									},
									{
										"type": "literal",
										"value": "default"
									}
								]
							}
						},
						{
							"id": 682,
							"name": "dynamic-receipt",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 25,
									"character": 31
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "buyer"
									},
									{
										"type": "literal",
										"value": "seller"
									}
								]
							}
						},
						{
							"id": 683,
							"name": "presentationStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 27,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "fullscreen"
									},
									{
										"type": "literal",
										"value": "popover"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								681,
								682,
								683
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 24,
							"character": 40
						}
					]
				},
				{
					"id": 695,
					"name": "BlurCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 62,
							"character": 24
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 696,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"comment": {
								"shortText": "Function to handle when the Koji leaves focus. Invoked by the [[onBlur]] listener."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 62,
									"character": 26
								}
							],
							"signatures": [
								{
									"id": 697,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Function to handle when the Koji leaves focus. Invoked by the [[onBlur]] listener."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 685,
					"name": "EditorMode",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Distinguishes between a `new` remix and an `edit` to the user’s existing Koji."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 37,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "edit"
							},
							{
								"type": "literal",
								"value": "new"
							}
						]
					}
				},
				{
					"id": 684,
					"name": "EditorType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Type of editor, either `instant` for an instant remix or `full` for the code editor."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 33,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "instant"
							},
							{
								"type": "literal",
								"value": "full"
							}
						]
					}
				},
				{
					"id": 698,
					"name": "FocusCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 66,
							"character": 25
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 699,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"comment": {
								"shortText": "Function to handle when the Koji enters focus. Invoked by the [[onFocus]] listener."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 66,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 700,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Function to handle when the Koji enters focus. Invoked by the [[onFocus]] listener."
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 690,
					"name": "IsRemixingCallback",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 53,
							"character": 30
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 691,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"comment": {
								"shortText": "Function to handle changes in remix state. Invoked by the [[subscribe]] listener."
							},
							"sources": [
								{
									"fileName": "frontend/playerState/index.ts",
									"line": 53,
									"character": 32
								}
							],
							"signatures": [
								{
									"id": 692,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Function to handle changes in remix state. Invoked by the [[subscribe]] listener."
									},
									"parameters": [
										{
											"id": 693,
											"name": "isRemixing",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether the Koji is in remixing mode."
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										},
										{
											"id": 694,
											"name": "editorAttributes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 686,
												"name": "EditorAttributes"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					}
				},
				{
					"id": 679,
					"name": "PlayerPresentationStyle",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Presentation style of the Koji, either in a modal window (`popover`) or the standard player (`fullscreen`).\nThe popover presentation style does not display the Koji button, so the Koji can use the full view."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 19,
							"character": 35
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "fullscreen"
							},
							{
								"type": "literal",
								"value": "popover"
							}
						]
					}
				},
				{
					"id": 677,
					"name": "PlayerStateContext",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Context in which the Koji is being viewed. A Koji can provide a distinct experience for each context."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 8,
							"character": 30
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "about"
							},
							{
								"type": "literal",
								"value": "admin"
							},
							{
								"type": "literal",
								"value": "remix"
							},
							{
								"type": "literal",
								"value": "sticker"
							},
							{
								"type": "literal",
								"value": "receipt"
							},
							{
								"type": "literal",
								"value": "screenshot"
							},
							{
								"type": "literal",
								"value": "default"
							}
						]
					}
				},
				{
					"id": 678,
					"name": "PlayerStateReceiptType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "View of the receipt for a transaction, either `buyer` or `seller`."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 13,
							"character": 34
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "buyer"
							},
							{
								"type": "literal",
								"value": "seller"
							}
						]
					}
				},
				{
					"id": 689,
					"name": "ReceiptType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Who is viewing the receipt for a transaction, either `buyer` or `seller`."
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 51,
							"character": 23
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "seller"
							},
							{
								"type": "literal",
								"value": "buyer"
							}
						]
					}
				},
				{
					"id": 731,
					"name": "playerState",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/playerState/index.ts",
							"line": 181,
							"character": 24
						}
					],
					"type": {
						"type": "reference",
						"id": 701,
						"name": "PlayerState"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						701
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						686,
						680
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						695,
						685,
						684,
						698,
						690,
						679,
						677,
						678,
						689
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						731
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/playerState/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 732,
			"name": "frontend/remix",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 737,
					"name": "Remix",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages the remixing experience for your Koji."
					},
					"children": [
						{
							"id": 738,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 739,
									"name": "new Remix",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 737,
										"name": "Remix"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 661,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 660,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 759,
							"name": "cancel",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 172,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 760,
									"name": "cancel",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Cancels the remix experience and returns the user to where they were before they started remixing. If the user has made changes, they are prompted to confirm this action.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.remix.cancel();\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 764,
							"name": "decryptValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 218,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 765,
									"name": "decryptValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Retrieves sensitive data that was [[encryptValue | stored as an encrypted value]].",
										"text": "<p class=\"note\">Only the creator of the Koji can access the decrypted value with this method. For example, to check that the value was entered correctly. To retrieve the value for other users, use [[resolveValue]] on the backend.</p>\n",
										"returns": "Decrypted value.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst value = await Koji.remix.decryptValue(encryptPath);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 766,
											"name": "encryptedValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Path where the encrypted value is stored."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 761,
							"name": "encryptValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 190,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 762,
									"name": "encryptValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stores sensitive data as an encrypted value. The sensitive data can only be accessed programmatically and is not available when the Koji is remixed.",
										"returns": "Path where the encrypted value is stored. Use this value to [[decryptValue | decrypt the value]] on the frontend, for the creator, or to [[resolveValue | resolve the value]] on the backend, for other users.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst encryptPath = await Koji.remix.encryptValue(text);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 763,
											"name": "rawValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value to encrypt."
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 757,
							"name": "finish",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 155,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 758,
									"name": "finish",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Advances the Koji from remix to preview.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```html\n<button onClick={() => Koji.remix.finish()}>\n Next\n</button>\n```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 746,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 95,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 747,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the remix data for the Koji.",
										"returns": "Object containing the current remix data.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\n\n// Return the entire `remixData` object\nconst values = Koji.remix.get();\n\n// Return a particular value\nconst backgroundColor = Koji.remix.get(['colors', 'background']);\n\n// Return a particular value with a default if the value is not defined\nconst textColor = Koji.remix.get(['colors', 'text'], '#000000');\n```\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 748,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 749,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Array of keys to target a specific value in the object."
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										},
										{
											"id": 750,
											"name": "defaultValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Value to return if no value exists at the targeted path."
											},
											"type": {
												"type": "reference",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 743,
							"name": "init",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 55,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 744,
									"name": "init",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Initializes the remix data for the Koji with default values.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.remix.init(require('../../../koji.json'));\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 745,
											"name": "remixData",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing the default values for your Koji.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 754,
							"name": "overwrite",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 139,
									"character": 18
								}
							],
							"signatures": [
								{
									"id": 755,
									"name": "overwrite",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Replaces all remix data with the specified object.",
										"text": "<p class=\"note\">This method overwrites all existing values in the remix data.\nTo update specific values only, use [[set]].</p>\n",
										"returns": "Indicates whether the remix data was successfully replaced.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nawait Koji.remix.overwrite({'myColor': color, 'myText': text});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 756,
											"name": "newValues",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object containing the new remix data for the Koji."
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 751,
							"name": "set",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 115,
									"character": 12
								}
							],
							"signatures": [
								{
									"id": 752,
									"name": "set",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Updates the specified values in the remix data.",
										"text": "<p class=\"note\">This method updates only the values that are specified in `newValue`. If other values exist, they not changed. To replace all remix data, use [[overwrite]].</p>\n",
										"returns": "Indicates whether the values were successfully updated.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nawait Koji.remix.set({'myColor': color});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 753,
											"name": "newValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Key-value pairs to update in the remix data."
											},
											"type": {
												"type": "reference",
												"name": "Object"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								738
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								759,
								764,
								761,
								757,
								746,
								743,
								754,
								751
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/remix/index.ts",
							"line": 26,
							"character": 18
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 659,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 733,
					"name": "ValueChanged",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Communicates changes to remix data."
					},
					"children": [
						{
							"id": 735,
							"name": "newValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "New value."
							},
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 18,
									"character": 10
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 734,
							"name": "path",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Path of the changed value."
							},
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 16,
									"character": 6
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 736,
							"name": "savedValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Previous value."
							},
							"sources": [
								{
									"fileName": "frontend/remix/index.ts",
									"line": 20,
									"character": 12
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								735,
								734,
								736
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/remix/index.ts",
							"line": 14,
							"character": 29
						}
					]
				},
				{
					"id": 783,
					"name": "remix",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/remix/index.ts",
							"line": 254,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"id": 737,
						"name": "Remix"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						737
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						733
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						783
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/remix/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 784,
			"name": "frontend/serviceMap",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 789,
					"name": "ServiceMap",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages endpoints for the services running in your Koji."
					},
					"children": [
						{
							"id": 790,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 791,
									"name": "new ServiceMap",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 789,
										"name": "ServiceMap"
									}
								}
							]
						},
						{
							"id": 792,
							"name": "services",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPublic": true
							},
							"comment": {
								"shortText": "Key-value pairs of services and endpoints."
							},
							"sources": [
								{
									"fileName": "frontend/serviceMap/index.ts",
									"line": 8,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"id": 785,
								"name": "Services"
							},
							"defaultValue": "..."
						},
						{
							"id": 793,
							"name": "config",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"sources": [
								{
									"fileName": "frontend/serviceMap/index.ts",
									"line": 22,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 794,
									"name": "config",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the environment variables for the available services in the Koji. This method automatically scopes the variables for instant remixes of the original Koji.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.serviceMap.config({\n frontend: process.env.KOJI_SERVICE_URL_frontend\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 795,
											"name": "envMap",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Key-value pairs of services and endpoints in the original Koji.\n"
											},
											"type": {
												"type": "reference",
												"id": 785,
												"name": "Services"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								790
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								792
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								793
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/serviceMap/index.ts",
							"line": 6,
							"character": 23
						}
					]
				},
				{
					"id": 785,
					"name": "Services",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "frontend/serviceMap/index.ts",
							"line": 1,
							"character": 20
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 786,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/serviceMap/index.ts",
									"line": 1,
									"character": 22
								}
							],
							"indexSignature": {
								"id": 787,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 788,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						}
					}
				},
				{
					"id": 796,
					"name": "serviceMap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/serviceMap/index.ts",
							"line": 42,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"id": 789,
						"name": "ServiceMap"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						789
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						785
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						796
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/serviceMap/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1029,
			"name": "frontend/ui",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1030,
					"name": "UI",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Defines the user interface for KojiBridge."
					},
					"children": [
						{
							"id": 1031,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1032,
									"name": "new UI",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1030,
										"name": "UI"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 661,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 660,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 1033,
							"name": "capture",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/index.ts",
									"line": 10,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 902,
								"name": "Capture"
							},
							"defaultValue": "..."
						},
						{
							"id": 1034,
							"name": "navigate",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/index.ts",
									"line": 11,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"id": 1052,
								"name": "Navigate"
							},
							"defaultValue": "..."
						},
						{
							"id": 1035,
							"name": "present",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/index.ts",
									"line": 12,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"id": 1094,
								"name": "Present"
							},
							"defaultValue": "..."
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1031
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1033,
								1034,
								1035
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/index.ts",
							"line": 9,
							"character": 15
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 659,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 1050,
					"name": "ui",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/index.ts",
							"line": 15,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"id": 1030,
						"name": "UI"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1030
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1050
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 797,
			"name": "frontend/ui/capture",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 811,
					"name": "CaptureStatus",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Whether the user completed the selection (`succeeded`) or exited the control without selecting a value (`cancelled`)."
					},
					"children": [
						{
							"id": 813,
							"name": "CANCELLED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 35,
									"character": 11
								}
							],
							"defaultValue": "\"cancelled\""
						},
						{
							"id": 812,
							"name": "SUCCEEDED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 34,
									"character": 11
								}
							],
							"defaultValue": "\"succeeded\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								813,
								812
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 33,
							"character": 25
						}
					]
				},
				{
					"id": 814,
					"name": "CaptureType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Capture method types."
					},
					"children": [
						{
							"id": 815,
							"name": "COLOR",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 40,
									"character": 7
								}
							],
							"defaultValue": "\"color\""
						},
						{
							"id": 816,
							"name": "FILE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 41,
									"character": 6
								}
							],
							"defaultValue": "\"file\""
						},
						{
							"id": 817,
							"name": "IMAGE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 42,
									"character": 7
								}
							],
							"defaultValue": "\"image\""
						},
						{
							"id": 818,
							"name": "LINK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 43,
									"character": 6
								}
							],
							"defaultValue": "\"link\""
						},
						{
							"id": 819,
							"name": "MEDIA",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 44,
									"character": 7
								}
							],
							"defaultValue": "\"media\""
						},
						{
							"id": 820,
							"name": "RANGE",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 45,
									"character": 7
								}
							],
							"defaultValue": "\"range\""
						},
						{
							"id": 821,
							"name": "SELECT",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 46,
									"character": 8
								}
							],
							"defaultValue": "\"select\""
						},
						{
							"id": 822,
							"name": "SOUND",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 47,
									"character": 7
								}
							],
							"defaultValue": "\"audio\""
						},
						{
							"id": 823,
							"name": "VIDEO",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 48,
									"character": 7
								}
							],
							"defaultValue": "\"video\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								815,
								816,
								817,
								818,
								819,
								820,
								821,
								822,
								823
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 39,
							"character": 23
						}
					]
				},
				{
					"id": 902,
					"name": "Capture",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Captures user input on the frontend of your Koji."
					},
					"children": [
						{
							"id": 903,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 904,
									"name": "new Capture",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 902,
										"name": "Capture"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 661,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 660,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 914,
							"name": "audio",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 296,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 915,
									"name": "audio",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a sound by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method when you want to limit the user to selecting a sound.",
										"text": "To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n",
										"returns": "URL to the audio asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst audio = await Koji.ui.capture.audio();\n\n// Hide asset packs and return an object\nconst audio = await Koji.ui.capture.audio({ hideExtensions: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 916,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 895,
												"name": "CaptureAudioOptions"
											}
										},
										{
											"id": 917,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the audio asset as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 799,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 918,
									"name": "audio",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 919,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 895,
												"name": "CaptureAudioOptions"
											}
										},
										{
											"id": 920,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 921,
									"name": "audio",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 922,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 895,
												"name": "CaptureAudioOptions"
											}
										},
										{
											"id": 923,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 798,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 924,
							"name": "color",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 353,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 925,
									"name": "color",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a color, either from a swatch or by entering a color code. Supports HEX, RGB, or HSL by default. Supports RBGA or HSLA, if transparency is enabled in the capture options.",
										"returns": "Color code as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst color = await Koji.ui.capture.color();\n\n// Enable transparency and return an object\nconst color = await Koji.ui.capture.color({ allowAlpha: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 926,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 849,
												"name": "CaptureColorOptions"
											}
										},
										{
											"id": 927,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the color code as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 799,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 928,
									"name": "color",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 929,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 849,
												"name": "CaptureColorOptions"
											}
										},
										{
											"id": 930,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 931,
									"name": "color",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 932,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 849,
												"name": "CaptureColorOptions"
											}
										},
										{
											"id": 933,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 798,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 934,
							"name": "custom",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 388,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 935,
									"name": "custom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a value from a custom control. To build a custom control, use the [[https://developer.withkoji.com/reference/packages/customvcc/withkoji-custom-vcc-sdk | @withkoji/custom-vcc-sdk package]].",
										"returns": "Color code as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst music = await Koji.ui.capture.custom({ name: 'scloud' });\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 936,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 845,
												"name": "CaptureCustomOptions"
											}
										},
										{
											"id": 937,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the value captured by the custom control."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 799,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 938,
									"name": "custom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 939,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 845,
												"name": "CaptureCustomOptions"
											}
										},
										{
											"id": 940,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 941,
									"name": "custom",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 942,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 845,
												"name": "CaptureCustomOptions"
											}
										},
										{
											"id": 943,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 944,
							"name": "file",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 430,
									"character": 6
								}
							],
							"signatures": [
								{
									"id": 945,
									"name": "file",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to upload a file of any type. Use this method to allow the user to upload raw files in their original format. For example, to capture high-resolution images for download rather than for display in a browser.",
										"text": "To apply automatic transcoding and transformations for specific file types, use the associated method. See [[image]], [[video]], [[audio]], or [[media]].\n",
										"returns": "URL to the file as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst file = await Koji.ui.capture.file();\n\n// Return an object\nconst file = await Koji.ui.capture.file({}, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 946,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 875,
												"name": "CaptureFileOptions"
											}
										},
										{
											"id": 947,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the file as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 799,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 948,
									"name": "file",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 949,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 875,
												"name": "CaptureFileOptions"
											}
										},
										{
											"id": 950,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 951,
									"name": "file",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 952,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 875,
												"name": "CaptureFileOptions"
											}
										},
										{
											"id": 953,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 798,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 954,
							"name": "image",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 488,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 955,
									"name": "image",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select an image by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method when you want to limit the user to selecting an image.",
										"text": "To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n",
										"returns": "URL to the image asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst image = await Koji.ui.capture.image();\n\n// Hide asset packs and return an object\nconst image = await Koji.ui.capture.image({ hideExtensions: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 956,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 852,
												"name": "CaptureImageOptions"
											}
										},
										{
											"id": 957,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the image asset as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 799,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 958,
									"name": "image",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 959,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 852,
												"name": "CaptureImageOptions"
											}
										},
										{
											"id": 960,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 961,
									"name": "image",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 962,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 852,
												"name": "CaptureImageOptions"
											}
										},
										{
											"id": 963,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 798,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 964,
							"name": "link",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 546,
									"character": 6
								}
							],
							"signatures": [
								{
									"id": 965,
									"name": "link",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to paste an external URL, create a new Koji from a template, or select an existing\nKoji from their profile.",
										"returns": "URL as a string or the [[VerboseCapture]] object, if `verbose` is `true`.",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst link = await Koji.ui.capture.link();\n\n// Return an object\nconst link = await Koji.ui.capture.link({}, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 966,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 876,
												"name": "CaptureLinkOptions"
											}
										},
										{
											"id": 967,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL as a string.\n"
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 799,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 968,
									"name": "link",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 969,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 876,
												"name": "CaptureLinkOptions"
											}
										},
										{
											"id": 970,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 971,
									"name": "link",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 972,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 876,
												"name": "CaptureLinkOptions"
											}
										},
										{
											"id": 973,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 798,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 974,
							"name": "media",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 588,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 975,
									"name": "media",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select an image, file, audio, or video by selecting from the available asset packs, by uploading a file, or by entering a URL. Use this method to allow the user to select from more than one type of media with a single control. For example, allow the user to select an image or a video. You can limit the types of media to allow and configure options for each allowed type.",
										"returns": "Value of the media capture, which is either the URL to the media as a string or an object with the URL and additional metadata, or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst media = await Koji.ui.capture.media();\n\n// Limit to image or video, hide asset packs,\n// return an object with extended metadata, transcode videos for HLS\nconst media = await Koji.ui.capture.media({\n   acceptOnly: [image, video],\n   hideExtensions: true,\n   returnType: 'extended',\n   videoOptions: { hls: true }\n }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 976,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 897,
												"name": "CaptureMediaOptions"
											}
										},
										{
											"id": 977,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns only the value of the media capture."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 799,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 978,
									"name": "media",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 979,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 897,
												"name": "CaptureMediaOptions"
											}
										},
										{
											"id": 980,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 981,
									"name": "media",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 982,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 897,
												"name": "CaptureMediaOptions"
											}
										},
										{
											"id": 983,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 798,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 984,
							"name": "range",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 644,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 985,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select a numeric value within a certain range.\nYou can configure the minimum value, maximum value, and default increment, as well as an initial value for the control.",
										"returns": "Numeric value as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst size = await Koji.ui.capture.range();\n\n// Return an object\nconst size = await Koji.ui.capture.range({ min: 0, max: 60, step: 3 }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 986,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 878,
												"name": "CaptureRangeOptions"
											}
										},
										{
											"id": 987,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the numeric value as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 799,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 988,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 989,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 878,
												"name": "CaptureRangeOptions"
											}
										},
										{
											"id": 990,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "number"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 991,
									"name": "range",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 992,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 878,
												"name": "CaptureRangeOptions"
											}
										},
										{
											"id": 993,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 798,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 994,
							"name": "select",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 687,
									"character": 8
								}
							],
							"signatures": [
								{
									"id": 995,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to select from a predefined list of options.",
										"returns": "Value of the predefined option as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst option = await Koji.ui.capture.select();\n\n// Select from three options\nconst option = await Koji.ui.capture.select(\n { options: [\n   { value: \"one\", label: \"Option one\" },\n   { value: \"two\", label: \"Option two\" },\n   { value: \"three\", label: \"Option three\" }],\n   placeholder: \"Choose an option\"});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 996,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CaptureSelectOptions"
											}
										},
										{
											"id": 997,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the option as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 799,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 998,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 999,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CaptureSelectOptions"
											}
										},
										{
											"id": 1000,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1001,
									"name": "select",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1002,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 886,
												"name": "CaptureSelectOptions"
											}
										},
										{
											"id": 1003,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 798,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						},
						{
							"id": 1004,
							"name": "video",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 727,
									"character": 7
								}
							],
							"signatures": [
								{
									"id": 1005,
									"name": "video",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Prompts the user to upload a video. Use this method when you want to limit the user to uploading a video file.",
										"text": "To allow multiple types of media assets, see [[media]]. To allow upload of raw files of any type, see [[file]].\n",
										"returns": "URL to the video asset as a string or the [[VerboseCapture]] object, if `verbose` is `true`.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst video = await Koji.ui.capture.video();\n\n// Transcode for HLS and return an object\nconst video = await Koji.ui.capture.video({ hls: true }, true);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1006,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 891,
												"name": "CaptureVideoOptions"
											}
										},
										{
											"id": 1007,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Indicates whether to return additional metadata about the capture event. If `false` or not specified, returns the URL to the video asset as a string."
											},
											"type": {
												"type": "literal",
												"value": true
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 799,
												"name": "VerboseCapture"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1008,
									"name": "video",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1009,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 891,
												"name": "CaptureVideoOptions"
											}
										},
										{
											"id": 1010,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "literal",
												"value": false
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise"
									}
								},
								{
									"id": 1011,
									"name": "video",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 1012,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 891,
												"name": "CaptureVideoOptions"
											}
										},
										{
											"id": 1013,
											"name": "verbose",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 798,
												"name": "CaptureResult"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								903
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								914,
								924,
								934,
								944,
								954,
								964,
								974,
								984,
								994,
								1004
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 218,
							"character": 20
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 659,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 895,
					"name": "CaptureAudioOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for an [[audio]] capture."
					},
					"children": [
						{
							"id": 896,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium audios)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 198,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								896
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 196,
							"character": 36
						}
					]
				},
				{
					"id": 849,
					"name": "CaptureColorOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[color]] capture."
					},
					"children": [
						{
							"id": 850,
							"name": "allowAlpha",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Indicates whether to support transparency (`false`, by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 115,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 851,
							"name": "initialValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default value for the color capture control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 117,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								850,
								851
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 113,
							"character": 36
						}
					]
				},
				{
					"id": 845,
					"name": "CaptureCustomOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[custom]] capture."
					},
					"children": [
						{
							"id": 846,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Short name for the custom control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 103,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 848,
							"name": "typeOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Type options specific to the custom control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 107,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 847,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "URL where the custom control is hosted."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 105,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								846,
								848,
								847
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 101,
							"character": 37
						}
					]
				},
				{
					"id": 875,
					"name": "CaptureFileOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[file]] capture."
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 131,
							"character": 35
						}
					]
				},
				{
					"id": 852,
					"name": "CaptureImageOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for an [[image]] capture."
					},
					"children": [
						{
							"id": 854,
							"name": "auto",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Enables image optimizations based on content negotiation.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/auto | Fastly auto reference]].\n\n<p class=\"note\">Although the WebP format produces images at a higher compression ratio with a lower loss of quality, it is not supported in all browsers.</p>\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 13,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1123,
								"name": "FastlyOptions.auto"
							}
						},
						{
							"id": 855,
							"name": "bg-color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sets the background color to use when applying padding or when replacing transparent pixels in the image.",
								"text": "The value can be in HEX 3- and 6-digit format (for example, `a22` or `cf23a5`), RGB format (for example,  `255,0,0`), or RGBA format (for example, `0,255,0,0.5`).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/bg-color | Fastly bg-color reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 13,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1124,
								"name": "FastlyOptions.bg-color"
							}
						},
						{
							"id": 856,
							"name": "blur",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a Gaussian blur filter to the image.",
								"text": "The value can be a number of pixels between 0.5 and 1000 (for example, `50`), or a percentage followed by `p` (for example, `1p` for 1%).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/blur | Fastly blur reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1125,
								"name": "FastlyOptions.blur"
							}
						},
						{
							"id": 857,
							"name": "brightness",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases or decreases the brightness of the image.",
								"text": "The value can be a number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `100` – Results in a fully white image.\n* `-100` – Results in a fully black image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/brightness | Fastly brightness reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 41,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1126,
								"name": "FastlyOptions.brightness"
							}
						},
						{
							"id": 858,
							"name": "contrast",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases or decreases the difference between the darkest and lightest tones in the image.",
								"text": "The value can be a number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `-100` – Results in a fully grey image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/contrast | Fastly contrast reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 52,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1127,
								"name": "FastlyOptions.contrast"
							}
						},
						{
							"id": 859,
							"name": "crop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image.",
								"text": "The value starts with the desired width and height of the final image.\nThe rest of the value determines the position of the cropped region within the existing image.\nFor example: `150,100,x50,y50`\tcrops the image to 150px by 100px and selects the starting sub region x coordinate to be 50px and the y coordinate to be 50px. `16:9`\tcrops the image to an aspect ratio of 16:9.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/crop | Fastly crop reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 62,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1128,
								"name": "FastlyOptions.crop"
							}
						},
						{
							"id": 860,
							"name": "dpr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Serves correctly sized images for devices that expose a device pixel ratio.",
								"text": "The value can be any number between 1 and 10.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/dpr | Fastly dpr reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 70,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1129,
								"name": "FastlyOptions.dpr"
							}
						},
						{
							"id": 861,
							"name": "fit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Controls how the image will be constrained within the provided size (width and height) values to maintain the correct proportions.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/fit | Fastly fit reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 76,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "bounds"
									},
									{
										"type": "literal",
										"value": "cover"
									},
									{
										"type": "literal",
										"value": "crop"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1130,
								"name": "FastlyOptions.fit"
							}
						},
						{
							"id": 862,
							"name": "format",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Converts the image to the specified encoded format.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/format | Fastly format reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 82,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									},
									{
										"type": "literal",
										"value": "gif"
									},
									{
										"type": "literal",
										"value": "png"
									},
									{
										"type": "literal",
										"value": "png8"
									},
									{
										"type": "literal",
										"value": "jpg"
									},
									{
										"type": "literal",
										"value": "pjpg"
									},
									{
										"type": "literal",
										"value": "bjpg"
									},
									{
										"type": "literal",
										"value": "webpll"
									},
									{
										"type": "literal",
										"value": "webply"
									},
									{
										"type": "literal",
										"value": "mp4"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1131,
								"name": "FastlyOptions.format"
							}
						},
						{
							"id": 863,
							"name": "frame",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Extracts the first frame from an animated image sequence.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/frame | Fastly frame reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 88,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1132,
								"name": "FastlyOptions.frame"
							}
						},
						{
							"id": 864,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Resizes the height of the image based on pixels or percent.",
								"text": "For absolute heights, set an integer number of pixels.\nFor relative heights (percent), set a value between 0 and 1 or a value between 0 and 100 followed by `p` (for example, `0.5` or `50p` for 50 percent).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/height | Fastly height reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 97,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1133,
								"name": "FastlyOptions.height"
							}
						},
						{
							"id": 853,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium images)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 125,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 865,
							"name": "optimize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies optimal quality compression to produce an output image with as much visual fidelity as possible, while minimizing the file size.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/optimize | Fastly optimize reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 103,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "low"
									},
									{
										"type": "literal",
										"value": "medium"
									},
									{
										"type": "literal",
										"value": "high"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1134,
								"name": "FastlyOptions.optimize"
							}
						},
						{
							"id": 866,
							"name": "orient",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Changes the cardinal orientation of the image.",
								"text": "The value can orient the image right or left, flip it horizontally, flip it vertically, or apply a combination of these options.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/orient | Fastly orient reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 111,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									},
									{
										"type": "literal",
										"value": "r"
									},
									{
										"type": "literal",
										"value": "l"
									},
									{
										"type": "literal",
										"value": "h"
									},
									{
										"type": "literal",
										"value": "v"
									},
									{
										"type": "literal",
										"value": "hv"
									},
									{
										"type": "literal",
										"value": "2"
									},
									{
										"type": "literal",
										"value": "3"
									},
									{
										"type": "literal",
										"value": "4"
									},
									{
										"type": "literal",
										"value": "5"
									},
									{
										"type": "literal",
										"value": "6"
									},
									{
										"type": "literal",
										"value": "7"
									},
									{
										"type": "literal",
										"value": "8"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1135,
								"name": "FastlyOptions.orient"
							}
						},
						{
							"id": 867,
							"name": "pad",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds pixels to the edge of an image.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/pad | Fastly pad reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 117,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1136,
								"name": "FastlyOptions.pad"
							}
						},
						{
							"id": 868,
							"name": "precrop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image before any other transformations occur.",
								"text": "The value is specified in the same way as `crop`, except that `precrop` is performed before any other transformations.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/precrop | Fastly precrop reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 125,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1137,
								"name": "FastlyOptions.precrop"
							}
						},
						{
							"id": 869,
							"name": "quality",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Optimizes the image to the given compression level for lossy file formatted images.",
								"text": "The value can be any integer between 1 and 100, where 1 is a lower quality image and a smaller file and 100 is the highest quality image and larger file.\nAn optional second quality level can be specified for use when auto=webp is enabled and a WebP output format has been selected.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/quality | Fastly quality reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 134,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1138,
								"name": "FastlyOptions.quality"
							}
						},
						{
							"id": 870,
							"name": "resize-filter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Controls the filter used to resize an image to a higher or lower number of pixels.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/resize-filter | Fastly resize-filter reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 134,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "nearest"
									},
									{
										"type": "literal",
										"value": "linear"
									},
									{
										"type": "literal",
										"value": "cubic"
									},
									{
										"type": "literal",
										"value": "lanczos2"
									},
									{
										"type": "literal",
										"value": "lanczos3"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1139,
								"name": "FastlyOptions.resize-filter"
							}
						},
						{
							"id": 871,
							"name": "saturation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sets the intensity of the colors in the image.",
								"text": "The value can be any number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `-100` – Generates a grayscale image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/saturation | Fastly saturation reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 151,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1140,
								"name": "FastlyOptions.saturation"
							}
						},
						{
							"id": 872,
							"name": "sharpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases the definition of the edges of objects in the image.",
								"text": "The value specifies the amount, radius, and threshold for an unsharp mask (for example, `a5,r2,t0`).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/sharpen | Fastly sharpen reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 159,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1141,
								"name": "FastlyOptions.sharpen"
							}
						},
						{
							"id": 873,
							"name": "trim",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from the edge of the image.",
								"text": "The value can be specified in pixels or percent.\nFor example: `25,50,75,100` trims the top edge 25px, right edge 50px, bottom edge 75px, and left edge 100px.\n`0.25`\ttrims all edges by 25 percent.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/trim | Fastly trim reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 169,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1142,
								"name": "FastlyOptions.trim"
							}
						},
						{
							"id": 874,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Resizes the width of the image based on pixels or percent.",
								"text": "For absolute widths, set an integer number of pixels between 1 and 8192.\nFor relative widths (percent), set a value between 0 and 1 or a value between 0 and 100 followed by p (for example, `0.5` or `50p` for 50 percent).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/width | Fastly width reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 178,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 1143,
								"name": "FastlyOptions.width"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								854,
								855,
								856,
								857,
								858,
								859,
								860,
								861,
								862,
								863,
								864,
								853,
								865,
								866,
								867,
								868,
								869,
								870,
								871,
								872,
								873,
								874
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 123,
							"character": 36
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 1122,
							"name": "FastlyOptions"
						}
					]
				},
				{
					"id": 876,
					"name": "CaptureLinkOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[link]] capture."
					},
					"children": [
						{
							"id": 877,
							"name": "kojiTemplateId",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 137,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								877
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 136,
							"character": 35
						}
					]
				},
				{
					"id": 897,
					"name": "CaptureMediaOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[media]] capture."
					},
					"children": [
						{
							"id": 898,
							"name": "acceptOnly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the types of media files to allow. If empty or not specified, any type of file is allowed."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 206,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 890,
											"name": "CaptureMediaAcceptOnly"
										}
									}
								]
							}
						},
						{
							"id": 899,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium media files)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 208,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 901,
							"name": "imageOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the configuration options for image files."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 212,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"id": 852,
										"name": "CaptureImageOptions"
									}
								]
							}
						},
						{
							"id": 900,
							"name": "videoOptions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Specifies the configuration options for video files."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 210,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"id": 891,
										"name": "CaptureVideoOptions"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								898,
								899,
								901,
								900
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 204,
							"character": 36
						}
					]
				},
				{
					"id": 804,
					"name": "CaptureMessage",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 805,
							"name": "_idempotencyKey",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 25,
									"character": 17
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 806,
							"name": "event",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 26,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 807,
							"name": "result",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 27,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"name": "T"
							}
						},
						{
							"id": 808,
							"name": "status",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 28,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"id": 811,
								"name": "CaptureStatus"
							}
						},
						{
							"id": 809,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"id": 814,
								"name": "CaptureType"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								805,
								806,
								807,
								808,
								809
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 24,
							"character": 31
						}
					],
					"typeParameter": [
						{
							"id": 810,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					]
				},
				{
					"id": 878,
					"name": "CaptureRangeOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[range]] capture."
					},
					"children": [
						{
							"id": 882,
							"name": "initialValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default value for the range capture control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 151,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 880,
							"name": "max",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Maximum value. Default is `100`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 147,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 879,
							"name": "min",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Minimum value. Default is `0`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 145,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 881,
							"name": "step",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default increment/step size. Default is `1`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 149,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								882,
								880,
								879,
								881
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 143,
							"character": 36
						}
					]
				},
				{
					"id": 886,
					"name": "CaptureSelectOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[select]] capture."
					},
					"children": [
						{
							"id": 889,
							"name": "initialValue",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Default value for the select capture control."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 173,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 888,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "List of predefined options."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 171,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 883,
											"name": "SelectOption"
										}
									}
								]
							}
						},
						{
							"id": 887,
							"name": "placeholder",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Description of the selection for users."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 169,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								889,
								888,
								887
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 167,
							"character": 37
						}
					]
				},
				{
					"id": 891,
					"name": "CaptureVideoOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Configuration options for a [[video]] capture."
					},
					"children": [
						{
							"id": 893,
							"name": "estimatePoses",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Generates pose detection data. When enabled, pose data is available after upload by appending `.poses` to the returned file URL. For example, `https://objects.koji-cdn.com/project-id/my-video.mp4.poses`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 188,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 894,
							"name": "hideExtensions",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Whether to hide all asset packs and VCC extensions. Enable this option in cases where they do not make sense (for example, Kojis for selling premium videos)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 190,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						},
						{
							"id": 892,
							"name": "hls",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Enables HTTP Live Streaming (HLS) for delivery of longer content. When enabled, uploaded videos are transcoded for HLS and return an m3u8 playlist. Use this feature in conjunction with [[https://github.com/video-dev/hls.js/ | hls.js]] for controlling playback."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 186,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								893,
								894,
								892
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 184,
							"character": 36
						}
					]
				},
				{
					"id": 838,
					"name": "ExtendedLinkResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Metadata for a [[link]] capture when the return type is set to `extended`."
					},
					"children": [
						{
							"id": 841,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Sharing metadata description (`og:description`) of the content at the URL, if available."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 89,
									"character": 13
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 843,
							"name": "sourceName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If the resource is a Koji, the Koji’s name, if available."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 93,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 844,
							"name": "sourceThumbnailUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "If the resource is a Koji, the URL of the Koji’s thumbnail image, if available."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 95,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 842,
							"name": "thumbnailUrl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Sharing metadata image (`og:image`) of the content at the URL, if available."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 91,
									"character": 14
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 840,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Sharing metadata title (`og:title`) of the content at the URL, if available."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 87,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 839,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Full URL of the selected Koji or pasted link resource."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 85,
									"character": 5
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								841,
								843,
								844,
								842,
								840,
								839
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 83,
							"character": 35
						}
					]
				},
				{
					"id": 824,
					"name": "ExtendedMediaResult",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Metadata for a [[media]] capture when the return type is set to `extended`."
					},
					"children": [
						{
							"id": 831,
							"name": "audioMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata for an audio file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 67,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 832,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 833,
													"name": "durationSeconds",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Duration in seconds for an audio file."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 69,
															"character": 19
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														833
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 834,
							"name": "imageMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata for an image file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 72,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 835,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 837,
													"name": "naturalHeight",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Natural height of the image in pixels."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 76,
															"character": 17
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 836,
													"name": "naturalWidth",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "Natural width of the image in pixels."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 74,
															"character": 16
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														837,
														836
													]
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 827,
							"name": "sizeBytes",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Size in bytes of the media file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 60,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 826,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Type of media: `image`, `video`, `audio`, or `file`."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 58,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 825,
							"name": "url",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "URL of the selected media file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 56,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 828,
							"name": "videoMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata for a video file."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 62,
									"character": 15
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 829,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 830,
													"name": "thumbnailUrl",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "URL for the video thumbnail."
													},
													"sources": [
														{
															"fileName": "frontend/ui/capture/index.ts",
															"line": 64,
															"character": 16
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														830
													]
												}
											]
										}
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								831,
								834,
								827,
								826,
								825,
								828
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 54,
							"character": 36
						}
					]
				},
				{
					"id": 883,
					"name": "SelectOption",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "One of the predefined options for a [[select]] capture."
					},
					"children": [
						{
							"id": 885,
							"name": "label",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Description of the option for users."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 161,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 884,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Value to return if the option is selected."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 159,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								885,
								884
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 157,
							"character": 29
						}
					]
				},
				{
					"id": 799,
					"name": "VerboseCapture",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Extended result of a user input capture."
					},
					"children": [
						{
							"id": 800,
							"name": "captureStatus",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Whether the user completed the selection (`succeeded`) or exited the control without selecting a value (`cancelled`)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 15,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"id": 811,
								"name": "CaptureStatus"
							}
						},
						{
							"id": 801,
							"name": "captureType",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Capture method type (for example, `color` or `file`)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 17,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"id": 814,
								"name": "CaptureType"
							}
						},
						{
							"id": 802,
							"name": "result",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Value captured from the user."
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 19,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "reference",
										"id": 799,
										"name": "VerboseCapture"
									}
								]
							}
						},
						{
							"id": 803,
							"name": "resultMetadata",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Metadata associated with the captured result"
							},
							"sources": [
								{
									"fileName": "frontend/ui/capture/index.ts",
									"line": 21,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"id": 824,
										"name": "ExtendedMediaResult"
									},
									{
										"type": "reference",
										"id": 838,
										"name": "ExtendedLinkResult"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								800,
								801,
								802,
								803
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 13,
							"character": 31
						}
					]
				},
				{
					"id": 890,
					"name": "CaptureMediaAcceptOnly",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Types of files to allow for a [[media]] capture. The [[CaptureMediaOptions | configuration options]] vary by media type."
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 179,
							"character": 34
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "image"
							},
							{
								"type": "literal",
								"value": "video"
							},
							{
								"type": "literal",
								"value": "audio"
							},
							{
								"type": "literal",
								"value": "file"
							}
						]
					}
				},
				{
					"id": 798,
					"name": "CaptureResult",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"comment": {
						"shortText": "Result of a user input capture."
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 8,
							"character": 25
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"id": 799,
								"name": "VerboseCapture"
							}
						]
					}
				},
				{
					"id": 1028,
					"name": "capture",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/capture/index.ts",
							"line": 770,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"id": 902,
						"name": "Capture"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						811,
						814
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						902
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						895,
						849,
						845,
						875,
						852,
						876,
						897,
						804,
						878,
						886,
						891,
						838,
						824,
						883,
						799
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						890,
						798
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1028
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/capture/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1051,
			"name": "frontend/ui/navigate",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1052,
					"name": "Navigate",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Provides methods for controlling navigation within your Koji template."
					},
					"children": [
						{
							"id": 1053,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1054,
									"name": "new Navigate",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1052,
										"name": "Navigate"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 661,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 660,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 1061,
							"name": "createRemix",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 67,
									"character": 20
								}
							],
							"signatures": [
								{
									"id": 1062,
									"name": "createRemix",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts a new remix.",
										"tags": [
											{
												"tag": "example",
												"text": "\n ```html\n <button type=\"button\" onClick={() => Koji.ui.navigate.createRemix()}>\n   Create my own remix\n </button>\n ```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1063,
											"name": "appId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "ID of the Koji project to remix. Defaults to the current Koji, if an ID is not specified.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1066,
							"name": "dismiss",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 110,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1067,
									"name": "dismiss",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Closes a Koji that is open in a modal window.",
										"tags": [
											{
												"tag": "example",
												"text": "\n ```html\n <button type=\"button\" onClick={() => Koji.ui.navigate.dismiss()}>\n   Close window\n </button>\n ```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1064,
							"name": "edit",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 92,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 1065,
									"name": "edit",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens the Koji in the editing experience.",
										"text": "<p class=\"note\"> Check that the current user is an admin before calling this method.\nOtherwise, the user will not be authorized to edit the Koji.</p>\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n ```html\n <button type=\"button\" onClick={() => Koji.ui.navigate.edit()}>\n   Edit this Koji\n </button>\n ```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1068,
							"name": "openShareDialog",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 128,
									"character": 24
								}
							],
							"signatures": [
								{
									"id": 1069,
									"name": "openShareDialog",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens the sharing dialog box.",
										"tags": [
											{
												"tag": "example",
												"text": "\n ```html\n <button type=\"button\" onClick={() => Koji.ui.navigate.openShareDialog()}>\n   Share this Koji\n </button>\n ```\n"
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1058,
							"name": "presentInModal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 44,
									"character": 23
								}
							],
							"signatures": [
								{
									"id": 1059,
									"name": "presentInModal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Opens the content at the specified URL in a modal window that animates from the bottom of the screen.\nIf the parent Koji is already displayed in a modal window, the content will open in the same window, replacing the current view.",
										"tags": [
											{
												"tag": "example",
												"text": "\n ```html\n <button type=\"button\" onClick={() => Koji.ui.navigate.presentInModal(url)}>\n   My favorite Koji\n </button>\n ```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1060,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "URL of the content to load.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1055,
							"name": "to",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/navigate/index.ts",
									"line": 21,
									"character": 11
								}
							],
							"signatures": [
								{
									"id": 1056,
									"name": "to",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Replaces the currently loaded Koji with the content at the specified URL.",
										"tags": [
											{
												"tag": "example",
												"text": "\n ```html\n <button type=\"button\" onClick={() => Koji.ui.navigate.to(url)}>\n   My favorite Koji\n </button>\n ```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1057,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "URL of the content to load.\n"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1053
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1061,
								1066,
								1064,
								1068,
								1058,
								1055
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/navigate/index.ts",
							"line": 7,
							"character": 21
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 659,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 1084,
					"name": "navigate",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/navigate/index.ts",
							"line": 136,
							"character": 21
						}
					],
					"type": {
						"type": "reference",
						"id": 1052,
						"name": "Navigate"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1052
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1084
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/navigate/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1085,
			"name": "frontend/ui/present",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1094,
					"name": "Present",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Presents dialog boxes to users on the frontend of your Koji."
					},
					"children": [
						{
							"id": 1095,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 1096,
									"name": "new Present",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 1094,
										"name": "Present"
									},
									"inheritedFrom": {
										"type": "reference",
										"id": 661,
										"name": "KojiBridge.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"id": 660,
								"name": "KojiBridge.constructor"
							}
						},
						{
							"id": 1100,
							"name": "alert",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 79,
									"character": 14
								}
							],
							"signatures": [
								{
									"id": 1101,
									"name": "alert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Presents an alert dialog box to the user. Use this method for messages that do not require any response from the user, other than an acknowledgement. For messages that require a decision, use [[confirmation]].",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nKoji.ui.present.alert({\n title: 'Image Posted',\n message: 'Your new image is available on your fan wall!'\n});\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1102,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "\n"
											},
											"type": {
												"type": "reference",
												"id": 1086,
												"name": "PresentConfirmationOptions"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 1097,
							"name": "confirmation",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPublic": true
							},
							"decorators": [
								{
									"name": "client",
									"type": {
										"type": "reference",
										"id": 435,
										"name": "client"
									}
								}
							],
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 49,
									"character": 27
								}
							],
							"signatures": [
								{
									"id": 1098,
									"name": "confirmation",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Presents a confirmation dialog box to a user. Use this method for messages that require a decision from the user, such as to ask whether to proceed with an action. For messages that do not require a decision, use [[alert]].",
										"returns": "Whether the user confirmed (`true`) or cancelled (`false`) the action.\n",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\nconst confirmed = await Koji.ui.present.confirmation({\n title: 'Delete File',\n message: 'Are you sure you want to delete this file?',\n confirmButtonLabel: 'Delete',\n cancelButtonLabel: 'Cancel'\n});\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 1099,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 1086,
												"name": "PresentConfirmationOptions"
											},
											"defaultValue": "..."
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								1095
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								1100,
								1097
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 31,
							"character": 20
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 659,
							"name": "KojiBridge"
						}
					]
				},
				{
					"id": 1091,
					"name": "PresentAlertOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines an alert dialog box to show a user."
					},
					"children": [
						{
							"id": 1093,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Information to display to the user."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 25,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 1092,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"comment": {
								"shortText": "Title for the dialog box."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 23,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1093,
								1092
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 21,
							"character": 36
						}
					]
				},
				{
					"id": 1086,
					"name": "PresentConfirmationOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Defines a confirmation dialog box to show a user."
					},
					"children": [
						{
							"id": 1090,
							"name": "cancelButtonLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Label for the cancel action (`Cancel` by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 15,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1089,
							"name": "confirmButtonLabel",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Label for the confirm action (`Confirm` by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 13,
									"character": 20
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1088,
							"name": "message",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Question to ask the user (empty by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 11,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1087,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Title for the dialog box (`Confirm` by default)."
							},
							"sources": [
								{
									"fileName": "frontend/ui/present/index.ts",
									"line": 9,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1090,
								1089,
								1088,
								1087
							]
						}
					],
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 7,
							"character": 43
						}
					]
				},
				{
					"id": 1117,
					"name": "present",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "frontend/ui/present/index.ts",
							"line": 94,
							"character": 20
						}
					],
					"type": {
						"type": "reference",
						"id": 1094,
						"name": "Present"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						1094
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1091,
						1086
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						1117
					]
				}
			],
			"sources": [
				{
					"fileName": "frontend/ui/present/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1118,
			"name": "index",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1155,
					"name": "KojiBackend",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 387
				},
				{
					"id": 1156,
					"name": "default",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {},
					"target": 657
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						1155,
						1156
					]
				}
			],
			"sources": [
				{
					"fileName": "index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1119,
			"name": "types",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1122,
					"name": "FastlyOptions",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 1123,
							"name": "auto",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Enables image optimizations based on content negotiation.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/auto | Fastly auto reference]].\n\n<p class=\"note\">Although the WebP format produces images at a higher compression ratio with a lower loss of quality, it is not supported in all browsers.</p>\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 13,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									}
								]
							}
						},
						{
							"id": 1124,
							"name": "bg-color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sets the background color to use when applying padding or when replacing transparent pixels in the image.",
								"text": "The value can be in HEX 3- and 6-digit format (for example, `a22` or `cf23a5`), RGB format (for example,  `255,0,0`), or RGBA format (for example, `0,255,0,0.5`).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/bg-color | Fastly bg-color reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 13,
									"character": 16
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1125,
							"name": "blur",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies a Gaussian blur filter to the image.",
								"text": "The value can be a number of pixels between 0.5 and 1000 (for example, `50`), or a percentage followed by `p` (for example, `1p` for 1%).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/blur | Fastly blur reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 29,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1126,
							"name": "brightness",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases or decreases the brightness of the image.",
								"text": "The value can be a number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `100` – Results in a fully white image.\n* `-100` – Results in a fully black image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/brightness | Fastly brightness reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 41,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1127,
							"name": "contrast",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases or decreases the difference between the darkest and lightest tones in the image.",
								"text": "The value can be a number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `-100` – Results in a fully grey image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/contrast | Fastly contrast reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 52,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1128,
							"name": "crop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image.",
								"text": "The value starts with the desired width and height of the final image.\nThe rest of the value determines the position of the cropped region within the existing image.\nFor example: `150,100,x50,y50`\tcrops the image to 150px by 100px and selects the starting sub region x coordinate to be 50px and the y coordinate to be 50px. `16:9`\tcrops the image to an aspect ratio of 16:9.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/crop | Fastly crop reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 62,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1129,
							"name": "dpr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Serves correctly sized images for devices that expose a device pixel ratio.",
								"text": "The value can be any number between 1 and 10.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/dpr | Fastly dpr reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 70,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1130,
							"name": "fit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Controls how the image will be constrained within the provided size (width and height) values to maintain the correct proportions.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/fit | Fastly fit reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 76,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "bounds"
									},
									{
										"type": "literal",
										"value": "cover"
									},
									{
										"type": "literal",
										"value": "crop"
									}
								]
							}
						},
						{
							"id": 1131,
							"name": "format",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Converts the image to the specified encoded format.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/format | Fastly format reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 82,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "webp"
									},
									{
										"type": "literal",
										"value": "gif"
									},
									{
										"type": "literal",
										"value": "png"
									},
									{
										"type": "literal",
										"value": "png8"
									},
									{
										"type": "literal",
										"value": "jpg"
									},
									{
										"type": "literal",
										"value": "pjpg"
									},
									{
										"type": "literal",
										"value": "bjpg"
									},
									{
										"type": "literal",
										"value": "webpll"
									},
									{
										"type": "literal",
										"value": "webply"
									},
									{
										"type": "literal",
										"value": "mp4"
									}
								]
							}
						},
						{
							"id": 1132,
							"name": "frame",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Extracts the first frame from an animated image sequence.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/frame | Fastly frame reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 88,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									}
								]
							}
						},
						{
							"id": 1133,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Resizes the height of the image based on pixels or percent.",
								"text": "For absolute heights, set an integer number of pixels.\nFor relative heights (percent), set a value between 0 and 1 or a value between 0 and 100 followed by `p` (for example, `0.5` or `50p` for 50 percent).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/height | Fastly height reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 97,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1134,
							"name": "optimize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Applies optimal quality compression to produce an output image with as much visual fidelity as possible, while minimizing the file size.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/optimize | Fastly optimize reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 103,
									"character": 10
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "low"
									},
									{
										"type": "literal",
										"value": "medium"
									},
									{
										"type": "literal",
										"value": "high"
									}
								]
							}
						},
						{
							"id": 1135,
							"name": "orient",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Changes the cardinal orientation of the image.",
								"text": "The value can orient the image right or left, flip it horizontally, flip it vertically, or apply a combination of these options.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/orient | Fastly orient reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 111,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "1"
									},
									{
										"type": "literal",
										"value": "r"
									},
									{
										"type": "literal",
										"value": "l"
									},
									{
										"type": "literal",
										"value": "h"
									},
									{
										"type": "literal",
										"value": "v"
									},
									{
										"type": "literal",
										"value": "hv"
									},
									{
										"type": "literal",
										"value": "2"
									},
									{
										"type": "literal",
										"value": "3"
									},
									{
										"type": "literal",
										"value": "4"
									},
									{
										"type": "literal",
										"value": "5"
									},
									{
										"type": "literal",
										"value": "6"
									},
									{
										"type": "literal",
										"value": "7"
									},
									{
										"type": "literal",
										"value": "8"
									}
								]
							}
						},
						{
							"id": 1136,
							"name": "pad",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Adds pixels to the edge of an image.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/pad | Fastly pad reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 117,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1137,
							"name": "precrop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from an image before any other transformations occur.",
								"text": "The value is specified in the same way as `crop`, except that `precrop` is performed before any other transformations.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/precrop | Fastly precrop reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 125,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1138,
							"name": "quality",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Optimizes the image to the given compression level for lossy file formatted images.",
								"text": "The value can be any integer between 1 and 100, where 1 is a lower quality image and a smaller file and 100 is the highest quality image and larger file.\nAn optional second quality level can be specified for use when auto=webp is enabled and a WebP output format has been selected.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/quality | Fastly quality reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 134,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1139,
							"name": "resize-filter",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Controls the filter used to resize an image to a higher or lower number of pixels.",
								"text": "For more information, see the [[https://developer.fastly.com/reference/io/resize-filter | Fastly resize-filter reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 134,
									"character": 19
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "literal",
										"value": "nearest"
									},
									{
										"type": "literal",
										"value": "linear"
									},
									{
										"type": "literal",
										"value": "cubic"
									},
									{
										"type": "literal",
										"value": "lanczos2"
									},
									{
										"type": "literal",
										"value": "lanczos3"
									}
								]
							}
						},
						{
							"id": 1140,
							"name": "saturation",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Sets the intensity of the colors in the image.",
								"text": "The value can be any number between -100 and 100, as follows:\n\n* `0` (default) – Leaves the image unchanged.\n* `-100` – Generates a grayscale image.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/saturation | Fastly saturation reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 151,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1141,
							"name": "sharpen",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Increases the definition of the edges of objects in the image.",
								"text": "The value specifies the amount, radius, and threshold for an unsharp mask (for example, `a5,r2,t0`).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/sharpen | Fastly sharpen reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 159,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1142,
							"name": "trim",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Removes pixels from the edge of the image.",
								"text": "The value can be specified in pixels or percent.\nFor example: `25,50,75,100` trims the top edge 25px, right edge 50px, bottom edge 75px, and left edge 100px.\n`0.25`\ttrims all edges by 25 percent.\n\nFor more information, see the [[https://developer.fastly.com/reference/io/trim | Fastly trim reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 169,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 1143,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "Resizes the width of the image based on pixels or percent.",
								"text": "For absolute widths, set an integer number of pixels between 1 and 8192.\nFor relative widths (percent), set a value between 0 and 1 or a value between 0 and 100 followed by p (for example, `0.5` or `50p` for 50 percent).\n\nFor more information, see the [[https://developer.fastly.com/reference/io/width | Fastly width reference]].\n"
							},
							"sources": [
								{
									"fileName": "types.ts",
									"line": 178,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								1123,
								1124,
								1125,
								1126,
								1127,
								1128,
								1129,
								1130,
								1131,
								1132,
								1133,
								1134,
								1135,
								1136,
								1137,
								1138,
								1139,
								1140,
								1141,
								1142,
								1143
							]
						}
					],
					"sources": [
						{
							"fileName": "types.ts",
							"line": 5,
							"character": 30
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 852,
							"name": "CaptureImageOptions"
						}
					]
				},
				{
					"id": 1121,
					"name": "IAPToken",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 3,
							"character": 20
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				},
				{
					"id": 1120,
					"name": "UserToken",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "types.ts",
							"line": 1,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "literal",
								"value": null
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						1122
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						1121,
						1120
					]
				}
			],
			"sources": [
				{
					"fileName": "types.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1144,
			"name": "utils/equalsIgnoreOrder",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1145,
					"name": "equalsIgnoreOrder",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/equalsIgnoreOrder.ts",
							"line": 3,
							"character": 30
						}
					],
					"signatures": [
						{
							"id": 1146,
							"name": "equalsIgnoreOrder",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1147,
									"name": "a",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 1148,
									"name": "b",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1145
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/equalsIgnoreOrder.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1149,
			"name": "utils/get",
			"kind": 1,
			"kindString": "Module",
			"flags": {},
			"children": [
				{
					"id": 1150,
					"name": "get",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "utils/get.ts",
							"line": 7,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 1151,
							"name": "get",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 1152,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "GetInput"
									},
									"defaultValue": "..."
								},
								{
									"id": 1153,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								},
								{
									"id": 1154,
									"name": "defaultValue",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						1150
					]
				}
			],
			"sources": [
				{
					"fileName": "utils/get.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 1,
			"children": [
				386,
				1,
				8,
				7,
				29,
				28,
				191,
				272,
				343,
				403,
				417,
				612,
				434,
				440,
				452,
				547,
				580,
				579,
				658,
				676,
				732,
				784,
				1029,
				797,
				1051,
				1085,
				1118,
				1119,
				1144,
				1149
			]
		}
	]
}